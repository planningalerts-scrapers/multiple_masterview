---
http_interactions:
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:42:18 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:42:20 GMT
      Content-Length:
      - '15997'
    body:
      encoding: UTF-8
      string: "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n
        \   <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta
        name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n    <meta
        name=\"author\" content=\"\">\r\n    <meta name=\"keywords\" content=\"Lismore
        City Council,DA Tracker,Application Tracker,Development Application,Development
        Application Tracking, DA Enquiry, Development Application Enquiry, Application
        Tracker\">\r\n    <meta name=\"description\" content=\"The official Lismore
        City Council Application Tracker\">\r\n\r\n    <title>Lismore City Council
        - Application Tracker</title>\r\n\r\n    <!--favicon-->\r\n    <link href=\"/favicon.ico\"
        rel=\"shortcut icon\" type=\"image/x-icon\">\r\n\r\n    <!-- jQuery -->\r\n
        \   <script src=\"/Scripts/jquery-1.11.1.js\"></script>\r\n\r\n    <script
        src=\"/Scripts/jquery-ui-1.11.2.js\"></script>\r\n\r\n    <link href=\"/Content/themes/base/core.css\"
        rel=\"stylesheet\"/>\r\n<link href=\"/Content/themes/base/accordion.css\"
        rel=\"stylesheet\"/>\r\n<link href=\"/Content/themes/base/theme.css\" rel=\"stylesheet\"/>\r\n\r\n\r\n
        \   <!-- Bootstrap -->\r\n    <script src=\"/Scripts/bootstrap.js\"></script>\r\n\r\n
        \   <link href=\"/Content/bootstrap-theme.css\" rel=\"stylesheet\"/>\r\n<link
        href=\"/Content/bootstrap.css\" rel=\"stylesheet\"/>\r\n\r\n    <link href=\"/Content/font-awesome.css\"
        rel=\"stylesheet\"/>\r\n\r\n\r\n    <!-- DataTables -->\r\n    <script src=\"/Scripts/DataTables/jquery.dataTables.js\"></script>\r\n<script
        src=\"/Scripts/DataTables/dataTables.bootstrap.js\"></script>\r\n<script src=\"/Scripts/DataTables/dataTables.responsive.js\"></script>\r\n\r\n
        \   \r\n    <link href=\"/Content/DataTables/css/dataTables.bootstrap.css\"
        rel=\"stylesheet\"/>\r\n<link href=\"/Content/DataTables/css/dataTables.responsive.css\"
        rel=\"stylesheet\"/>\r\n<link href=\"/Content/DataTables/css/dataTables.responsive.scss\"
        rel=\"stylesheet\"/>\r\n\r\n\r\n    <!-- Bootstrap SB-Admin-2 Plugin and other
        css and js files-->\r\n    <script src=\"/js/bootstrap-combobox.js\"></script>\r\n<script
        src=\"/js/bootstrap-datepicker.js\"></script>\r\n<script src=\"/js/jquery.form.js\"></script>\r\n<script
        src=\"/js/jquery.tablesorter.js\"></script>\r\n<script src=\"/js/masterview.js\"></script>\r\n<script
        src=\"/js/metisMenu.js\"></script>\r\n<script src=\"/js/sb-admin-2.js\"></script>\r\n\r\n
        \   <link href=\"/css/bootstrap-combobox.css\" rel=\"stylesheet\"/>\r\n<link
        href=\"/css/datepicker3.css\" rel=\"stylesheet\"/>\r\n<link href=\"/css/masterview-customisations.css\"
        rel=\"stylesheet\"/>\r\n<link href=\"/css/sb-admin-2.css\" rel=\"stylesheet\"/>\r\n\r\n\r\n
        \   <link href=\"/Council_Theme/Lismore/lismore.css\" rel=\"stylesheet\"/>\r\n\r\n
        \   \r\n\r\n    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements
        and media queries -->\r\n    <!-- WARNING: Respond.js doesn't work if you
        view the page via file:// -->\r\n    <!--[if lt IE 9]>\r\n        <script
        src=\"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\"></script>\r\n
        \       <script src=\"https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js\"></script>\r\n
        \   <![endif]-->\r\n\r\n    <link href='http://fonts.googleapis.com/css?family=Raleway:300,400,600,700'
        rel='stylesheet' type='text/css'>\r\n    <link href='http://fonts.googleapis.com/css?family=Oswald:300,400,700'
        rel='stylesheet' type='text/css'>\r\n</head>\r\n\r\n\r\n<body class=\"cbp-spmenu-push\">\r\n
        \   <div class=\"wr\">\r\n        <div id=\"header\">\r\n    <div class=\"container_12\">\r\n\r\n
        \       <h1 id=\"logo\"><a href=\"http://www.lismore.nsw.gov.au/default.asp\"><img
        src=\"//candidate-office.s3.amazonaws.com/shared/lismore/images/logo.png\"
        alt=\"Lismore City Council\" style=\"padding-top:5px\"><strong class=\"vh\">Lismore
        City Council</strong></a></h1>\r\n\r\n        <div class=\"utility right\">\r\n
        \           <a class=\"home-link\" href=\"http://www.lismore.nsw.gov.au/default.asp\">\r\n
        \               <img src=\"//candidate-office.s3.amazonaws.com/shared/lismore/images/home.png\"
        alt=\"Lismore City Council\">\r\n            </a>\r\n        </div>\r\n\r\n
        \       <div class=\"clear\">\r\n        </div>\r\n\r\n    </div>\r\n</div>\r\n
        \       <div id=\"banner\">\r\n            <div class=\"banner-text cf\">\r\n
        \               <div class=\"banner-text-container\">\r\n                    <h1
        class=\"ow\">DA Tracking <span>Portal</span></h1>\r\n                    <p
        class=\"nm\">Information on development applications in the Lismore Local
        Government Area. </p>\r\n                </div>\r\n            </div>\r\n
        \       </div>\r\n        <div class=\"container_12 intro cf\">            <!--
        Navigation -->\r\n            <nav class=\"navbar navbar-default navbar-static-top\"
        role=\"navigation\" style=\"margin-bottom: 0\">\r\n                <div class=\"navbar-header\">\r\n
        \                   <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\"
        data-target=\".navbar-collapse\">\r\n                        <span class=\"sr-only\">Toggle
        navigation</span>\r\n                        <span class=\"icon-bar\"></span>\r\n
        \                       <span class=\"icon-bar\"></span>\r\n                        <span
        class=\"icon-bar\"></span>\r\n                    </button>\r\n                    <a
        class=\"navbar-brand\" href=\"#\"></a>\r\n                </div>\r\n                <!--
        /.navbar-header -->\r\n                <ul class=\"nav navbar-top-links navbar-right
        hidden-xs hidden-sm hidden-md\">\r\n                    <li>\r\n                        <a
        href=\"#\"><span id=\"printIcon\" class=\"glyphicon glyphicon-print\" onclick=\"window.print();\"></span></a>\r\n
        \                   </li>\r\n                </ul>\r\n\r\n                <div
        class=\"navbar-default sidebar\" role=\"navigation\">\r\n                    <div
        class=\"sidebar-nav navbar-collapse\">\r\n                        <ul class=\"nav\"
        id=\"side-menu\">\r\n\r\n                        </ul>\r\n                    </div>\r\n
        \                   <!-- /.sidebar-collapse -->\r\n                </div>\r\n
        \               <!-- /.navbar-static-side -->\r\n            </nav>\r\n            <div
        id=\"page-wrapper\">\r\n                <div class=\"container-fluid\">\r\n
        \                   \r\n\r\n\r\n\r\n<div class=\"page-header\">\r\n    <h2>Disclaimer</h2>\r\n</div>\r\n\r\n<div
        id=\"scrollableContent\">\r\n<h4>General conditions of use</h4>\r\n<p class=\"section\">\r\nThis
        website, including the online services provided within it, is provided in
        good faith and for information purposes only.\r\n</p>\r\n\r\n<p class=\"section\">\r\nAlthough
        every effort is made to ensure the relevance, accuracy, currency and timeliness
        of content, Lismore City Council (LCC) accepts no responsibility whatsoever
        for the accuracy, correctness or otherwise of any information on the pages
        published within this site.\r\n</p>\r\n\r\n<p class=\"section\">\r\nWithout
        limiting the generality of the foregoing, and subject only to statute, LCC
        does not warrant that the information on the pages published within this site
        can be relied upon, expressly disclaims all warranties, express or implied,
        including but not limited to the implied warranties of quality or accuracy
        or merchantability and fitness for a particular purpose, and does not warrant
        or make any representations regarding the use or the results of the use of
        any information on the page published within this site.\r\n</p>\r\n\r\n<p
        class=\"section\">\r\nThis facility is under constant amendment to provide
        the latest and most accurate information available. Some information may,
        however, not be current. Changes in circumstances after time of publication
        may impact on the accuracy of the information provided by this website. In
        addition, information published and transmitted electronically may be subject
        to corruption by the process. No person should place reliance upon information
        from this website in circumstances where loss, damage or injury is possible.
        This is particularly important should you wish to use any information for
        any legal or formal complaint purpose.\r\n\r\n</p>\r\n\r\n<p class=\"section\">\r\nSpecific
        enquiries should be made to LCC, in order to obtain the required information
        or advice directly from Council officers and to otherwise ascertain the accuracy
        of all information contained within these pages. In some cases, you may be
        required to make a written application to Council to obtain the desired information
        or advice. LCC is under no liability to any person in respect of any loss
        or damage (including consequential loss or damage) that may be suffered or
        incurred, or which may arise directly or indirectly, in respect of information
        on the pages published within this site.\r\n\r\n</p>\r\n\r\n<p class=\"section\">\r\nInformation
        that is defamatory, breaches copyright laws or is any way illegal must not
        be published on this website and any such content will be removed from the
        website as immediately as is practicable.\r\n\r\n</p>\r\n</br>\r\n\r\n<h4>Disclosure
        of private information</h4>\r\n\r\n<p class=\"section\">\r\nLCC is subject
        to guidelines provided by the Information and Privacy Commission in the matter
        of open government and disclosure of information in the public interest versus
        constraints around the appropriate and legal publication of personal information.
        Please be aware that various documents and forms on this website may contain
        detailed information about matters of privacy and also provides options available
        to persons submitting information to protect their personal information where
        desired. The documentation and submissions published on this website will
        be made available online, worldwide, for an indefinite period of time. If
        at any time you have concerns about your privacy and the implications of submitting
        information for publication, or information published on this website, phone
        us on 1300 87 83 87.\r\n\r\n</p>\r\n<p class=\"section\">\r\nThe Information
        and Privacy Commission guidelines state that it is not in the public interest
        to disclose certain personal information. While LCC will take steps and endeavour
        to protect personal information from being published online, it is the responsibility
        of applicants and people making submissions to properly manage and format
        documentation in accordance with submission guidelines to assist LCC in readily
        identifying personal information for non-disclosure on this website. You acknowledge
        that LCC will not be held liable for publishing personal information that
        is not able to be readily identified in documentation or severable from other
        relevant information provided that is allowed to be published.\r\n\r\n</p>\r\n<p
        class=\"section\">\r\nFurther information can be found at the Information
        and Privacy Commission website <a href=\"http://www.ipc.nsw.gov.au/privacy/ipc_index.html\">http://www.ipc.nsw.gov.au/privacy/ipc_index.html</a>
        or phone 1800 463 626.\r\n\r\n</p>\r\n<p class=\"section\">\r\nYou agree to
        not use information published on this website to harass, intimidate or contact
        other persons in a manner that is unwelcome.\r\n\r\n</p>\r\n<br/>\r\n<h4>Terms
        and conditions of DA Tracking 'search & enquiry' function</h4>\r\n\r\n<p class=\"section\">\r\nAccess
        to this website implies that you have agreed to the following terms and conditions:\r\n<ul>\r\n<li>The
        contents of this website (which includes downloadable material) are subject
        to copyright and are protected by laws of Australia and other countries through
        international treaties. </li>\r\n<li>LCC grants you a non-exclusive licence
        to reproduce the contents of this website in your web browser (and in any
        cache file produced by your web browser) for the sole purpose of viewing the
        content. LCC reserves all other rights.</li>\r\n</ul>\r\n</p>\r\n</br>\r\n<p
        class=\"section\">\r\nThe information provided on this website is to assist
        customers in tracking the progress of a development application. It represents
        key milestones in the development application process but is not a detailed
        history. Persons wishing to confirm information in detail should contact LCC
        order to obtain a written response.\r\n</p>\r\n</div>\r\n\r\n<p class=\"section\">\r\n</br>\r\n<b>I
        have read and understood the provisions set out above.</b>\r\n</p>\r\n</br>\r\n\r\n\r\n\r\n\r\n<form
        action=\"/Home/DisclaimerProcessing\" method=\"post\"><input id=\"agreed\"
        name=\"agreed\" type=\"hidden\" value=\"False\" />    <div id=\"btns\">\r\n
        \       <button id=\"agree\" type=\"button\" class=\"btn btn-primary\">Agree</button>\r\n
        \       <button id=\"disagree\" type=\"button\" class=\"btn btn-warning\">Disagree</button>\r\n
        \   </div>\r\n</form>\r\n<script type=\"text/javascript\">\r\n\r\n    var
        initialHeightOfScrollBox;\r\n    var lastScrollTop;\r\n    var headerHeight;\r\n\r\n
        \   $(document).ready(function () {\r\n\r\n        updateLeftMargin();\r\n
        \       attachClickHandlers();\r\n\r\n        if (isTextBlockOverflowing())
        {\r\n            var actualContentHeight = $('#page-wrapper').height();\r\n
        \           lastScrollTop = 0;\r\n            initialHeightOfScrollBox = $('#scrollableContent').height();\r\n
        \           headerHeight = $(window).height() - $('#scrollableContent').offset().top;\r\n\r\n
        \           var newHeight = headerHeight + $(window).scrollTop() - $('#btns').height()
        - 100;\r\n            $('#scrollableContent').height(newHeight);\r\n\r\n            $(window).scroll(function
        () {\r\n                var newHeight = headerHeight + $(window).scrollTop()
        - $('#btns').height() - 100;\r\n\r\n                adjustDisclaimerContent(newHeight);\r\n
        \           });\r\n\r\n\r\n            function isScrollDown() {\r\n                var
        st = $(window).scrollTop();\r\n                var result = st >= lastScrollTop;\t\t
        \ // downscroll\r\n\r\n                lastScrollTop = st;\r\n                return
        result;\r\n            }\r\n\r\n\r\n            function adjustDisclaimerContent(newHeight)
        {\r\n                var bIsDownScroll = isScrollDown();\r\n\r\n                var
        scrollableContentHeight = $('#scrollableContent').height();\r\n\r\n                if
        (bIsDownScroll && actualContentHeight > scrollableContentHeight) {\r\n                    $('#scrollableContent').height(newHeight);\r\n
        \               }\r\n                else if (!bIsDownScroll && actualContentHeight
        > newHeight) {\r\n                    $('#scrollableContent').height(newHeight);\r\n
        \               }\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n\r\n
        \   function updateLeftMargin() {\r\n        if ($('#side-menu').html()) {\r\n
        \           $('#page-wrapper').css({ 'margin-left': '0' });\r\n            $('.sidebar').hide();\r\n
        \       }\r\n    }\r\n\r\n\r\n    function attachClickHandlers() {\r\n        $('#agree').click(function
        () {\r\n            $('#agreed').val(\"true\");\r\n            $('form').submit();\r\n
        \       });\r\n\r\n        $('#disagree').click(function () {\r\n            $('#agreed').val(\"false\");\r\n
        \           $('form').submit();\r\n        });\r\n    }\r\n\r\n    function
        isTextBlockOverflowing() {\r\n        return $(\"#scrollableContent\").prop('scrollHeight')
        > $(\"#scrollableContent\").height();\r\n    }\r\n</script>\r\n                </div>\r\n
        \               <!-- /.container-fluid -->\r\n            </div>\r\n        </div>\r\n\r\n
        \       <div class=\"pre-footer container_12 cf\">\r\n            <div class=\"grid_4\">\r\n
        \               <h3 class=\"accd-togg\">Contact Us <i class=\"fa fa-caret-down\"></i></h3>\r\n
        \               <div class=\"accd-container\">\r\n                    <p>Lismore
        City Council<br>ABN: 60 080 932 837</p>\r\n                    <p>43 Oliver
        Avenue<br>Goonellabah NSW 2480</p>\r\n                    <p>Post: PO Box
        23A, Lismore NSW 2480</p>\r\n                    <p>Phone: 1300 87 83 87<br>Fax:
        02 66 250 400</p>\r\n                    <p>Email: <a href=\"mailto:council@lismore.nsw.gov.au\"><strong>council@lismore.nsw.gov.au</strong></a></p>\r\n
        \               </div>\r\n            </div>\r\n        </div>\r\n        <div
        id=\"footer\">\r\n            <div class=\"container_12 cf\">\r\n                <div
        class=\"grid_12 cf ow\">\r\n                    <p class=\"cp\">Copyright
        &copy; 2021 Lismore City Council</p>\r\n                    <p>\r\n\r\n                        <a
        href=\"http://www.lismore.nsw.gov.au/page.asp?p=DOC-OCT-64-57-30\" target=\"_parent\">Internet
        Privacy Statement</a>\r\n                        &nbsp;&nbsp; | &nbsp;&nbsp;\r\n
        \                       <a href=\"http://www.lismore.nsw.gov.au/page.asp?p=DOC-OCT-64-57-30\"
        target=\"_parent\">Disclaimer</a>\r\n                        &nbsp;&nbsp;
        | &nbsp;&nbsp;\r\n                        <a href=\"http://www.lismore.nsw.gov.au/cp_themes/default/sitemap.asp\"
        target=\"_parent\">Site Map</a>\r\n                    </p>\r\n                </div>\r\n
        \           </div>\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>\r\n"
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: post
    uri: https://tracker.lismore.nsw.gov.au/Home/DisclaimerProcessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez
      Host:
      - tracker.lismore.nsw.gov.au
      Referer:
      - https://tracker.lismore.nsw.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:42:22 GMT
      Content-Length:
      - '118'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Referer:
      - https://tracker.lismore.nsw.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:42:24 GMT
      Content-Length:
      - '31070'
    body:
      encoding: UTF-8
      string: "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n
        \   <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta
        name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n    <meta
        name=\"author\" content=\"\">\r\n    <meta name=\"keywords\" content=\"Lismore
        City Council,DA Tracker,Application Tracker,Development Application,Development
        Application Tracking, DA Enquiry, Development Application Enquiry, Application
        Tracker\">\r\n    <meta name=\"description\" content=\"The official Lismore
        City Council Application Tracker\">\r\n\r\n    <title>Lismore City Council
        - Application Tracker</title>\r\n\r\n    <!--favicon-->\r\n    <link href=\"/favicon.ico\"
        rel=\"shortcut icon\" type=\"image/x-icon\">\r\n\r\n    <!-- jQuery -->\r\n
        \   <script src=\"/Scripts/jquery-1.11.1.js\"></script>\r\n\r\n    <script
        src=\"/Scripts/jquery-ui-1.11.2.js\"></script>\r\n\r\n    <link href=\"/Content/themes/base/core.css\"
        rel=\"stylesheet\"/>\r\n<link href=\"/Content/themes/base/accordion.css\"
        rel=\"stylesheet\"/>\r\n<link href=\"/Content/themes/base/theme.css\" rel=\"stylesheet\"/>\r\n\r\n\r\n
        \   <!-- Bootstrap -->\r\n    <script src=\"/Scripts/bootstrap.js\"></script>\r\n\r\n
        \   <link href=\"/Content/bootstrap-theme.css\" rel=\"stylesheet\"/>\r\n<link
        href=\"/Content/bootstrap.css\" rel=\"stylesheet\"/>\r\n\r\n    <link href=\"/Content/font-awesome.css\"
        rel=\"stylesheet\"/>\r\n\r\n\r\n    <!-- DataTables -->\r\n    <script src=\"/Scripts/DataTables/jquery.dataTables.js\"></script>\r\n<script
        src=\"/Scripts/DataTables/dataTables.bootstrap.js\"></script>\r\n<script src=\"/Scripts/DataTables/dataTables.responsive.js\"></script>\r\n\r\n
        \   \r\n    <link href=\"/Content/DataTables/css/dataTables.bootstrap.css\"
        rel=\"stylesheet\"/>\r\n<link href=\"/Content/DataTables/css/dataTables.responsive.css\"
        rel=\"stylesheet\"/>\r\n<link href=\"/Content/DataTables/css/dataTables.responsive.scss\"
        rel=\"stylesheet\"/>\r\n\r\n\r\n    <!-- Bootstrap SB-Admin-2 Plugin and other
        css and js files-->\r\n    <script src=\"/js/bootstrap-combobox.js\"></script>\r\n<script
        src=\"/js/bootstrap-datepicker.js\"></script>\r\n<script src=\"/js/jquery.form.js\"></script>\r\n<script
        src=\"/js/jquery.tablesorter.js\"></script>\r\n<script src=\"/js/masterview.js\"></script>\r\n<script
        src=\"/js/metisMenu.js\"></script>\r\n<script src=\"/js/sb-admin-2.js\"></script>\r\n\r\n
        \   <link href=\"/css/bootstrap-combobox.css\" rel=\"stylesheet\"/>\r\n<link
        href=\"/css/datepicker3.css\" rel=\"stylesheet\"/>\r\n<link href=\"/css/masterview-customisations.css\"
        rel=\"stylesheet\"/>\r\n<link href=\"/css/sb-admin-2.css\" rel=\"stylesheet\"/>\r\n\r\n\r\n
        \   <link href=\"/Council_Theme/Lismore/lismore.css\" rel=\"stylesheet\"/>\r\n\r\n
        \   \r\n\r\n    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements
        and media queries -->\r\n    <!-- WARNING: Respond.js doesn't work if you
        view the page via file:// -->\r\n    <!--[if lt IE 9]>\r\n        <script
        src=\"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\"></script>\r\n
        \       <script src=\"https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js\"></script>\r\n
        \   <![endif]-->\r\n\r\n    <link href='http://fonts.googleapis.com/css?family=Raleway:300,400,600,700'
        rel='stylesheet' type='text/css'>\r\n    <link href='http://fonts.googleapis.com/css?family=Oswald:300,400,700'
        rel='stylesheet' type='text/css'>\r\n</head>\r\n\r\n\r\n<body class=\"cbp-spmenu-push\">\r\n
        \   <div class=\"wr\">\r\n        <div id=\"header\">\r\n    <div class=\"container_12\">\r\n\r\n
        \       <h1 id=\"logo\"><a href=\"http://www.lismore.nsw.gov.au/default.asp\"><img
        src=\"//candidate-office.s3.amazonaws.com/shared/lismore/images/logo.png\"
        alt=\"Lismore City Council\" style=\"padding-top:5px\"><strong class=\"vh\">Lismore
        City Council</strong></a></h1>\r\n\r\n        <div class=\"utility right\">\r\n
        \           <a class=\"home-link\" href=\"http://www.lismore.nsw.gov.au/default.asp\">\r\n
        \               <img src=\"//candidate-office.s3.amazonaws.com/shared/lismore/images/home.png\"
        alt=\"Lismore City Council\">\r\n            </a>\r\n        </div>\r\n\r\n
        \       <div class=\"clear\">\r\n        </div>\r\n\r\n    </div>\r\n</div>\r\n
        \       <div id=\"banner\">\r\n            <div class=\"banner-text cf\">\r\n
        \               <div class=\"banner-text-container\">\r\n                    <h1
        class=\"ow\">DA Tracking <span>Portal</span></h1>\r\n                    <p
        class=\"nm\">Information on development applications in the Lismore Local
        Government Area. </p>\r\n                </div>\r\n            </div>\r\n
        \       </div>\r\n        <div class=\"container_12 intro cf\">            <!--
        Navigation -->\r\n            <nav class=\"navbar navbar-default navbar-static-top\"
        role=\"navigation\" style=\"margin-bottom: 0\">\r\n                <div class=\"navbar-header\">\r\n
        \                   <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\"
        data-target=\".navbar-collapse\">\r\n                        <span class=\"sr-only\">Toggle
        navigation</span>\r\n                        <span class=\"icon-bar\"></span>\r\n
        \                       <span class=\"icon-bar\"></span>\r\n                        <span
        class=\"icon-bar\"></span>\r\n                    </button>\r\n                    <a
        class=\"navbar-brand\" href=\"#\"></a>\r\n                </div>\r\n                <!--
        /.navbar-header -->\r\n                <ul class=\"nav navbar-top-links navbar-right
        hidden-xs hidden-sm hidden-md\">\r\n                    <li>\r\n                        <a
        href=\"#\"><span id=\"printIcon\" class=\"glyphicon glyphicon-print\" onclick=\"window.print();\"></span></a>\r\n
        \                   </li>\r\n                </ul>\r\n\r\n                <div
        class=\"navbar-default sidebar\" role=\"navigation\">\r\n                    <div
        class=\"sidebar-nav navbar-collapse\">\r\n                        <ul class=\"nav\"
        id=\"side-menu\">\r\n                                    <li class=\"active\">\r\n
        \                                       <a href=\"#\"><i class=\"fa fa-list-ul
        fa-fw\"></i>Application Tracker<span class=\"fa arrow\"></span></a>\r\n                                        <ul
        class=\"nav nav-second-level collapse\">\r\n                                                <li>\r\n
        \                                                   <a href=/Home/About target=_self>What
        is Application Tracker?</a>\r\n                                                </li>\r\n
        \                                               <li>\r\n                                                    <a
        href=/Home/Disclaimer target=_self>Disclaimer</a>\r\n                                                </li>\r\n
        \                                       </ul>\r\n                                        <!--
        /.nav-second-level -->\r\n                                    </li>\r\n                                    <li
        class=\"active\">\r\n                                        <a href=\"#\"><i
        class=\"fa fa-list-ul fa-fw\"></i>Applications<span class=\"fa arrow\"></span></a>\r\n
        \                                       <ul class=\"nav nav-second-level collapse\">\r\n
        \                                               <li>\r\n                                                    <a
        href=/Home/Index target=>Application Tracker Home</a>\r\n                                                </li>\r\n
        \                                               <li>\r\n                                                    <a
        href=/Home/Search id=search target=_self>Search</a>\r\n                                                </li>\r\n
        \                                               <li>\r\n                                                    <a
        href=/Application/AdvancedSearchResult?RemoveUndeterminedApplications=False&ShowOutstandingApplications=True&ShowExhibitedApplications=False&IncludeDocuments=False
        id=outstanding-apps target=_self>Undetermined Applications</a>\r\n                                                </li>\r\n
        \                                               <li>\r\n                                                    <a
        href=/Application/AdvancedSearchResult?RemoveUndeterminedApplications=False&ShowOutstandingApplications=False&ShowExhibitedApplications=True&IncludeDocuments=False
        id=exhibited-apps target=_self>Applications On Exhibition</a>\r\n                                                </li>\r\n
        \                                       </ul>\r\n                                        <!--
        /.nav-second-level -->\r\n                                    </li>\r\n                                    <li
        class=\"active\">\r\n                                        <a href=\"#\"><i
        class=\"fa fa-list-ul fa-fw\"></i>Applications Submitted<span class=\"fa arrow\"></span></a>\r\n
        \                                       <ul class=\"nav nav-second-level collapse\">\r\n
        \                                               <li>\r\n                                                    <a
        href=/Application/AdvancedSearchResult?DateFrom=15%2f03%2f2021&DateTo=15%2f03%2f2021&DateType=1&RemoveUndeterminedApplications=False&ApplicationType=5%2c8%2c10%2c13&ShowOutstandingApplications=False&ShowExhibitedApplications=False&IncludeDocuments=False
        target=_self>This Week</a>\r\n                                                </li>\r\n
        \                                               <li>\r\n                                                    <a
        href=/Application/AdvancedSearchResult?DateFrom=7%2f03%2f2021&DateTo=13%2f03%2f2021&DateType=1&RemoveUndeterminedApplications=False&ApplicationType=5%2c8%2c10%2c13&ShowOutstandingApplications=False&ShowExhibitedApplications=False&IncludeDocuments=False
        target=_self>Last Week</a>\r\n                                                </li>\r\n
        \                                               <li>\r\n                                                    <a
        href=/Application/AdvancedSearchResult?DateFrom=1%2f03%2f2021&DateTo=15%2f03%2f2021&DateType=1&RemoveUndeterminedApplications=False&ApplicationType=5%2c8%2c10%2c13&ShowOutstandingApplications=False&ShowExhibitedApplications=False&IncludeDocuments=False
        target=_self>This Month</a>\r\n                                                </li>\r\n
        \                                               <li>\r\n                                                    <a
        href=/Application/AdvancedSearchResult?DateFrom=1%2f02%2f2021&DateTo=28%2f02%2f2021&DateType=1&RemoveUndeterminedApplications=False&ApplicationType=5%2c8%2c10%2c13&ShowOutstandingApplications=False&ShowExhibitedApplications=False&IncludeDocuments=False
        target=_self>Last Month</a>\r\n                                                </li>\r\n
        \                                       </ul>\r\n                                        <!--
        /.nav-second-level -->\r\n                                    </li>\r\n                                    <li
        class=\"active\">\r\n                                        <a href=\"#\"><i
        class=\"fa fa-list-ul fa-fw\"></i>Applications Determined<span class=\"fa
        arrow\"></span></a>\r\n                                        <ul class=\"nav
        nav-second-level collapse\">\r\n                                                <li>\r\n
        \                                                   <a href=/Application/AdvancedSearchResult?DateFrom=15%2f03%2f2021&DateTo=15%2f03%2f2021&DateType=2&RemoveUndeterminedApplications=True&ApplicationType=5%2c8%2c10%2c13&ShowOutstandingApplications=False&ShowExhibitedApplications=False&IncludeDocuments=False
        target=_self>This Week</a>\r\n                                                </li>\r\n
        \                                               <li>\r\n                                                    <a
        href=/Application/AdvancedSearchResult?DateFrom=7%2f03%2f2021&DateTo=13%2f03%2f2021&DateType=2&RemoveUndeterminedApplications=True&ApplicationType=5%2c8%2c10%2c13&ShowOutstandingApplications=False&ShowExhibitedApplications=False&IncludeDocuments=False
        target=_self>Last Week</a>\r\n                                                </li>\r\n
        \                                               <li>\r\n                                                    <a
        href=/Application/AdvancedSearchResult?DateFrom=1%2f03%2f2021&DateTo=15%2f03%2f2021&DateType=2&RemoveUndeterminedApplications=True&ApplicationType=5%2c8%2c10%2c13&ShowOutstandingApplications=False&ShowExhibitedApplications=False&IncludeDocuments=False
        target=_self>This Month</a>\r\n                                                </li>\r\n
        \                                               <li>\r\n                                                    <a
        href=/Application/AdvancedSearchResult?DateFrom=1%2f02%2f2021&DateTo=28%2f02%2f2021&DateType=2&RemoveUndeterminedApplications=True&ApplicationType=5%2c8%2c10%2c13&ShowOutstandingApplications=False&ShowExhibitedApplications=False&IncludeDocuments=False
        target=_self>Last Month</a>\r\n                                                </li>\r\n
        \                                       </ul>\r\n                                        <!--
        /.nav-second-level -->\r\n                                    </li>\r\n\r\n
        \                       </ul>\r\n                    </div>\r\n                    <!--
        /.sidebar-collapse -->\r\n                </div>\r\n                <!-- /.navbar-static-side
        -->\r\n            </nav>\r\n            <div id=\"page-wrapper\">\r\n                <div
        class=\"container-fluid\">\r\n                    \r\n\r\n\r\n\r\n\r\n\r\n<div
        class=\"page-header\">\r\n    <h2>Home</h2>\r\n</div>\r\n<div>\r\n    <p>Council's
        Development Application Tracker allows you to view details of applications
        lodged at Council since 1 January 2011 until today.</p>\r\n    <p>The \"Home\"
        page shows you the development applications submitted in the last two weeks.
        Click on one of the red icons on the map below to view more details about
        that application.</p>\r\n    <p>The options on the left hand side of this
        page allow you to search for applications submitted or determined over a specific
        week or month, undetermined applications and applications currently on exhibition.
        Alternatively, you can use the \"Search\" option if you have the application
        number or particulars about the property.\r\n    </p>\r\n</div>\r\n\r\n\r\n\r\n\r\n<div
        id=\"gmapsLabel\">\r\n    <h4>Applications submitted between 1 March 2021
        and 15 March 2021</h4>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n<div id=\"map_container\"
        class=\"homepage\">\r\n    <div id=\"map_canvas\" class=\"iframe-rwd\"></div>\r\n</div>\r\n\r\n\r\n<div
        id=\"map_canvas_print_container\">\r\n    <div id=\"map_canvas_print\"></div>\r\n</div>\r\n\r\n\r\n<script
        type=\"text/javascript\">\r\n\r\n    var map, mapPrint;\r\n    var geocoder;\r\n
        \   var bounds;\r\n    var next = 0;\r\n    var propertyAddressesGM;\r\n    var
        boundsEnabled = false;\r\n    var arrMarkerAndInfoWindowHolder = [];\r\n\r\n
        \   //CLIENT SPECIFIC VALUES\r\n    //prevents markers showing from outside
        this region when boundsEnabled=true\r\n    var latMaxLimit = -27;\r\n    var
        lngMaxLimit = 153;\r\n\r\n    // using the web.config to get zoomlevel,base
        address and scrollenabled values\r\n    var defaultZoomLevelGM = 10;\r\n    var
        scrollenabled = false;\r\n    var scrollconfig = \"\";\r\n    var baseaddress
        = \"\";\r\n    var basecountrycode = \"\";\r\n    var infowindow;\r\n\r\n
        \   function initializeGoogleMaps() {\r\n\r\n        google.maps.event.addDomListener(window,
        'resize', function() {\r\n            var center = map.getCenter();\r\n            google.maps.event.trigger(map,
        'resize');\r\n            map.setCenter(center);\r\n            mapPrint.setCenter(center);\r\n
        \       });\r\n\r\n        geocoder = new google.maps.Geocoder();\r\n        bounds
        = new google.maps.LatLngBounds();\r\n\r\n        scrollconfig = \"yes\";\r\n
        \       if(scrollconfig == \"yes\") {\r\n            scrollenabled = true;\r\n
        \       }\r\n\r\n        var mapOptions = {\r\n            zoom: defaultZoomLevelGM,\r\n
        \           mapTypeId: google.maps.MapTypeId.ROADMAP,\r\n            scrollwheel:
        true\r\n        };\r\n\r\n        map = new google.maps.Map(document.getElementById(\"map_canvas\"),
        mapOptions);\r\n\r\n        //Only load the maps for tablets and bigger screens\r\n
        \       if(screen.width > 768)\r\n        {\r\n            mapPrint = new
        google.maps.Map(document.getElementById(\"map_canvas_print\"), mapOptions);\r\n
        \           setEventListenersToBindPrintMapToDisplayMap();\r\n        }\r\n
        \       else {\r\n            $('#map_canvas_print_container').remove();\r\n
        \       }\r\n\r\n        setMapCentre();\r\n\r\n        populateMarkerAndInfoWindowHolderArray();\r\n\r\n
        \       createAndPlotMarkers() ;\r\n    }\r\n\r\n    function setMapCentre()
        {\r\n        // Get the centre Point address and Set Centre Point\r\n        baseaddress
        = \"43 Oliver Avenue, Goonellabah NSW 2480\";\r\n        basecountrycode =
        \"AU\";\r\n\r\n        geocoder.geocode({'address' : baseaddress, 'componentRestrictions'
        : {'country':basecountrycode}},\r\n            function(results, status) {\r\n
        \               if(status == google.maps.GeocoderStatus.OK) {\r\n                    var
        result = results[0].geometry.location;\r\n                    map.setCenter(result);\r\n
        \               }\r\n            });\r\n    }\r\n\r\n    /* Sets event handlers
        so that the changes on the display map reflect on the hidden print map */\r\n
        \   function setEventListenersToBindPrintMapToDisplayMap() {\r\n        google.maps.event.addListener(map,
        'zoom_changed', function() {\r\n            var zoomLevel = map.getZoom();\r\n
        \           var center = map.getCenter();\r\n\r\n            //Set zoom and
        center of the hidden printable map\r\n            mapPrint.setZoom(zoomLevel);\r\n
        \           mapPrint.setCenter(center);\r\n        });\r\n\r\n        google.maps.event.addListener(map,
        'center_changed', function() {\r\n            var center = map.getCenter();\r\n\r\n
        \           //Set center of the hidden printable map\r\n            mapPrint.setCenter(center);\r\n
        \       });\r\n    }\r\n\r\n    /* Parses XML geocodes and populates the data
        into MarkerAndInfoWindowHolder object instances to later plot on the map */\r\n
        \   function populateMarkerAndInfoWindowHolderArray() {\r\n        var properties
        = null;\r\n        latlngbounds = new google.maps.LatLngBounds();\r\n\r\n
        \       var item = [[\"-28.8111114,153.2749327\",\"10/21 Conway St, Lismore
        2480 NSW \",\"Office Premises\",\"008.2020.00000034.001\",\"8.2020.34.1\"],[\"-28.7210964,153.3965799\",\"168
        James Gibson Rd, Clunes 2480 NSW \",\"DA20/305 - 168 James Gibson Road - Dwelling
        extension\",\"010.2020.00000305.001\",\"10.2020.305.1\"],[\"-28.8264733,153.3409845\",\"15
        Keoghan Dr, Goonellabah 2480 NSW \",\"DA20/315 - 15 Keoghan Drive - Dwelling
        and retaining walls\",\"005.2020.00000315.001\",\"5.2020.315.1\"],[\"-28.8221373,153.3190343\",\"25
        Wyreema Ave, Goonellabah 2480 NSW \",\"DA20/301 - 25 Wyreema Avenue - Carport
        with a building line variation\",\"005.2020.00000301.001\",\"5.2020.301.1\"],[\"-28.8116465,153.3203482\",\"4
        Cavendish Rd, Goonellabah 2480 NSW \",\"Dual Occupancy Detached\",\"005.2019.00000031.002\",\"5.2019.31.2\"],[\"-28.824727,153.2158748\",\"14
        Lomandra Ave, Caniaba 2480 NSW \",\"Swimming Pool Inground\",\"010.2020.00000319.001\",\"10.2020.319.1\"],[\"-28.824727,153.2158748\",\"14
        Lomandra Ave, Caniaba 2480 NSW \",\"Swimming Pool Inground\",\"005.2020.00000319.001\",\"5.2020.319.1\"],[\"-28.6494865,153.15327\",\"121
        Mclennan Rd, Georgica 2480 NSW \",\"DA20/316 - 121 McLennan Road - Dwelling
        \\u0026 pool detached dual occupan\",\"005.2020.00000316.001\",\"5.2020.316.1\"],[\"-28.7315479,153.4021083\",\"6
        Ewandale Cl, Clunes 2480 NSW \",\"Dwelling\",\"010.2020.00000318.001\",\"10.2020.318.1\"],[\"-28.7315479,153.4021083\",\"6
        Ewandale Cl, Clunes 2480 NSW \",\"Dwelling\",\"005.2020.00000318.001\",\"5.2020.318.1\"],[\"-28.816667,153.316667\",\"5
        Mahogany Pde, Goonellabah 2480 NSW \",\"CDA20/33 - 5 Mahogany Parade GOONELLABAH
        - Dwelling\",\"008.2020.00000033.001\",\"8.2020.33.1\"],[\"-28.8220069,153.3249753\",\"5
        Eggins Pl, Goonellabah 2480 NSW \",\"Dwelling\",\"008.2020.00000003.002\",\"8.2020.3.2\"],[\"-28.684005,153.316708\",\"101
        James St, Dunoon 2480 NSW \",\"DA19/152 - 101 \\u0026 103 James Street - Strata
        Subdivision, create 2 lots\",\"013.2019.00000152.001\",\"13.2019.152.1\"],[\"-28.8330323,153.3386383\",\"11
        Willow Tree Dr, Chilcotts Grass 2480 NSW \",\"Section 4.55(1A) modification
        to enable the creation of a development\",\"005.2016.00000100.005\",\"5.2016.100.5\"],[\"-28.5803095,153.284254\",\"8/117
        Upper Tuntable Falls Rd, Nimbin 2480 NSW \",\"DA20/314 - 8N 117 Upper Tuntable
        Falls Road - Dwelling\",\"005.2020.00000314.001\",\"5.2020.314.1\"],[\"-28.5803095,153.284254\",\"8/117
        Upper Tuntable Falls Rd, Nimbin 2480 NSW \",\"Dwelling\",\"005.2020.00000317.001\",\"5.2020.317.1\"],[\"-28.6884239,153.3181592\",\"46
        May St, Dunoon 2480 NSW \",\"DA20/313 - 46 May Street - Resited dwelling\",\"005.2020.00000313.001\",\"5.2020.313.1\"],[\"-28.6884239,153.3181592\",\"46
        May St, Dunoon 2480 NSW \",\"DA20/313 - 46 May Street - Resited dwelling\",\"010.2020.00000313.001\",\"10.2020.313.1\"],[\"-28.798631,153.2994621\",\"16
        Kareela Ave, Lismore Heights 2480 NSW \",\"DA18/89 - 16 Kareela Avenue - Staged
        Subdivision (to create 3 lots)\",\"013.2018.00000089.001\",\"13.2018.89.1\"],[\"-28.7210964,153.3965799\",\"168
        James Gibson Rd, Clunes 2480 NSW \",\"DA20/305 - 168 James Gibson Road - Dwelling
        extension\",\"005.2020.00000305.001\",\"5.2020.305.1\"],[\"-28.8221373,153.3190343\",\"25
        Wyreema Ave, Goonellabah 2480 NSW \",\"DA230/301 - 25 Wyreema Avenue - Carport
        with a building line variation\",\"010.2020.00000301.001\",\"10.2020.301.1\"],[\"-28.7236367,153.4093186\",\"3
        Remnant Dr, Clunes 2480 NSW \",\"DA20/300 - 3 Remnant Drive, Clunes - Inground
        swimming pool\",\"005.2020.00000300.001\",\"5.2020.300.1\"],[\"-28.6765966,153.2705125\",\"872
        Koonorigan Rd, The Channon 2480 NSW \",\"DA20/297- 872 Koonorigan Road, The
        Channon - Inground swimming pool\",\"010.2020.00000297.001\",\"10.2020.297.1\"],[\"-28.6765966,153.2705125\",\"872
        Koonorigan Rd, The Channon 2480 NSW \",\"DA20/297- 872 Koonorigan Road, The
        Channon - Inground swimming pool\",\"005.2020.00000297.001\",\"5.2020.297.1\"],[\"-28.7828349,153.3854559\",\"178
        Cameron Rd, Mcleans Ridges 2480 NSW \",\"DA20/311 - 178 Cameron Road - Dwelling
        alterations and additions\",\"005.2020.00000311.001\",\"5.2020.311.1\"],[\"-28.8264682,153.31559\",\"5
        Flametree Dr, Goonellabah 2480 NSW \",\"DA20/304 - 5 Flametree Drive, Goonellabah
        - Dwelling\",\"005.2020.00000304.001\",\"5.2020.304.1\"],[\"-28.8050948,153.3910224\",\"10
        Talbot Cl, Mcleans Ridges 2480 NSW \",\"DA20/303 - 10 Talbot Close, McLeans
        Ridges - Inground swimming pool\",\"005.2020.00000303.001\",\"5.2020.303.1\"],[\"-28.78986,153.3859379\",\"23
        Spurfield Rd, Mcleans Ridges 2480 NSW \",\"DA20/299- 23 Spurfield Road, McLeans
        Ridges - Inground swimming pool\",\"010.2020.00000299.001\",\"10.2020.299.1\"],[\"-28.78986,153.3859379\",\"23
        Spurfield Rd, Mcleans Ridges 2480 NSW \",\"DA20/299- 23 Spurfield Road, McLeans
        Ridges - Inground swimming pool\",\"005.2020.00000299.001\",\"5.2020.299.1\"],[\"-28.5803095,153.284254\",\"8/117
        Upper Tuntable Falls Rd, Nimbin 2480 NSW \",\"DA20/312 - D8 117 Upper Tuntable
        Falls Road - Dwelling\",\"005.2020.00000312.001\",\"5.2020.312.1\"],[\"-28.5803095,153.284254\",\"11/117
        Upper Tuntable Falls Rd, Nimbin 2480 NSW \",\"DA20/310 - G11 117 Upper Tuntable
        Falls Road - Dwelling\",\"005.2020.00000310.001\",\"5.2020.310.1\"],[\"-28.78986,153.3859379\",\"26
        Spurfield Rd, Mcleans Ridges 2480 NSW \",\"DA20/224 - 26 Spurfield Road -
        Detached dual occupancy\",\"010.2020.00000224.001\",\"10.2020.224.1\"],[\"-28.826566,153.2199237\",\"548
        Caniaba Rd, Caniaba 2480 NSW \",\"DA20/309 - 548 Caniaba Road - Retaining
        wall and shed\",\"005.2020.00000309.001\",\"5.2020.309.1\"],[\"-28.8107188,153.2766914\",\"8/44
        Carrington St, Lismore 2480 NSW \",\"Commercial Premises\",\"008.2020.00000032.001\",\"8.2020.32.1\"],[\"-28.810782,153.3029291\",\"405
        Ballina Rd, Lismore 2480 NSW \",\"DA20/308 - 405 Ballina Road - Change of
        use to a tattoo parlour\",\"005.2020.00000308.001\",\"5.2020.308.1\"],[\"-28.8898173,153.3053241\",\"52
        Bridge St, Wyrallah 2480 NSW \",\"DA20/307 - 52 Bridge Street - Shed\",\"005.2020.00000307.001\",\"5.2020.307.1\"],[\"-28.8898173,153.3053241\",\"52
        Bridge St, Wyrallah 2480 NSW \",\"DA20/307 - 52 Bridge Street - Shed\",\"010.2020.00000307.001\",\"10.2020.307.1\"],[\"-28.7668746,153.3352857\",\"25
        Rankin Rd, Bexhill 2480 NSW \",\"DA20/62 - Dual Occupancy Detached- 25B\\u0026
        25A Rankin Rd(CC No.190573/01)\",\"010.2020.00000062.001\",\"10.2020.62.1\"],[\"-28.7444821,153.3962113\",\"128
        Johnston Rd, Clunes 2480 NSW \",\"Section 4.55(1A) modification to Condition
        no. 1 (CC No. 2020/248.1)\",\"010.2019.00000241.001\",\"10.2019.241.1\"],[\"-28.8098908,153.3221199\",\"8
        Northcott Dr, Goonellabah 2480 NSW \",\"DA20/208 - 8 Northcott Drive, Goonellabah
        - Carport with blv to 2m to\",\"010.2020.00000208.001\",\"10.2020.208.1\"],[\"-28.7915639,153.3566176\",\"280
        Richmond Hill Rd, Richmond Hill 2480 NSW \",\"DA20/306 - 280 Richmond Hill
        Road, Richmond Hill - Dwelling alts adds\",\"005.2020.00000306.001\",\"5.2020.306.1\"],[\"-28.7915639,153.3566176\",\"280
        Richmond Hill Rd, Richmond Hill 2480 NSW \",\"DA20/306 - 280 Richmond Hill
        Road, Richmond Hill - Dwelling alts adds\",\"010.2020.00000306.001\",\"10.2020.306.1\"],[\"-28.5803095,153.284254\",\"4/117
        Upper Tuntable Falls Rd, Nimbin 2480 NSW \",\"DA20/302 - J4 117 Upper Tuntable
        Falls Roads - Dwelling\",\"005.2020.00000302.001\",\"5.2020.302.1\"],[\"-28.7927856,153.3697809\",\"37
        Baldock Dr, Mcleans Ridges 2480 NSW \",\"Section 4.55(1A) modification to
        the driveway\",\"005.2018.00000322.002\",\"5.2018.322.2\"],[\"-28.8294205,153.2643948\",\"77
        Krauss Ave, Loftville 2480 NSW \",\"CDA20/31 - 77 Krauss Avenue - Extension
        of Helipad\",\"008.2020.00000031.001\",\"8.2020.31.1\"],[\"-28.816667,153.316667\",\"19
        Canary Dr, Goonellabah 2480 NSW \",\"CDA20/30 - 19 Canary Drive - Retaining
        wall\",\"008.2020.00000030.001\",\"8.2020.30.1\"],[\"-28.78986,153.3859379\",\"4
        Spurfield Rd, Mcleans Ridges 2480 NSW \",\"DA20/136- 4 Spurfield Road, Boat
        Harbour - Dwelling (CC No. 00068996)\",\"010.2020.00000136.002\",\"10.2020.136.2\"],[\"-28.8226635,153.3405133\",\"18
        Acacia Ave, Goonellabah 2480 NSW \",\"DA20/298 - 18 Acacia Avenue, Goonellabah
        - Dwelling\",\"005.2020.00000298.001\",\"5.2020.298.1\"],[\"-28.817502,153.2626239\",\"22
        Cook St, South Lismore 2480 NSW \",\"DA16/87 - 22 Cook Street - Two free standing
        industrial buildings\",\"010.2016.00000087.001\",\"10.2016.87.1\"]];\r\n\r\n
        \       $(item).each(function()\r\n        {\r\n            var arrProperty
        = $(this);\r\n            createMarkerAndInfoWindowHolderObjects(arrProperty[0],
        arrProperty[1], arrProperty[2], arrProperty[3], arrProperty[4]);\r\n        });\r\n
        \   }\r\n\r\n    /* Checks if a marker has already been created for newLocation
        */\r\n    function isNewLocation(newLocation)\r\n    {\r\n        var bNewLocation
        = true;\r\n\r\n        $(arrMarkerAndInfoWindowHolder).each(function () {\r\n\r\n
        \           if (newLocation.equals(this.location)) {\r\n                bNewLocation
        = false;\r\n                return false;   //This breaks the each loop\r\n
        \           }\r\n        });\r\n\r\n        return bNewLocation;\r\n    }\r\n\r\n
        \   /* Creates MarkerAndInfoWindowHolder objects and adds them to the array
        and modifies them */\r\n    function createMarkerAndInfoWindowHolderObjects(coord,
        address, content, key, appNo) {\r\n        var coordArray = new Array();\r\n
        \       coordArray[0] = parseFloat(coord.split(\",\")[0]); //.map not supported
        in IE 8\r\n        coordArray[1] = parseFloat(coord.split(\",\")[1]);\r\n\r\n
        \       if (!boundsEnabled || (parseInt(coordArray[0]) >= latMaxLimit && parseInt(coordArray[1])
        <= lngMaxLimit)) {\r\n            var newLocation = new google.maps.LatLng(coordArray[0],
        coordArray[1]);\r\n            var link = \"<a href='/Application/ApplicationDetails/\"
        + key + \"/'>\" + appNo + \" - \" + address + \"</a><br/>\" + content\r\n
        \           var bNewLocation = isNewLocation(newLocation);\r\n\r\n            if(bNewLocation)
        {\r\n                arrMarkerAndInfoWindowHolder.push(new MarkerAndInfoWindowHolder(content,
        newLocation, link));\r\n            }\r\n            else {\r\n                $(arrMarkerAndInfoWindowHolder).each(function
        (index, obj) {\r\n\r\n                    if (newLocation.equals(obj.location))
        {\r\n                        obj.infoWindowContent = obj.infoWindowContent
        + \"<br/>\" + link;\r\n\r\n                        return false;   //exit
        each loop\r\n                    }\r\n                });\r\n            }\r\n\r\n
        \           latlngbounds.extend(newLocation);\r\n        }\r\n    }\r\n\r\n
        \   /* Creates and sets the markers on the map */\r\n    function createAndPlotMarkers()
        {\r\n\r\n        $(arrMarkerAndInfoWindowHolder).each(function() {\r\n            var
        markerTitle = this.markerTitle;\r\n            var location = this.location;\r\n
        \           var infoWindowContent = this.infoWindowContent;\r\n\r\n            //Sets
        the marker on the display map\r\n            var marker = new google.maps.Marker({\r\n
        \               map: map,\r\n                position: location,\r\n                title:
        markerTitle\r\n            });\r\n\r\n            //Sets the marker on the
        printable map\r\n            new google.maps.Marker({\r\n                map:
        mapPrint,\r\n                position: location,\r\n                title:
        markerTitle\r\n            });\r\n\r\n            //Attach eventlistener to
        the marker\r\n            google.maps.event.addListener(marker, 'click', function
        () {\r\n                if (infowindow)\r\n                    infowindow.close();\r\n\r\n
        \               infowindow = new google.maps.InfoWindow({\r\n                    content:
        infoWindowContent,\r\n                    maxWidth: 400\r\n                });\r\n\r\n
        \               infowindow.open(map, marker);\r\n            });\r\n        });\r\n\r\n
        \   }\r\n\r\n    /* An object that holds information about the locations which
        have been created \r\n    using data from parsed geocode XML \r\n    markerTitle:
        title of the marker/pin on the map\r\n    location: google maps location object
        to pass to marker constructor\r\n    infoWindowContent: content that appears
        when the marker/pin is clicked\r\n    */\r\n    function MarkerAndInfoWindowHolder(markerTitle,
        location, infoWindowContent) {\r\n        this.markerTitle = markerTitle;\r\n
        \       this.location = location;\r\n        this.infoWindowContent = infoWindowContent;\r\n
        \   }\r\n\r\n    function loadGoogleMapsScript() {\r\n        var script =
        document.createElement(\"script\");\r\n        script.type = \"text/javascript\";\r\n
        \       script.src = \"//maps.googleapis.com/maps/api/js?key=AIzaSyA8yb0LzVXxMvh-3Uc6bo3T-BmlF6Ytvn4&callback=initializeGoogleMaps\";\r\n
        \       document.body.appendChild(script);\r\n    }\r\n\r\n    window.onload
        = loadGoogleMapsScript;\r\n\r\n</script>\r\n\r\n\r\n                </div>\r\n
        \               <!-- /.container-fluid -->\r\n            </div>\r\n        </div>\r\n\r\n
        \       <div class=\"pre-footer container_12 cf\">\r\n            <div class=\"grid_4\">\r\n
        \               <h3 class=\"accd-togg\">Contact Us <i class=\"fa fa-caret-down\"></i></h3>\r\n
        \               <div class=\"accd-container\">\r\n                    <p>Lismore
        City Council<br>ABN: 60 080 932 837</p>\r\n                    <p>43 Oliver
        Avenue<br>Goonellabah NSW 2480</p>\r\n                    <p>Post: PO Box
        23A, Lismore NSW 2480</p>\r\n                    <p>Phone: 1300 87 83 87<br>Fax:
        02 66 250 400</p>\r\n                    <p>Email: <a href=\"mailto:council@lismore.nsw.gov.au\"><strong>council@lismore.nsw.gov.au</strong></a></p>\r\n
        \               </div>\r\n            </div>\r\n        </div>\r\n        <div
        id=\"footer\">\r\n            <div class=\"container_12 cf\">\r\n                <div
        class=\"grid_12 cf ow\">\r\n                    <p class=\"cp\">Copyright
        &copy; 2021 Lismore City Council</p>\r\n                    <p>\r\n\r\n                        <a
        href=\"http://www.lismore.nsw.gov.au/page.asp?p=DOC-OCT-64-57-30\" target=\"_parent\">Internet
        Privacy Statement</a>\r\n                        &nbsp;&nbsp; | &nbsp;&nbsp;\r\n
        \                       <a href=\"http://www.lismore.nsw.gov.au/page.asp?p=DOC-OCT-64-57-30\"
        target=\"_parent\">Disclaimer</a>\r\n                        &nbsp;&nbsp;
        | &nbsp;&nbsp;\r\n                        <a href=\"http://www.lismore.nsw.gov.au/cp_themes/default/sitemap.asp\"
        target=\"_parent\">Site Map</a>\r\n                    </p>\r\n                </div>\r\n
        \           </div>\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>\r\n"
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: post
    uri: https://tracker.lismore.nsw.gov.au/Application/GetApplications
    body:
      encoding: UTF-8
      string: start=0&length=100&json=%7B%22DateFrom%22%3A%2214%2F04%2F2019%22%2C%22DateTo%22%3A%2214%2F05%2F2019%22%2C%22DateType%22%3A%221%22%2C%22RemoveUndeterminedApplications%22%3Afalse%2C%22ShowOutstandingApplications%22%3Afalse%2C%22ShowExhibitedApplications%22%3Afalse%2C%22IncludeDocuments%22%3Afalse%7D
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Referer:
      - https://tracker.lismore.nsw.gov.au/
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '298'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - application/json; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:42:27 GMT
      Content-Length:
      - '18938'
    body:
      encoding: UTF-8
      string: '{"draw":null,"recordsTotal":84,"recordsFiltered":84,"data":[["005.2019.00000142.001","5.2019.142.1","Development
        Application","01/05/2019","14/126 Molesworth St, Lismore 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/142
        - 14/126 Molesworth Street - Change of use to a beauty salon\u003c/b\u003e"],["005.2019.00000137.001","5.2019.137.1","Development
        Application","26/04/2019","97 Pineapple Rd, Goonellabah 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/137
        - 97 Pineapple Rd - Subdivision to create one additional lot\u003c/b\u003e"],["005.2019.00000120.001","5.2019.120.1","Development
        Application","15/04/2019","74 James St, Dunoon 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/120
        - 74 James Street - Dwelling alterations, additions and pool\u003c/b\u003e"],["005.2006.00000672.002","5.2006.672.2","S96","29/04/2019","135
        Three Chain Rd, South Lismore 2480 NSW \u003cbr/\u003e135A Three Chain Rd,
        South Lismore 2480 NSW \u003cbr/\u003e135B Three Chain Rd, South Lismore 2480
        NSW \u003cbr/\u003e171 Caniaba St, South Lismore 2480 NSW \u003cbr/\u003e197
        Caniaba St, South Lismore 2480 NSW \u003cbr/\u003e216 Casino St, South Lismore
        2480 NSW \u003cbr/\u003e97 Caniaba St, South Lismore 2480 NSW \u003cbr/\u003e\u003cb\u003eSection
        4.55(2) to modify approved extractive industry\u003c/b\u003e"],["010.2019.00000145.001","10.2019.145.1","Construction
        Certificate","06/05/2019","25 Lomandra Ave, Caniaba 2480 NSW \u003cbr/\u003e\u003cb\u003eShed\u003c/b\u003e"],["005.2019.00000145.001","5.2019.145.1","Development
        Application","06/05/2019","25 Lomandra Ave, Caniaba 2480 NSW \u003cbr/\u003e\u003cb\u003eShed\u003c/b\u003e"],["005.2019.00000139.001","5.2019.139.1","Development
        Application","29/04/2019","33 City View Dr, East Lismore 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/139
        - 33 City Drive - Covered timber deck\u003c/b\u003e"],["010.2019.00000139.001","10.2019.139.1","Construction
        Certificate","29/04/2019","33 City View Dr, East Lismore 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/139
        - 33 City Drive - Covered timber deck\u003c/b\u003e"],["005.2019.00000133.001","5.2019.133.1","Development
        Application","24/04/2019","18 Grace Rd, Bexhill 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/133
        - 18 Grace Road - Secondary dwelling and retaining walls\u003c/b\u003e"],["005.2019.00000152.001","5.2019.152.1","Development
        Application","10/05/2019","101 James St, Dunoon 2480 NSW \u003cbr/\u003e103
        James St, Dunoon 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/152 - 101 \u0026
        103 James Street - Strata Subdivision, create 2 lots\u003c/b\u003e"],["005.2019.00000128.001","5.2019.128.1","Development
        Application","18/04/2019","52 Bridge St, Wyrallah 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/128
        - 52 Bridge Street - Dwelling\u003c/b\u003e"],["010.2019.00000128.001","10.2019.128.1","Construction
        Certificate","18/04/2019","52 Bridge St, Wyrallah 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/128
        - 52 Bridge Street - Dwelling\u003c/b\u003e"],["005.2018.00000338.002","5.2018.338.2","S96","07/05/2019","46
        Tulsi Lane, Nimbin 2480 NSW \u003cbr/\u003e\u003cb\u003eS4.55 Modification
        to internal layout, windows, deck and tanks\u003c/b\u003e"],["005.2019.00000124.001","5.2019.124.1","Development
        Application","16/04/2019","1 Lychee Dr, Rosebank 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/124
        - 1 Lychee Drive - Dwelling\u003c/b\u003e"],["005.1988.00000330.003","5.1988.330.3","S96","09/05/2019","110
        Chelmsford Rd, Rock Valley 2480 NSW \u003cbr/\u003e\u003cb\u003eSection 4.55(1A)
        modification to amend the wording on the consent\u003c/b\u003e"],["005.2019.00000157.001","5.2019.157.1","Development
        Application","13/05/2019","134 Crofton Rd, Nimbin 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/157
        - 134 Crofton Road, Nimbin - Detached dual occ and expanded\u003c/b\u003e"],["005.2019.00000147.001","5.2019.147.1","Development
        Application","07/05/2019","284 Cameron Rd, Mcleans Ridges 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/147
        - 284 Cameron Road - Inground Swimming Pool\u003c/b\u003e"],["005.2019.00000132.001","5.2019.132.1","Development
        Application","24/04/2019","392 Richmond Hill Rd, Richmond Hill 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/132
        - 392 Richmond Hill Road - Shed\u003c/b\u003e"],["010.2019.00000132.001","10.2019.132.1","Construction
        Certificate","24/04/2019","392 Richmond Hill Rd, Richmond Hill 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/132
        - 392 Richmond Hill Road - Shed\u003c/b\u003e"],["008.2019.00000006.001","8.2019.6.1","Complying
        Development","30/04/2019","11 D\u0027arcy Dr, Goonellabah 2480 NSW \u003cbr/\u003e\u003cb\u003eCDAD19/6
        - 11 Darcy Drive - Patio enclosure\u003c/b\u003e"],["005.2019.00000121.001","5.2019.121.1","Development
        Application","15/04/2019","52 O\u0027flynn St, Lismore Heights 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/121
        - 52 O\u0027Flynn Street - Secondary Dwelling\u003c/b\u003e"],["010.2014.00000349.002","10.2014.349.2","Construction
        Certificate","07/05/2019","66 Newbridge St, South Lismore 2480 NSW \u003cbr/\u003e\u003cb\u003eSec4.55(1A)
        modification to approved consent\u003c/b\u003e"],["005.2019.00000138.001","5.2019.138.1","Development
        Application","26/04/2019","3 Ewandale Cl, Clunes 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/138
        - 3 Ewandale Close - Inground swimming pool\u003c/b\u003e"],["013.2019.00000160.001","13.2019.160.1","Subdivision
        Certificate","14/05/2019","155 Cross Rd, Numulgi 2480 NSW \u003cbr/\u003e798
        Dunoon Rd, Modanville 2480 NSW \u003cbr/\u003e816 Dunoon Rd, Modanville 2480
        NSW \u003cbr/\u003e838 Dunoon Rd, Modanville 2480 NSW \u003cbr/\u003e886 Dunoon
        Rd, Modanville 2480 NSW \u003cbr/\u003e\u003cb\u003eSubdivision Cert NO DA\u003c/b\u003e"],["005.2019.00000160.001","5.2019.160.1","Development
        Application","14/05/2019","155 Cross Rd, Numulgi 2480 NSW \u003cbr/\u003e798
        Dunoon Rd, Modanville 2480 NSW \u003cbr/\u003e816 Dunoon Rd, Modanville 2480
        NSW \u003cbr/\u003e838 Dunoon Rd, Modanville 2480 NSW \u003cbr/\u003e886 Dunoon
        Rd, Modanville 2480 NSW \u003cbr/\u003e\u003cb\u003eSubdivision Cert NO DA\u003c/b\u003e"],["010.2019.00000147.001","10.2019.147.1","Construction
        Certificate","07/05/2019","284 Cameron Rd, Mcleans Ridges 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/147
        - 284 Cameron Road - Inground Swimming Pool\u003c/b\u003e"],["005.2019.00000125.001","5.2019.125.1","Development
        Application","17/04/2019","20 Henson Rd, Wyrallah 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/125
        - 20 Henson Road - Community Title Subdivision\u003c/b\u003e"],["010.2019.00000127.001","10.2019.127.1","Construction
        Certificate","18/04/2019","18 Satinwood Dr, Mcleans Ridges 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/127
        - 18 Satinwood Drive - Dwelling additons and alterations\u003c/b\u003e"],["005.2019.00000127.001","5.2019.127.1","Development
        Application","18/04/2019","18 Satinwood Dr, Mcleans Ridges 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/127
        - 18 Satinwood Drive - Dwelling additons and alterations\u003c/b\u003e"],["005.2019.00000143.001","5.2019.143.1","Development
        Application","01/05/2019","28 Elton St, Girards Hill 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/143
        - 28 Elton Street - Carport and fence with BLV\u003c/b\u003e"],["005.2019.00000126.001","5.2019.126.1","Development
        Application","17/04/2019","18 Wade St, East Lismore 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/126
        - 18 Wade Street - Additions and alterations\u003c/b\u003e"],["013.2014.00000327.001","13.2014.327.1","Subdivision
        Certificate","08/05/2019","79 Esmonde St, Girards Hill 2480 NSW \u003cbr/\u003e\u003cb\u003eDA14/327
        - 79 Esmonde Street - Subdivision (to create 2 lots) SEE MEMO\u003c/b\u003e"],["013.2018.00000396.001","13.2018.396.1","Subdivision
        Certificate","07/05/2019","39 Phillip St, Goonellabah 2480 NSW \u003cbr/\u003e\u003cb\u003eDA18/396
        - 39 Phillip Street - Subdivision\u003c/b\u003e"],["005.2019.00000155.001","5.2019.155.1","Development
        Application","10/05/2019","657 Corndale Rd, Corndale 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/155
        - 657 Corndale Road - Detached dual occupancy\u003c/b\u003e"],["005.2019.00000146.001","5.2019.146.1","Development
        Application","06/05/2019","285 Rous Rd, Chilcotts Grass 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/146
        - 285 Rous Rd - Detached Dual Occupancy and removal of 4 tree\u003c/b\u003e"],["010.2019.00000135.001","10.2019.135.1","Construction
        Certificate","26/04/2019","5 Vintage Dr, Chilcotts Grass 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/135
        - 5 Vintage Drive - Extension to existing garage\u003c/b\u003e"],["005.2019.00000159.001","5.2019.159.1","Development
        Application","14/05/2019","18 Highview Cres, Modanville 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/159
        - 18 Highview Crescent - Secondary dwelling\u003c/b\u003e"],["010.2019.00000119.001","10.2019.119.1","Construction
        Certificate","15/04/2019","31 Ewing St, Lismore 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/119
        - 31 Ewing Street - Alterations and additions\u003c/b\u003e"],["005.2019.00000136.001","5.2019.136.1","Development
        Application","26/04/2019","37 Lomandra Ave, Caniaba 2480 NSW \u003cbr/\u003e\u003cb\u003e37
        Lomandra Avenue Caniaba - Dwelling\u003c/b\u003e"],["010.2019.00000141.001","10.2019.141.1","Construction
        Certificate","01/05/2019","1/7 Pineview Dr, Goonellabah 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/141
        - 1/7 Pineview Drive - Carport with a BLV to 4m\u003c/b\u003e"],["005.2019.00000141.001","5.2019.141.1","Development
        Application","01/05/2019","1/7 Pineview Dr, Goonellabah 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/141
        - 1/7 Pineview Drive - Carport with a BLV to 4m\u003c/b\u003e"],["005.2019.00000144.001","5.2019.144.1","Development
        Application","03/05/2019","50 Dunromin Dr, Modanville 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/144
        - 50 Dunromin Drive - Shed\u003c/b\u003e"],["005.2019.00000122.001","5.2019.122.1","Development
        Application","16/04/2019","31 City View Dr, East Lismore 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/122
        - 31 City View Drive - Carport with BLV\u003c/b\u003e"],["010.2019.00000156.001","10.2019.156.1","Construction
        Certificate","10/05/2019","5 Napier St, Goonellabah 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/156
        - 5 Napier Street - Carport (detached)\u003c/b\u003e"],["005.2019.00000156.001","5.2019.156.1","Development
        Application","10/05/2019","5 Napier St, Goonellabah 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/156
        - 5 Napier Street - Carport (detached)\u003c/b\u003e"],["010.2019.00000150.001","10.2019.150.1","Construction
        Certificate","08/05/2019","894 Nimbin Rd, Goolmangar 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/150
        - Carport and Dwelling additions\u003c/b\u003e"],["005.2019.00000150.001","5.2019.150.1","Development
        Application","08/05/2019","894 Nimbin Rd, Goolmangar 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/150
        - Carport and Dwelling additions\u003c/b\u003e"],["005.2019.00000151.001","5.2019.151.1","Development
        Application","10/05/2019","106 Union St, South Lismore 2480 NSW \u003cbr/\u003e34
        Union St, South Lismore 2480 NSW \u003cbr/\u003e36 Union St, South Lismore
        2480 NSW \u003cbr/\u003e38A Union St, South Lismore 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/151
        -Storage Premises\u003c/b\u003e"],["005.2019.00000161.001","5.2019.161.1","Development
        Application","14/05/2019","16 Julieanne Pl, Bexhill 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/161-
        Dwelling and Garage with Attached Carport\u003c/b\u003e"],["010.2019.00000161.001","10.2019.161.1","Construction
        Certificate","14/05/2019","16 Julieanne Pl, Bexhill 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/151-
        Dwelling and Garage with Attached Carport\u003c/b\u003e"],["005.2019.00000154.001","5.2019.154.1","Development
        Application","10/05/2019","1281 Jiggi Rd, Jiggi 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/154
        - 1281 Jiggi Road - Inground swimming pool\u003c/b\u003e"],["005.2018.00000301.002","5.2018.301.2","S96","08/05/2019","1
        Little Dawson St, Lismore 2480 NSW \u003cbr/\u003e63 Conway St, Lismore 2480
        NSW \u003cbr/\u003e67 Conway St, Lismore 2480 NSW \u003cbr/\u003e\u003cb\u003eS4.55(1A)
        application to modify consent\u003c/b\u003e"],["010.2019.00000153.001","10.2019.153.1","Construction
        Certificate","10/05/2019","23 Emily St, Wyrallah 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/153-
        23 Emily St, Wyrallah - Garage\u003c/b\u003e"],["005.2019.00000153.001","5.2019.153.1","Development
        Application","10/05/2019","23 Emily St, Wyrallah 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/153-
        23 Emily St Wyrallah - Garage\u003c/b\u003e"],["005.2019.00000158.001","5.2019.158.1","Development
        Application","13/05/2019","37 Just St, Goonellabah 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/158
        - 37 Just Street - Dwelling\u003c/b\u003e"],["010.2019.00000143.001","10.2019.143.1","Construction
        Certificate","01/05/2019","28 Elton St, Girards Hill 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/143
        - 28 Elton Street - Carport\u003c/b\u003e"],["010.2019.00000123.001","10.2019.123.1","Construction
        Certificate","16/04/2019","20 Renwick St, Lismore Heights 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/123
        - 20 Renwick St - Dwelling alterations, additions and pool\u003c/b\u003e"],["005.2019.00000123.001","5.2019.123.1","Development
        Application","16/04/2019","20 Renwick St, Lismore Heights 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/123
        - 20 Renwick St - Dwelling alterations, additions and pool\u003c/b\u003e"],["005.2019.00000140.001","5.2019.140.1","Development
        Application","01/05/2019","57 Waratah Way, Goonellabah 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/140
        - 57 Waratah Way - Dwelling (two storey)\u003c/b\u003e"],["010.2019.00000148.001","10.2019.148.1","Construction
        Certificate","07/05/2019","137 Leeson Rd, Whian Whian 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/148
        - 137 Leeson Road - Farm shed\u003c/b\u003e"],["005.2019.00000148.001","5.2019.148.1","Development
        Application","07/05/2019","137 Leeson Rd, Whian Whian 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/148
        - 137 Leeson Road - Farm shed\u003c/b\u003e"],["005.2019.00000162.001","5.2019.162.1","Development
        Application","14/05/2019","36 Zadoc St, Lismore 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/162
        - 39 Zadoc Street - Garage and carport\u003c/b\u003e"],["005.2019.00000119.001","5.2019.119.1","Development
        Application","15/04/2019","31 Ewing St, Lismore 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/119
        - 31 Ewing Street - Alterations and additions\u003c/b\u003e"],["005.2018.00000147.002","5.2018.147.2","S96","03/05/2019","24
        John O\u0027neill Cct, Goonellabah 2480 NSW \u003cbr/\u003e\u003cb\u003eS4.55(1A)
        modification to condition 11 regarding location of fence\u003c/b\u003e"],["005.2019.00000130.001","5.2019.130.1","Development
        Application","23/04/2019","24 Earls Ct, Goonellabah 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/130
        - 24 Earls Court - Dwelling and retaining walls\u003c/b\u003e"],["010.2019.00000129.001","10.2019.129.1","Construction
        Certificate","23/04/2019","127 Terania St, North Lismore 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/129
        - 127 Terania St - Front fence (1.8m spear top panel fence)\u003c/b\u003e"],["005.2019.00000129.001","5.2019.129.1","Development
        Application","23/04/2019","127 Terania St, North Lismore 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/129
        - 127 Terania St - Front fence (1.8m spear top panel fence)\u003c/b\u003e"],["010.2019.00000131.001","10.2019.131.1","Construction
        Certificate","24/04/2019","41 Deloraine Rd, Lismore Heights 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/131
        - 41 Deloraine Road - Extension to retaining wall and blv\u003c/b\u003e"],["005.2019.00000131.001","5.2019.131.1","Development
        Application","23/04/2019","41 Deloraine Rd, Lismore Heights 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/131
        - 41 Deloraine Road - Extension to retaining wall and blv\u003c/b\u003e"],["010.2019.00000144.001","10.2019.144.1","Construction
        Certificate","03/05/2019","50 Dunromin Dr, Modanville 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/144
        - 50 Dunromin Drive - Shed\u003c/b\u003e"],["005.2019.00000135.001","5.2019.135.1","Development
        Application","26/04/2019","5 Vintage Dr, Chilcotts Grass 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/135
        - 5 Vintage Drive - Dwelling addition (garage extension)\u003c/b\u003e"],["010.2019.00000085.001","10.2019.85.1","Construction
        Certificate","13/05/2019","47 Palmers Rd, Mcleans Ridges 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/85
        - 47 Palmers Road - Alterations and additions \u0026 BLV\u003c/b\u003e"],["010.2019.00000154.001","10.2019.154.1","Construction
        Certificate","10/05/2019","1281 Jiggi Rd, Jiggi 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/154
        - 1281 Jiggi Road - Inground swimming pool\u003c/b\u003e"],["010.2019.00000122.001","10.2019.122.1","Construction
        Certificate","16/04/2019","31 City View Dr, East Lismore 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/122
        - 31 City View Drive - Carport with BLV\u003c/b\u003e"],["005.2019.00000149.001","5.2019.149.1","Development
        Application","08/05/2019","76 Cullen St, Nimbin 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/149
        - 76 Cullen Street - Change of use\u003c/b\u003e"],["010.2019.00000126.001","10.2019.126.1","Construction
        Certificate","17/04/2019","18 Wade St, East Lismore 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/126
        - 18 Wade Street - Additions and alterations\u003c/b\u003e"],["010.2019.00000157.001","10.2019.157.1","Construction
        Certificate","13/05/2019","134 Crofton Rd, Nimbin 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/157
        - 134 Crofton Road, Nimbin - Detached dual occ and expanded\u003c/b\u003e"],["013.2005.00000894.001","13.2005.894.1","Subdivision
        Certificate","07/05/2019","52 Gundurimba Rd, Monaltrie 2480 NSW \u003cbr/\u003e72
        Gundurimba Rd, Monaltrie 2480 NSW \u003cbr/\u003e\u003cb\u003eDA05/894 - 52
        and 72 Gundurimba Road - Subdivision Certificate\u003c/b\u003e"],["010.2019.00000136.001","10.2019.136.1","Construction
        Certificate","08/05/2019","37 Lomandra Ave, Caniaba 2480 NSW \u003cbr/\u003e\u003cb\u003e37
        Lomandra Avenue Caniaba - Dwelling(CC No.190192/01)\u003c/b\u003e"],["010.2018.00000124.001","10.2018.124.1","Construction
        Certificate","08/05/2019","24 Alternative Way, Nimbin 2480 NSW \u003cbr/\u003e\u003cb\u003eDA18/124
        - 24 Alternative Way - Detached dual occ(CC No.2019/173.1)\u003c/b\u003e"],["005.2019.00000134.001","5.2019.134.1","Development
        Application","24/04/2019","11 Wyrallah Rd, Girards Hill 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/134
        - 11 Wyrallah Road - Removal of a tree in a Heritage area\u003c/b\u003e"],["010.2019.00000013.001","10.2019.13.1","Construction
        Certificate","26/04/2019","17 Byrne Rd, Rosebank 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/13
        - 17 Byrne Road - Dwelling and shed(CC No. 190104/01)\u003c/b\u003e"],["010.2018.00000157.001","10.2018.157.1","Construction
        Certificate","17/04/2019","27 Pineapple Rd, Goonellabah 2480 NSW \u003cbr/\u003e\u003cb\u003eDA18/157
        - 27 Pineapple Rd - Flexible learning centre(cc nO.12619/01)\u003c/b\u003e"],["010.2019.00000101.001","10.2019.101.1","Construction
        Certificate","17/04/2019","4 Schurr Dr, Goonellabah 2480 NSW \u003cbr/\u003e\u003cb\u003eDA19/101
        - 4 Schurr Drive - Dwelling retaining walls(CC No. 190115/01)\u003c/b\u003e"]]}'
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000142.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:42:38 GMT
      Content-Length:
      - '29634'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iTGlzbW9yZSBDaXR5IENvdW5jaWwsREEgVHJhY2tlcixBcHBsaWNhdGlvbiBUcmFja2VyLERldmVsb3BtZW50IEFwcGxpY2F0aW9uLERldmVsb3BtZW50IEFwcGxpY2F0aW9uIFRyYWNraW5nLCBEQSBFbnF1aXJ5LCBEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBFbnF1aXJ5LCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iVGhlIG9mZmljaWFsIExpc21vcmUgQ2l0eSBDb3VuY2lsIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KDQogICAgPHRpdGxlPkxpc21vcmUgQ2l0eSBDb3VuY2lsIC0gQXBwbGljYXRpb24gVHJhY2tlcjwvdGl0bGU+DQoNCiAgICA8IS0tZmF2aWNvbi0tPg0KICAgIDxsaW5rIGhyZWY9Ii9mYXZpY29uLmljbyIgcmVsPSJzaG9ydGN1dCBpY29uIiB0eXBlPSJpbWFnZS94LWljb24iPg0KDQogICAgPCEtLSBqUXVlcnkgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0xLjExLjEuanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjExLjIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvY29yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvYWNjb3JkaW9uLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS90aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC10aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBEYXRhVGFibGVzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2pxdWVyeS5kYXRhVGFibGVzLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMuYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuc2NzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gQm9vdHN0cmFwIFNCLUFkbWluLTIgUGx1Z2luIGFuZCBvdGhlciBjc3MgYW5kIGpzIGZpbGVzLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtY29tYm9ib3guanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtZGF0ZXBpY2tlci5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2pxdWVyeS5mb3JtLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LnRhYmxlc29ydGVyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWFzdGVydmlldy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21ldGlzTWVudS5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3NiLWFkbWluLTIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL2Nzcy9ib290c3RyYXAtY29tYm9ib3guY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvZGF0ZXBpY2tlcjMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVydmlldy1jdXN0b21pc2F0aW9ucy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9zYi1hZG1pbi0yLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDxsaW5rIGhyZWY9Ii9Db3VuY2lsX1RoZW1lL0xpc21vcmUvbGlzbW9yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgDQoNCiAgICA8IS0tIEhUTUw1IFNoaW0gYW5kIFJlc3BvbmQuanMgSUU4IHN1cHBvcnQgb2YgSFRNTDUgZWxlbWVudHMgYW5kIG1lZGlhIHF1ZXJpZXMgLS0+DQogICAgPCEtLSBXQVJOSU5HOiBSZXNwb25kLmpzIGRvZXNuJ3Qgd29yayBpZiB5b3UgdmlldyB0aGUgcGFnZSB2aWEgZmlsZTovLyAtLT4NCiAgICA8IS0tW2lmIGx0IElFIDldPg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL2h0bWw1c2hpdi8zLjcuMC9odG1sNXNoaXYuanMiPjwvc2NyaXB0Pg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL3Jlc3BvbmQuanMvMS40LjIvcmVzcG9uZC5taW4uanMiPjwvc2NyaXB0Pg0KICAgIDwhW2VuZGlmXS0tPg0KDQogICAgPGxpbmsgaHJlZj0naHR0cDovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9UmFsZXdheTozMDAsNDAwLDYwMCw3MDAnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPg0KICAgIDxsaW5rIGhyZWY9J2h0dHA6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PU9zd2FsZDozMDAsNDAwLDcwMCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQo8L2hlYWQ+DQoNCg0KPGJvZHkgY2xhc3M9ImNicC1zcG1lbnUtcHVzaCI+DQogICAgPGRpdiBjbGFzcz0id3IiPg0KICAgICAgICA8ZGl2IGlkPSJoZWFkZXIiPg0KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl8xMiI+DQoNCiAgICAgICAgPGgxIGlkPSJsb2dvIj48YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9kZWZhdWx0LmFzcCI+PGltZyBzcmM9Ii8vY2FuZGlkYXRlLW9mZmljZS5zMy5hbWF6b25hd3MuY29tL3NoYXJlZC9saXNtb3JlL2ltYWdlcy9sb2dvLnBuZyIgYWx0PSJMaXNtb3JlIENpdHkgQ291bmNpbCIgc3R5bGU9InBhZGRpbmctdG9wOjVweCI+PHN0cm9uZyBjbGFzcz0idmgiPkxpc21vcmUgQ2l0eSBDb3VuY2lsPC9zdHJvbmc+PC9hPjwvaDE+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0idXRpbGl0eSByaWdodCI+DQogICAgICAgICAgICA8YSBjbGFzcz0iaG9tZS1saW5rIiBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9kZWZhdWx0LmFzcCI+DQogICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vY2FuZGlkYXRlLW9mZmljZS5zMy5hbWF6b25hd3MuY29tL3NoYXJlZC9saXNtb3JlL2ltYWdlcy9ob21lLnBuZyIgYWx0PSJMaXNtb3JlIENpdHkgQ291bmNpbCI+DQogICAgICAgICAgICA8L2E+DQogICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyIj4NCiAgICAgICAgPC9kaXY+DQoNCiAgICA8L2Rpdj4NCjwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJiYW5uZXIiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmFubmVyLXRleHQgY2YiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJhbm5lci10ZXh0LWNvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzcz0ib3ciPkRBIFRyYWNraW5nIDxzcGFuPlBvcnRhbDwvc3Bhbj48L2gxPg0KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibm0iPkluZm9ybWF0aW9uIG9uIGRldmVsb3BtZW50IGFwcGxpY2F0aW9ucyBpbiB0aGUgTGlzbW9yZSBMb2NhbCBHb3Zlcm5tZW50IEFyZWEuIDwvcD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyXzEyIGludHJvIGNmIj4gICAgICAgICAgICA8IS0tIE5hdmlnYXRpb24gLS0+DQogICAgICAgICAgICA8bmF2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWRlZmF1bHQgbmF2YmFyLXN0YXRpYy10b3AiIHJvbGU9Im5hdmlnYXRpb24iIHN0eWxlPSJtYXJnaW4tYm90dG9tOiAwIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJuYXZiYXItdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIubmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5Ub2dnbGUgbmF2aWdhdGlvbjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXZiYXItYnJhbmQiIGhyZWY9IiMiPjwvYT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLWhlYWRlciAtLT4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItdG9wLWxpbmtzIG5hdmJhci1yaWdodCBoaWRkZW4teHMgaGlkZGVuLXNtIGhpZGRlbi1tZCI+DQogICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGlkPSJwcmludEljb24iIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXByaW50IiBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1kZWZhdWx0IHNpZGViYXIiIHJvbGU9Im5hdmlnYXRpb24iPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaWRlYmFyLW5hdiBuYXZiYXItY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJzaWRlLW1lbnUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb24gVHJhY2tlcjxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0Fib3V0IHRhcmdldD1fc2VsZj5XaGF0IGlzIEFwcGxpY2F0aW9uIFRyYWNrZXI/PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0Rpc2NsYWltZXIgdGFyZ2V0PV9zZWxmPkRpc2NsYWltZXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvSW5kZXggdGFyZ2V0PT5BcHBsaWNhdGlvbiBUcmFja2VyIEhvbWU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvU2VhcmNoIGlkPXNlYXJjaCB0YXJnZXQ9X3NlbGY+U2VhcmNoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9SZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPVRydWUmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIGlkPW91dHN0YW5kaW5nLWFwcHMgdGFyZ2V0PV9zZWxmPlVuZGV0ZXJtaW5lZCBBcHBsaWNhdGlvbnM8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P1JlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1UcnVlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgaWQ9ZXhoaWJpdGVkLWFwcHMgdGFyZ2V0PV9zZWxmPkFwcGxpY2F0aW9ucyBPbiBFeGhpYml0aW9uPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9ucyBTdWJtaXR0ZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTUlMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+VGhpcyBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT03JTJmMDMlMmYyMDIxJkRhdGVUbz0xMyUyZjAzJTJmMjAyMSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjAzJTJmMjAyMSZEYXRlVG89MTUlMmYwMyUyZjIwMjEmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDIlMmYyMDIxJkRhdGVUbz0yOCUyZjAyJTJmMjAyMSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIERldGVybWluZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTUlMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTclMmYwMyUyZjIwMjEmRGF0ZVRvPTEzJTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5MYXN0IFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDIlMmYyMDIxJkRhdGVUbz0yOCUyZjAyJTJmMjAyMSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uc2lkZWJhci1jb2xsYXBzZSAtLT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gKDUuMjAxOS4xNDIuMSk8L2gyPg0KICAgIDwvZGl2Pg0KICAgIDxoND5EZXRhaWxlZCBpbmZvcm1hdGlvbiByZWxhdGVkIHRvIHRoZSBhcHBsaWNhdGlvbjo8L2g0Pg0KICAgIDxiciAvPg0KICAgIDxkaXY+DQogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6c2hvd0FsbCgpOyI+U2hvdyBBbGw8L2E+IC8NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpoaWRlQWxsKCk7Ij5IaWRlIEFsbDwvYT4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGlkPSJhcHBsaWNhdGlvbiI+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZGV0YWlscyI+PGEgaHJlZj0iIyI+RGV0YWlsczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGVzY3JpcHRpb246IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRBMTkvMTQyIC0gMTQvMTI2IE1vbGVzd29ydGggU3RyZWV0IC0gQ2hhbmdlIG9mIHVzZSB0byBhIGJlYXV0eSBzYWxvbjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5TdWJtaXR0ZWQgRGF0ZTogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowMS8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BcHBsaWNhdGlvbiBUeXBlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXZlbG9wbWVudCBBcHBsaWNhdGlvbjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJwcm9wZXJ0aWVzIj48YSBocmVmPSIjIj5Qcm9wZXJ0aWVzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4xNC8xMjYgTW9sZXN3b3J0aCBTdCwgTGlzbW9yZSAyNDgwIE5TVyAgKExPVDogMTQgU1A6IDY1MTUpPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InBlb3BsZSI+PGEgaHJlZj0iIyI+UGVvcGxlPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwbGljYW50OiBKZXNzaWNhIEVhZGUNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcmluY2lwYWwgQ2VydGlmeWluZyBBdXRob3JpdHk6ICANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9Im9mZmljZXIiPjxhIGhyZWY9IiMiPk9mZmljZXI8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlZpY2tpLUx5biBXYWxrZXI8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZGVjaXNpb24iPjxhIGhyZWY9IiMiPkRlY2lzaW9uPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BcHBsaWNhdGlvbiBTdGF0dXM6IERldGVybWluZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERldGVybWluYXRpb24gRGF0ZToNCjIwLzA2LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldGVybWluYXRpb24gVHlwZTogQ29uZGl0aW9uYWwgQ29uc2VudCAtIENvdW5jaWwgU3RhZmY8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZXN0aW1hdGVkQ29zdCI+PGEgaHJlZj0iIyI+RXN0aW1hdGVkIENvc3Q8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiQxLDUwMC4wMDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJ0cmFja2luZyI+PGEgaHJlZj0iIyI+VHJhY2tpbmc8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21tZW5jZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RHVlIERhdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Q29tcGxldGVkIERhdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gUmVjZWl2ZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDEvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowMS8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowNi8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlNpdGUgVmlzaXQvSW5pdGlhbCBSZXZpZXc8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDYvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNy8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQozMC8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlJlZmVycmVkIFB1YmxpYyBIZWFsdGggT2ZmaWNlcjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowNi8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIwLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjEwLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Q29uc2VudCBOb3RpY2UgSXNzdWVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIwLzA2LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjAvMDYvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjEvMDYvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGgzIGlkPSJyZWxhdGVkQXBwbGljYXRpb25zIj48YSBocmVmPSIjIj5SZWxhdGVkIEFwcGxpY2F0aW9uczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGI+Tm8gZGF0YS48L2I+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQoNCg0KDQoNCg0KPGgzIGlkPSJkb2N1bWVudHMiPjxhIGhyZWY9IiMiPkRvY3VtZW50czwvYT48L2gzPg0KPGRpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLXdyYXAiPg0KICAgICAgICAgICAgPHNwYW4+c3dpcGUgdGFibGUgdG8gdGhlIGxlZnQgdG8gcmV2ZWFsIG1vcmUgZGF0YTwvc3Bhbj4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWFycm93LXJpZ2h0IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9zcGFuPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBpZD0iZG9jLWNvdW50Ij5Ub3RhbCBudW1iZXIgb2YgZG9jdW1lbnRzOiAxPC9kaXY+DQogICAgPHRhYmxlIGlkPSJkb2MtdGFibGUiIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG5vLWZvb3RlciI+DQogICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICA8dGg+UmVjb3JkIE51bWJlcjwvdGg+DQogICAgICAgICAgICAgICAgPHRoPkRlc2NyaXB0aW9uPC90aD4NCiAgICAgICAgICAgICAgICA8dGg+RG9jdW1lbnQgVHlwZTwvdGg+DQogICAgICAgICAgICAgICAgPHRoPlNpemU8L3RoPg0KICAgICAgICAgICAgICAgIDx0aD5WaWV3IExpbms8L3RoPg0KICAgICAgICAgICAgPC90cj4NCiAgICAgICAgPC90aGVhZD4NCiAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QUQxOS8xMTk4MTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gQ29uc2VudCBOb3RpY2UgLSAxNC8xMjYgTW9sZXN3b3J0aCBTdHJlZXQgTElTTU9SRSAyNDgwPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5QREY8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgMC4yMyBNQg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly90cmFja2VyLmxpc21vcmUubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9dEx4MjZDMFdDTW89IiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICA8L3Rib2R5Pg0KICAgIDwvdGFibGU+DQo8L2Rpdj4NCg0KDQogICAgICAgICAgICA8aDMgaWQ9ImNvbnRhY3RVcyI+PGEgaHJlZj0iIyI+Q29udGFjdCBVczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PHA+DQpTaG91bGQgeW91IHdpc2ggdG8gY29udGFjdCBjb3VuY2lsIHRvIG1ha2UgZW5xdWlyaWVzIHJlZ2FyZGluZyBhcHBsaWNhdGlvbnMgZGlzcGxheWVkIG9uIHRoZSB3ZWJzaXRlLCBwbGVhc2UgY29udGFjdCBlaXRoZXIgYnkgZW1haWwgPGEgc3R5bGU9ImNvbG9yOiBibHVlIiBocmVmPSJtYWlsdG86Y291bmNpbEBsaXNtb3JlLm5zdy5nb3YuYXU/c3ViamVjdD1TdWJtaXNzaW9uIGZvciBhcHBsaWNhdGlvbiAgKDUuMjAxOS4xNDIuMSkiPmNvdW5jaWxAbGlzbW9yZS5uc3cuZ292LmF1PC9hPiwgcGhvbmUgMTMwMCA4NyA4MyA4NyBkdXJpbmcgbm9ybWFsIG9mZmljZSBob3VycyBvciBpbiB3cml0aW5nIHRvIFBPIEJveCAyM0EsIExpc21vcmUgTlNXIDI0ODAuIEFsbCBjb3JyZXNwb25kZW5jZSBzaG91bGQgYmUgYWRkcmVzc2VkIHRvIHRoZSBHZW5lcmFsIE1hbmFnZXIgYW5kIHF1b3RlIHRoZSByZWxldmFudCBhcHBsaWNhdGlvbiByZWZlcmVuY2UgbnVtYmVyLg0KPC9wPg0KPHA+DQpJZiB0aGUgYXBwbGljYXRpb24gZGlzcGxheWVkIG9uIHRoaXMgd2Vic2l0ZSBpcyB1bmRlciBjdXJyZW50IG5laWdoYm91ciBub3RpZmljYXRpb24sIHByb3BlcnRpZXMgY29uc2lkZXJlZCBieSBDb3VuY2lsIHRvIHBvc3NpYmx5IGJlIGRldHJpbWVudGFsbHkgYWZmZWN0ZWQgd2lsbCBiZSBjb250YWN0ZWQgaW5kaXZpZHVhbGx5IGFuZCBhZHZpc2VkIG9mIHRoZWlyIHN1Ym1pc3Npb24gb3Bwb3J0dW5pdGllcyB1bmRlciBDaGFwdGVyIDEwIExpc21vcmUgRGV2ZWxvcG1lbnQgQ29udHJvbCBQbGFuIDIwMTIuDQo8L3A+DQo8cD4NCjxhIGhyZWY9Imh0dHA6Ly93d3cubGlzbW9yZS5uc3cuZ292LmF1L2NwX3RoZW1lcy9kZWZhdWx0L3BhZ2UuYXNwP3A9RE9DLUxIUi04My03Ni01OCIgIHRhcmdldD0iX2JsYW5rIj5DTElDSyBIRVJFPC9hPiB0byB2aXNpdCBDb3VuY2ls4oCZcyB3ZWJzaXRlIGFuZCBzZWUgZnVydGhlciBkZXRhaWxzIG9uIHRoZSBtYWtpbmcgb2Ygc3VibWlzc2lvbnMgb3IgcmluZyAxMzAwIDg3IDgzIDg3IGR1cmluZyBub3JtYWwgb2ZmaWNlIGhvdXJzLg0KPC9wPg0KPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0ibm90aWZpZWRBZGRyZXNzZXMiPjxhIGhyZWY9IiMiPk5vdGlmaWVkIEFkZHJlc3NlczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGI+Tm8gZGF0YS48L2I+DQogICAgICAgICAgICA8L2Rpdj4NCg0KPGgzIGlkPSJnb29nbGVtYXBzIj48YSBocmVmPSIjIj5Hb29nbGUgTWFwczwvYT48L2gzPg0KPGRpdiBpZD0ibWFwX2NvbnRhaW5lciI+DQogICAgPGRpdiBpZD0ibWFwX2NhbnZhcyIgY2xhc3M9ImlmcmFtZS1yd2QiPg0KICAgIDwvZGl2Pg0KPC9kaXY+DQoNCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgIHdpbmRvdy5vbmxvYWQgPSBsb2FkR29vZ2xlTWFwc1NjcmlwdDsNCg0KICAgIHZhciBnZW9jb2RlcjsNCiAgICB2YXIgbWFwOw0KICAgIHZhciB0aW1lb3V0ID0gMzAwOw0KICAgIHZhciBwcm9wZXJ0aWVzID0gWyIxNC8xMjYgTW9sZXN3b3J0aCBTdCwgTGlzbW9yZSAyNDgwIE5TVyAiXTsNCiAgICB2YXIgbGF0TG5nQXJyID0gW107DQoNCiAgICBmdW5jdGlvbiBsb2FkR29vZ2xlTWFwc1NjcmlwdCgpIHsNCiAgICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOw0KICAgICAgICBzY3JpcHQudHlwZSA9ICJ0ZXh0L2phdmFzY3JpcHQiOw0KICAgICAgICBzY3JpcHQuc3JjID0gIi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9qcz9rZXk9QUl6YVN5QTh5YjBMelZYeE12aC0zVWM2Ym8zVC1CbWxGNll0dm40JmNhbGxiYWNrPWxvYWRHb29nbGVNYXBzIjsNCiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHJlbmRlckdvb2dsZU1hcHMoKQ0KICAgIHsNCiAgICAgICAgdmFyIG1hcE9wdGlvbnMgPSB7DQogICAgICAgICAgICBjZW50ZXI6IGxhdExuZ0FyclswXSwNCiAgICAgICAgICAgIHpvb206IDE2LA0KICAgICAgICAgICAgbWFwVHlwZUlkOiBnb29nbGUubWFwcy5NYXBUeXBlSWQuUk9BRE1BUCwNCiAgICAgICAgICAgIG1hcFR5cGVDb250cm9sOiBmYWxzZQ0KICAgICAgICB9DQoNCiAgICAgICAgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWFwX2NhbnZhcyIpLCBtYXBPcHRpb25zKTsNCg0KICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGREb21MaXN0ZW5lcih3aW5kb3csICdyZXNpemUnLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHZhciBjZW50ZXIgPSBtYXAuZ2V0Q2VudGVyKCk7DQogICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKG1hcCwgJ3Jlc2l6ZScpOw0KICAgICAgICAgICAgbWFwLnNldENlbnRlcihjZW50ZXIpOw0KICAgICAgICB9KTsNCg0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBzKCkgew0KICAgICAgICBnZW9jb2RlciA9IG5ldyBnb29nbGUubWFwcy5HZW9jb2RlcigpOw0KICAgICAgICB2YXIgbm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoID0gMDsNCg0KICAgICAgICAkKHByb3BlcnRpZXMpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7DQogICAgICAgICAgICB2YXIgcHJvcGVydHlBZGRyZXNzID0gZWxlbWVudDsNCg0KICAgICAgICAgICAgLy9HZXQgZ2VvY29kZQ0KICAgICAgICAgICAgZ2VvY29kZXIuZ2VvY29kZSh7ICdhZGRyZXNzJzogcHJvcGVydHlBZGRyZXNzIH0sIGZ1bmN0aW9uIChyZXN1bHRzLCBzdGF0dXMpIHsNCiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9LKSB7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gcmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbjsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxhdExuZyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobG9jYXRpb24ubGF0KCksIGxvY2F0aW9uLmxuZygpKTsNCg0KICAgICAgICAgICAgICAgICAgICBsYXRMbmdBcnIucHVzaChsYXRMbmcpOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKGxhdExuZ0Fyci5sZW5ndGggPT0gMSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyR29vZ2xlTWFwcygpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgLy9DcmVhdGUgbWFya2VyIGZvciBtYXAgYW5kIHBsYWNlIGl0IG9uIHRoZSBtYXANCiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoew0KICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGxhdExuZywNCiAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogbWFwDQogICAgICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50U3RyaW5nID0gJzxkaXY+PHNwYW4+JyArIHByb3BlcnR5QWRkcmVzcyArICc8L3NwYW4+PC9kaXY+JzsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGluZm93aW5kb3cgPSBuZXcgZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdyh7ICAgLy9DcmVhdGUgaW5mbyB3aW5kb3cNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRTdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFya2VyLCAnY2xpY2snLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGluZm93aW5kb3cub3BlbihtYXAsIG1hcmtlcik7DQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAvL2lmIG5vIGxvY2F0aW9uIGZvdW5kIGJ5IGdvb2dsZSBmb3IgYSBwcm9wZXJ0eQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN0YXR1cyA9PSAiWkVST19SRVNVTFRTIikgew0KICAgICAgICAgICAgICAgICAgICBub09mRmFpbGVkTG9jYXRpb25TZWFyY2grKzsNCg0KICAgICAgICAgICAgICAgICAgICBpZihub09mRmFpbGVkTG9jYXRpb25TZWFyY2ggPT0gJChwcm9wZXJ0aWVzKS5sZW5ndGgpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VHb29nbGVNYXBzQ29udGVudCgpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PVkVSX1FVRVJZX0xJTUlUKSB7DQogICAgICAgICAgICAgICAgICAgIC8vc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IGdldEdlb0NvZGVGb3JBZGRyZXNzKGlkLCBhZGRyZXNzKTsgfSwgKHRpbWVvdXQpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgLy9SZXBsYWNlcyBnb29nbGUgbWFwcyBjb250ZW50IHdpdGggYSBuZXcgZGl2IGJsb2NrIHRoYXQgaGFzIGluZm8gbWVzc2FnZQ0KICAgIGZ1bmN0aW9uIHJlcGxhY2VHb29nbGVNYXBzQ29udGVudCgpIHsNCiAgICAgICAgdmFyIG5ld0NvbnRlbnQgPSAnPGRpdiBjbGFzcz0idWktYWNjb3JkaW9uLWNvbnRlbnQgdWktaGVscGVyLXJlc2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1ib3R0b20iPicgKw0KICAgICAgICAgICAgJzxwPkNvdWxkblwndCBmaW5kIHRoZSBwcm9wZXJ0eSBhZGRyZXNzKGVzKSBvbiBHb29nbGUgTWFwcy4gPHA+JyArDQogICAgICAgICAgICAnPC9kaXY+JzsNCg0KICAgICAgICAkKCcjbWFwX2NvbnRhaW5lcicpLnJlcGxhY2VXaXRoKG5ld0NvbnRlbnQpOw0KICAgIH0NCg0KPC9zY3JpcHQ+DQoNCiAgICA8L2Rpdj4NCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoNCiAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgJC5mbi50b2dnbGVwYW5lbHMgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoInVpLWFjY29yZGlvbiB1aS1hY2NvcmRpb24taWNvbnMgdWktaGVscGVyLXJlc2V0IikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCJoMyIpDQogICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoInVpLWFjY29yZGlvbi1oZWFkZXIgdWktaGVscGVyLXJlc2V0IHVpLXN0YXRlLWRlZmF1bHQgdWktY29ybmVyLXRvcCB1aS1jb3JuZXItYm90dG9tIikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5ob3ZlcihmdW5jdGlvbiAoKSB7ICQodGhpcykudG9nZ2xlQ2xhc3MoInVpLXN0YXRlLWhvdmVyIik7IH0pDQogICAgICAgICAgICAgICAgICAgICAgICAucHJlcGVuZCgnPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cCI+PC9zcGFuPicpDQogICAgICAgICAgICAgICAgICAgICAgICAuY2xpY2soZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykudG9nZ2xlQ2xhc3MoInVpLWFjY29yZGlvbi1oZWFkZXItYWN0aXZlIHVpLXN0YXRlLWFjdGl2ZSB1aS1zdGF0ZS1kZWZhdWx0IHVpLWNvcm5lci1ib3R0b20iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgiPiAuZ2x5cGhpY29uIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRvZ2dsZUNsYXNzKCJnbHlwaGljb24tY2hldnJvbi11cCBnbHlwaGljb24tY2hldnJvbi1kb3duIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVuZCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5uZXh0KCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWRlVG9nZ2xlKCk7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgICAgICAgICAgICAgLm5leHQoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCJ1aS1hY2NvcmRpb24tY29udGVudCB1aS1oZWxwZXItcmVzZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbSIpDQogICAgICAgICAgICAgICAgICAgICAgICAuaGlkZSgpOw0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykudG9nZ2xlcGFuZWxzKCk7DQoNCiAgICAgICAgICAgICQoJyNwcm9wZXJ0aWVzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNkZXRhaWxzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyN0cmFja2luZycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZG9jdW1lbnRzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNyZWxhdGVkQXBwbGljYXRpb25zJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNmZWVzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNnb29nbGVtYXBzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNjb250YWN0VXMnKS5jbGljaygpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAvKiBTaG93cyBhbGwgdGhlIHBhbmVscyAqLw0KICAgICAgICBmdW5jdGlvbiBzaG93QWxsKCkgew0KICAgICAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykuY2hpbGRyZW4oImgzIikuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWRlZmF1bHQiKSkgew0KICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0NCg0KICAgICAgICAvKiBIaWRlIGFsbCB0aGUgcGFuZWxzICovDQogICAgICAgIGZ1bmN0aW9uIGhpZGVBbGwoKSB7DQogICAgICAgICAgICAkKCcjYXBwbGljYXRpb24nKS5jaGlsZHJlbigiaDMiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygidWktc3RhdGUtYWN0aXZlIikpIHsNCiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljaygpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9DQoNCiAgICA8L3NjcmlwdD4NCg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwhLS0gLy5jb250YWluZXItZmx1aWQgLS0+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0icHJlLWZvb3RlciBjb250YWluZXJfMTIgY2YiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ3JpZF80Ij4NCiAgICAgICAgICAgICAgICA8aDMgY2xhc3M9ImFjY2QtdG9nZyI+Q29udGFjdCBVcyA8aSBjbGFzcz0iZmEgZmEtY2FyZXQtZG93biI+PC9pPjwvaDM+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWNjZC1jb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICA8cD5MaXNtb3JlIENpdHkgQ291bmNpbDxicj5BQk46IDYwIDA4MCA5MzIgODM3PC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD40MyBPbGl2ZXIgQXZlbnVlPGJyPkdvb25lbGxhYmFoIE5TVyAyNDgwPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD5Qb3N0OiBQTyBCb3ggMjNBLCBMaXNtb3JlIE5TVyAyNDgwPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD5QaG9uZTogMTMwMCA4NyA4MyA4Nzxicj5GYXg6IDAyIDY2IDI1MCA0MDA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPkVtYWlsOiA8YSBocmVmPSJtYWlsdG86Y291bmNpbEBsaXNtb3JlLm5zdy5nb3YuYXUiPjxzdHJvbmc+Y291bmNpbEBsaXNtb3JlLm5zdy5nb3YuYXU8L3N0cm9uZz48L2E+PC9wPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJmb290ZXIiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyXzEyIGNmIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJncmlkXzEyIGNmIG93Ij4NCiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImNwIj5Db3B5cmlnaHQgJmNvcHk7IDIwMjEgTGlzbW9yZSBDaXR5IENvdW5jaWw8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9wYWdlLmFzcD9wPURPQy1PQ1QtNjQtNTctMzAiIHRhcmdldD0iX3BhcmVudCI+SW50ZXJuZXQgUHJpdmFjeSBTdGF0ZW1lbnQ8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAmbmJzcDsmbmJzcDsgfCAmbmJzcDsmbmJzcDsNCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cubGlzbW9yZS5uc3cuZ292LmF1L3BhZ2UuYXNwP3A9RE9DLU9DVC02NC01Ny0zMCIgdGFyZ2V0PSJfcGFyZW50Ij5EaXNjbGFpbWVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7Jm5ic3A7IHwgJm5ic3A7Jm5ic3A7DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9jcF90aGVtZXMvZGVmYXVsdC9zaXRlbWFwLmFzcCIgdGFyZ2V0PSJfcGFyZW50Ij5TaXRlIE1hcDwvYT4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KPC9ib2R5Pg0KPC9odG1sPg0K
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000137.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:42:43 GMT
      Content-Length:
      - '32525'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000120.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:42:48 GMT
      Content-Length:
      - '31178'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2006.00000672.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:42:53 GMT
      Content-Length:
      - '34195'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000145.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:42:57 GMT
      Content-Length:
      - '31679'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000145.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:43:02 GMT
      Content-Length:
      - '30643'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000139.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:43:06 GMT
      Content-Length:
      - '31639'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000139.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:43:11 GMT
      Content-Length:
      - '30405'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000133.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:43:16 GMT
      Content-Length:
      - '32464'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000152.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:43:21 GMT
      Content-Length:
      - '35277'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000128.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:43:26 GMT
      Content-Length:
      - '31360'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000128.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:43:30 GMT
      Content-Length:
      - '31483'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2018.00000338.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:43:34 GMT
      Content-Length:
      - '30914'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000124.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:43:39 GMT
      Content-Length:
      - '32030'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.1988.00000330.003
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:43:44 GMT
      Content-Length:
      - '31114'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000157.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:43:48 GMT
      Content-Length:
      - '36275'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000147.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:43:53 GMT
      Content-Length:
      - '30700'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000132.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:43:58 GMT
      Content-Length:
      - '31148'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000132.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:44:02 GMT
      Content-Length:
      - '32593'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/008.2019.00000006.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:44:06 GMT
      Content-Length:
      - '27773'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000121.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:44:11 GMT
      Content-Length:
      - '32076'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2014.00000349.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:44:15 GMT
      Content-Length:
      - '31251'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000138.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:44:20 GMT
      Content-Length:
      - '30451'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/013.2019.00000160.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:44:24 GMT
      Content-Length:
      - '28575'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000160.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:44:29 GMT
      Content-Length:
      - '27397'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000147.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:44:33 GMT
      Content-Length:
      - '30404'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000125.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:44:38 GMT
      Content-Length:
      - '33136'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000127.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:44:42 GMT
      Content-Length:
      - '31301'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000127.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:44:48 GMT
      Content-Length:
      - '31168'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000143.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:44:52 GMT
      Content-Length:
      - '30486'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000126.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:44:57 GMT
      Content-Length:
      - '31344'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iTGlzbW9yZSBDaXR5IENvdW5jaWwsREEgVHJhY2tlcixBcHBsaWNhdGlvbiBUcmFja2VyLERldmVsb3BtZW50IEFwcGxpY2F0aW9uLERldmVsb3BtZW50IEFwcGxpY2F0aW9uIFRyYWNraW5nLCBEQSBFbnF1aXJ5LCBEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBFbnF1aXJ5LCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iVGhlIG9mZmljaWFsIExpc21vcmUgQ2l0eSBDb3VuY2lsIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KDQogICAgPHRpdGxlPkxpc21vcmUgQ2l0eSBDb3VuY2lsIC0gQXBwbGljYXRpb24gVHJhY2tlcjwvdGl0bGU+DQoNCiAgICA8IS0tZmF2aWNvbi0tPg0KICAgIDxsaW5rIGhyZWY9Ii9mYXZpY29uLmljbyIgcmVsPSJzaG9ydGN1dCBpY29uIiB0eXBlPSJpbWFnZS94LWljb24iPg0KDQogICAgPCEtLSBqUXVlcnkgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0xLjExLjEuanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjExLjIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvY29yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvYWNjb3JkaW9uLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS90aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC10aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBEYXRhVGFibGVzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2pxdWVyeS5kYXRhVGFibGVzLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMuYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuc2NzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gQm9vdHN0cmFwIFNCLUFkbWluLTIgUGx1Z2luIGFuZCBvdGhlciBjc3MgYW5kIGpzIGZpbGVzLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtY29tYm9ib3guanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtZGF0ZXBpY2tlci5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2pxdWVyeS5mb3JtLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LnRhYmxlc29ydGVyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWFzdGVydmlldy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21ldGlzTWVudS5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3NiLWFkbWluLTIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL2Nzcy9ib290c3RyYXAtY29tYm9ib3guY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvZGF0ZXBpY2tlcjMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVydmlldy1jdXN0b21pc2F0aW9ucy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9zYi1hZG1pbi0yLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDxsaW5rIGhyZWY9Ii9Db3VuY2lsX1RoZW1lL0xpc21vcmUvbGlzbW9yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgDQoNCiAgICA8IS0tIEhUTUw1IFNoaW0gYW5kIFJlc3BvbmQuanMgSUU4IHN1cHBvcnQgb2YgSFRNTDUgZWxlbWVudHMgYW5kIG1lZGlhIHF1ZXJpZXMgLS0+DQogICAgPCEtLSBXQVJOSU5HOiBSZXNwb25kLmpzIGRvZXNuJ3Qgd29yayBpZiB5b3UgdmlldyB0aGUgcGFnZSB2aWEgZmlsZTovLyAtLT4NCiAgICA8IS0tW2lmIGx0IElFIDldPg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL2h0bWw1c2hpdi8zLjcuMC9odG1sNXNoaXYuanMiPjwvc2NyaXB0Pg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL3Jlc3BvbmQuanMvMS40LjIvcmVzcG9uZC5taW4uanMiPjwvc2NyaXB0Pg0KICAgIDwhW2VuZGlmXS0tPg0KDQogICAgPGxpbmsgaHJlZj0naHR0cDovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9UmFsZXdheTozMDAsNDAwLDYwMCw3MDAnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPg0KICAgIDxsaW5rIGhyZWY9J2h0dHA6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PU9zd2FsZDozMDAsNDAwLDcwMCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQo8L2hlYWQ+DQoNCg0KPGJvZHkgY2xhc3M9ImNicC1zcG1lbnUtcHVzaCI+DQogICAgPGRpdiBjbGFzcz0id3IiPg0KICAgICAgICA8ZGl2IGlkPSJoZWFkZXIiPg0KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl8xMiI+DQoNCiAgICAgICAgPGgxIGlkPSJsb2dvIj48YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9kZWZhdWx0LmFzcCI+PGltZyBzcmM9Ii8vY2FuZGlkYXRlLW9mZmljZS5zMy5hbWF6b25hd3MuY29tL3NoYXJlZC9saXNtb3JlL2ltYWdlcy9sb2dvLnBuZyIgYWx0PSJMaXNtb3JlIENpdHkgQ291bmNpbCIgc3R5bGU9InBhZGRpbmctdG9wOjVweCI+PHN0cm9uZyBjbGFzcz0idmgiPkxpc21vcmUgQ2l0eSBDb3VuY2lsPC9zdHJvbmc+PC9hPjwvaDE+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0idXRpbGl0eSByaWdodCI+DQogICAgICAgICAgICA8YSBjbGFzcz0iaG9tZS1saW5rIiBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9kZWZhdWx0LmFzcCI+DQogICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vY2FuZGlkYXRlLW9mZmljZS5zMy5hbWF6b25hd3MuY29tL3NoYXJlZC9saXNtb3JlL2ltYWdlcy9ob21lLnBuZyIgYWx0PSJMaXNtb3JlIENpdHkgQ291bmNpbCI+DQogICAgICAgICAgICA8L2E+DQogICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyIj4NCiAgICAgICAgPC9kaXY+DQoNCiAgICA8L2Rpdj4NCjwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJiYW5uZXIiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmFubmVyLXRleHQgY2YiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJhbm5lci10ZXh0LWNvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzcz0ib3ciPkRBIFRyYWNraW5nIDxzcGFuPlBvcnRhbDwvc3Bhbj48L2gxPg0KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibm0iPkluZm9ybWF0aW9uIG9uIGRldmVsb3BtZW50IGFwcGxpY2F0aW9ucyBpbiB0aGUgTGlzbW9yZSBMb2NhbCBHb3Zlcm5tZW50IEFyZWEuIDwvcD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyXzEyIGludHJvIGNmIj4gICAgICAgICAgICA8IS0tIE5hdmlnYXRpb24gLS0+DQogICAgICAgICAgICA8bmF2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWRlZmF1bHQgbmF2YmFyLXN0YXRpYy10b3AiIHJvbGU9Im5hdmlnYXRpb24iIHN0eWxlPSJtYXJnaW4tYm90dG9tOiAwIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJuYXZiYXItdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIubmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5Ub2dnbGUgbmF2aWdhdGlvbjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXZiYXItYnJhbmQiIGhyZWY9IiMiPjwvYT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLWhlYWRlciAtLT4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItdG9wLWxpbmtzIG5hdmJhci1yaWdodCBoaWRkZW4teHMgaGlkZGVuLXNtIGhpZGRlbi1tZCI+DQogICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGlkPSJwcmludEljb24iIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXByaW50IiBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1kZWZhdWx0IHNpZGViYXIiIHJvbGU9Im5hdmlnYXRpb24iPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaWRlYmFyLW5hdiBuYXZiYXItY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJzaWRlLW1lbnUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb24gVHJhY2tlcjxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0Fib3V0IHRhcmdldD1fc2VsZj5XaGF0IGlzIEFwcGxpY2F0aW9uIFRyYWNrZXI/PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0Rpc2NsYWltZXIgdGFyZ2V0PV9zZWxmPkRpc2NsYWltZXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvSW5kZXggdGFyZ2V0PT5BcHBsaWNhdGlvbiBUcmFja2VyIEhvbWU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvU2VhcmNoIGlkPXNlYXJjaCB0YXJnZXQ9X3NlbGY+U2VhcmNoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9SZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPVRydWUmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIGlkPW91dHN0YW5kaW5nLWFwcHMgdGFyZ2V0PV9zZWxmPlVuZGV0ZXJtaW5lZCBBcHBsaWNhdGlvbnM8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P1JlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1UcnVlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgaWQ9ZXhoaWJpdGVkLWFwcHMgdGFyZ2V0PV9zZWxmPkFwcGxpY2F0aW9ucyBPbiBFeGhpYml0aW9uPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9ucyBTdWJtaXR0ZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTUlMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+VGhpcyBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT03JTJmMDMlMmYyMDIxJkRhdGVUbz0xMyUyZjAzJTJmMjAyMSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjAzJTJmMjAyMSZEYXRlVG89MTUlMmYwMyUyZjIwMjEmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDIlMmYyMDIxJkRhdGVUbz0yOCUyZjAyJTJmMjAyMSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIERldGVybWluZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTUlMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTclMmYwMyUyZjIwMjEmRGF0ZVRvPTEzJTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5MYXN0IFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDIlMmYyMDIxJkRhdGVUbz0yOCUyZjAyJTJmMjAyMSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uc2lkZWJhci1jb2xsYXBzZSAtLT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gKDUuMjAxOS4xMjYuMSk8L2gyPg0KICAgIDwvZGl2Pg0KICAgIDxoND5EZXRhaWxlZCBpbmZvcm1hdGlvbiByZWxhdGVkIHRvIHRoZSBhcHBsaWNhdGlvbjo8L2g0Pg0KICAgIDxiciAvPg0KICAgIDxkaXY+DQogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6c2hvd0FsbCgpOyI+U2hvdyBBbGw8L2E+IC8NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpoaWRlQWxsKCk7Ij5IaWRlIEFsbDwvYT4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGlkPSJhcHBsaWNhdGlvbiI+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZGV0YWlscyI+PGEgaHJlZj0iIyI+RGV0YWlsczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGVzY3JpcHRpb246IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRBMTkvMTI2IC0gMTggV2FkZSBTdHJlZXQgLSBBZGRpdGlvbnMgYW5kIGFsdGVyYXRpb25zPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlN1Ym1pdHRlZCBEYXRlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE3LzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFR5cGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldmVsb3BtZW50IEFwcGxpY2F0aW9uPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InByb3BlcnRpZXMiPjxhIGhyZWY9IiMiPlByb3BlcnRpZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjE4IFdhZGUgU3QsIEVhc3QgTGlzbW9yZSAyNDgwIE5TVyAgKERQIDM4MTczIGxvdCA2Nik8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0icGVvcGxlIj48YSBocmVmPSIjIj5QZW9wbGU8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhbnQ6IEdvcmRvbiBCcnlhbnQNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhbnQ6IEp1ZGl0aCBCcnlhbnQNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCdWlsZGVyOiBHb3Jkb24gQnJ5YW50DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQnVpbGRlcjogVHJldm9yIFNtZWUNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcmluY2lwYWwgQ2VydGlmeWluZyBBdXRob3JpdHk6ICANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9Im9mZmljZXIiPjxhIGhyZWY9IiMiPk9mZmljZXI8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlBldGVyIENyYWlnPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9ImRlY2lzaW9uIj48YSBocmVmPSIjIj5EZWNpc2lvbjwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gU3RhdHVzOiBEZXRlcm1pbmVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXRlcm1pbmF0aW9uIERhdGU6DQowOC8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXRlcm1pbmF0aW9uIFR5cGU6IENvbmRpdGlvbmFsIENvbnNlbnQgLSBDb3VuY2lsIFN0YWZmPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9ImVzdGltYXRlZENvc3QiPjxhIGhyZWY9IiMiPkVzdGltYXRlZCBDb3N0PC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4kMzEsMDAwLjAwPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InRyYWNraW5nIj48YSBocmVmPSIjIj5UcmFja2luZzwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi13cmFwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnN3aXBlIHRhYmxlIHRvIHRoZSBsZWZ0IHRvIHJldmVhbCBtb3JlIGRhdGE8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1ib3JkZXJlZCBuby1mb290ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkRlc2NyaXB0aW9uPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNvbW1lbmNlZCBEYXRlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EdWUgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21wbGV0ZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BcHBsaWNhdGlvbiBSZWNlaXZlZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNy8wNC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE3LzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE4LzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+U2l0ZSBWaXNpdC9Jbml0aWFsIFJldmlldzwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxOC8wNC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA5LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA3LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+UmVmZXJyZWQgV2F0ZXIgYW5kIFNld2VyPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE4LzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDIvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjMvMDQvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Db25zZW50IE5vdGljZSBJc3N1ZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDgvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowOC8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowOC8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQogICAgICAgICAgICA8aDMgaWQ9InJlbGF0ZWRBcHBsaWNhdGlvbnMiPjxhIGhyZWY9IiMiPlJlbGF0ZWQgQXBwbGljYXRpb25zPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLXdyYXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+c3dpcGUgdGFibGUgdG8gdGhlIGxlZnQgdG8gcmV2ZWFsIG1vcmUgZGF0YTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWFycm93LXJpZ2h0IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG5vLWZvb3RlciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+QXBwbGljYXRpb24gVHlwZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5BcHBsaWNhdGlvbiBOdW1iZXI8L3RoPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb25zdHJ1Y3Rpb24gQ2VydGlmaWNhdGUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly90cmFja2VyLmxpc21vcmUubnN3Lmdvdi5hdS9BcHBsaWNhdGlvbi9BcHBsaWNhdGlvbkRldGFpbHMvMDEwLjIwMTkuMDAwMDAxMjYuMDAxLyI+MTAuMjAxOS4xMjYuMTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQoNCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCg0KDQoNCg0KDQo8aDMgaWQ9ImRvY3VtZW50cyI+PGEgaHJlZj0iIyI+RG9jdW1lbnRzPC9hPjwvaDM+DQo8ZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJkb2MtY291bnQiPlRvdGFsIG51bWJlciBvZiBkb2N1bWVudHM6IDE8L2Rpdj4NCiAgICA8dGFibGUgaWQ9ImRvYy10YWJsZSIgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgIDx0aD5SZWNvcmQgTnVtYmVyPC90aD4NCiAgICAgICAgICAgICAgICA8dGg+RGVzY3JpcHRpb248L3RoPg0KICAgICAgICAgICAgICAgIDx0aD5Eb2N1bWVudCBUeXBlPC90aD4NCiAgICAgICAgICAgICAgICA8dGg+U2l6ZTwvdGg+DQogICAgICAgICAgICAgICAgPHRoPlZpZXcgTGluazwvdGg+DQogICAgICAgICAgICA8L3RyPg0KICAgICAgICA8L3RoZWFkPg0KICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BRDE5Lzg4MDE8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldmVsb3BtZW50IEFwcGxpY2F0aW9uIENvbnNlbnQgTm90aWNlIC0gMTggV2FkZSBTdHJlZXQgRUFTVCBMSVNNT1JFIDI0ODA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlBERjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAwLjIxIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL3RyYWNrZXIubGlzbW9yZS5uc3cuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1QcHV2bHFQVEZGcz0iIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgIDwvdGJvZHk+DQogICAgPC90YWJsZT4NCjwvZGl2Pg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0iY29udGFjdFVzIj48YSBocmVmPSIjIj5Db250YWN0IFVzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48cD4NClNob3VsZCB5b3Ugd2lzaCB0byBjb250YWN0IGNvdW5jaWwgdG8gbWFrZSBlbnF1aXJpZXMgcmVnYXJkaW5nIGFwcGxpY2F0aW9ucyBkaXNwbGF5ZWQgb24gdGhlIHdlYnNpdGUsIHBsZWFzZSBjb250YWN0IGVpdGhlciBieSBlbWFpbCA8YSBzdHlsZT0iY29sb3I6IGJsdWUiIGhyZWY9Im1haWx0bzpjb3VuY2lsQGxpc21vcmUubnN3Lmdvdi5hdT9zdWJqZWN0PVN1Ym1pc3Npb24gZm9yIGFwcGxpY2F0aW9uICAoNS4yMDE5LjEyNi4xKSI+Y291bmNpbEBsaXNtb3JlLm5zdy5nb3YuYXU8L2E+LCBwaG9uZSAxMzAwIDg3IDgzIDg3IGR1cmluZyBub3JtYWwgb2ZmaWNlIGhvdXJzIG9yIGluIHdyaXRpbmcgdG8gUE8gQm94IDIzQSwgTGlzbW9yZSBOU1cgMjQ4MC4gQWxsIGNvcnJlc3BvbmRlbmNlIHNob3VsZCBiZSBhZGRyZXNzZWQgdG8gdGhlIEdlbmVyYWwgTWFuYWdlciBhbmQgcXVvdGUgdGhlIHJlbGV2YW50IGFwcGxpY2F0aW9uIHJlZmVyZW5jZSBudW1iZXIuDQo8L3A+DQo8cD4NCklmIHRoZSBhcHBsaWNhdGlvbiBkaXNwbGF5ZWQgb24gdGhpcyB3ZWJzaXRlIGlzIHVuZGVyIGN1cnJlbnQgbmVpZ2hib3VyIG5vdGlmaWNhdGlvbiwgcHJvcGVydGllcyBjb25zaWRlcmVkIGJ5IENvdW5jaWwgdG8gcG9zc2libHkgYmUgZGV0cmltZW50YWxseSBhZmZlY3RlZCB3aWxsIGJlIGNvbnRhY3RlZCBpbmRpdmlkdWFsbHkgYW5kIGFkdmlzZWQgb2YgdGhlaXIgc3VibWlzc2lvbiBvcHBvcnR1bml0aWVzIHVuZGVyIENoYXB0ZXIgMTAgTGlzbW9yZSBEZXZlbG9wbWVudCBDb250cm9sIFBsYW4gMjAxMi4NCjwvcD4NCjxwPg0KPGEgaHJlZj0iaHR0cDovL3d3dy5saXNtb3JlLm5zdy5nb3YuYXUvY3BfdGhlbWVzL2RlZmF1bHQvcGFnZS5hc3A/cD1ET0MtTEhSLTgzLTc2LTU4IiAgdGFyZ2V0PSJfYmxhbmsiPkNMSUNLIEhFUkU8L2E+IHRvIHZpc2l0IENvdW5jaWzigJlzIHdlYnNpdGUgYW5kIHNlZSBmdXJ0aGVyIGRldGFpbHMgb24gdGhlIG1ha2luZyBvZiBzdWJtaXNzaW9ucyBvciByaW5nIDEzMDAgODcgODMgODcgZHVyaW5nIG5vcm1hbCBvZmZpY2UgaG91cnMuDQo8L3A+DQo8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJub3RpZmllZEFkZHJlc3NlcyI+PGEgaHJlZj0iIyI+Tm90aWZpZWQgQWRkcmVzc2VzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8Yj5ObyBkYXRhLjwvYj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQo8aDMgaWQ9Imdvb2dsZW1hcHMiPjxhIGhyZWY9IiMiPkdvb2dsZSBNYXBzPC9hPjwvaDM+DQo8ZGl2IGlkPSJtYXBfY29udGFpbmVyIj4NCiAgICA8ZGl2IGlkPSJtYXBfY2FudmFzIiBjbGFzcz0iaWZyYW1lLXJ3ZCI+DQogICAgPC9kaXY+DQo8L2Rpdj4NCg0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgd2luZG93Lm9ubG9hZCA9IGxvYWRHb29nbGVNYXBzU2NyaXB0Ow0KDQogICAgdmFyIGdlb2NvZGVyOw0KICAgIHZhciBtYXA7DQogICAgdmFyIHRpbWVvdXQgPSAzMDA7DQogICAgdmFyIHByb3BlcnRpZXMgPSBbIjE4IFdhZGUgU3QsIEVhc3QgTGlzbW9yZSAyNDgwIE5TVyAiXTsNCiAgICB2YXIgbGF0TG5nQXJyID0gW107DQoNCiAgICBmdW5jdGlvbiBsb2FkR29vZ2xlTWFwc1NjcmlwdCgpIHsNCiAgICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOw0KICAgICAgICBzY3JpcHQudHlwZSA9ICJ0ZXh0L2phdmFzY3JpcHQiOw0KICAgICAgICBzY3JpcHQuc3JjID0gIi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9qcz9rZXk9QUl6YVN5QTh5YjBMelZYeE12aC0zVWM2Ym8zVC1CbWxGNll0dm40JmNhbGxiYWNrPWxvYWRHb29nbGVNYXBzIjsNCiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHJlbmRlckdvb2dsZU1hcHMoKQ0KICAgIHsNCiAgICAgICAgdmFyIG1hcE9wdGlvbnMgPSB7DQogICAgICAgICAgICBjZW50ZXI6IGxhdExuZ0FyclswXSwNCiAgICAgICAgICAgIHpvb206IDE2LA0KICAgICAgICAgICAgbWFwVHlwZUlkOiBnb29nbGUubWFwcy5NYXBUeXBlSWQuUk9BRE1BUCwNCiAgICAgICAgICAgIG1hcFR5cGVDb250cm9sOiBmYWxzZQ0KICAgICAgICB9DQoNCiAgICAgICAgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWFwX2NhbnZhcyIpLCBtYXBPcHRpb25zKTsNCg0KICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGREb21MaXN0ZW5lcih3aW5kb3csICdyZXNpemUnLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHZhciBjZW50ZXIgPSBtYXAuZ2V0Q2VudGVyKCk7DQogICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKG1hcCwgJ3Jlc2l6ZScpOw0KICAgICAgICAgICAgbWFwLnNldENlbnRlcihjZW50ZXIpOw0KICAgICAgICB9KTsNCg0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBzKCkgew0KICAgICAgICBnZW9jb2RlciA9IG5ldyBnb29nbGUubWFwcy5HZW9jb2RlcigpOw0KICAgICAgICB2YXIgbm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoID0gMDsNCg0KICAgICAgICAkKHByb3BlcnRpZXMpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7DQogICAgICAgICAgICB2YXIgcHJvcGVydHlBZGRyZXNzID0gZWxlbWVudDsNCg0KICAgICAgICAgICAgLy9HZXQgZ2VvY29kZQ0KICAgICAgICAgICAgZ2VvY29kZXIuZ2VvY29kZSh7ICdhZGRyZXNzJzogcHJvcGVydHlBZGRyZXNzIH0sIGZ1bmN0aW9uIChyZXN1bHRzLCBzdGF0dXMpIHsNCiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9LKSB7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gcmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbjsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxhdExuZyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobG9jYXRpb24ubGF0KCksIGxvY2F0aW9uLmxuZygpKTsNCg0KICAgICAgICAgICAgICAgICAgICBsYXRMbmdBcnIucHVzaChsYXRMbmcpOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKGxhdExuZ0Fyci5sZW5ndGggPT0gMSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyR29vZ2xlTWFwcygpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgLy9DcmVhdGUgbWFya2VyIGZvciBtYXAgYW5kIHBsYWNlIGl0IG9uIHRoZSBtYXANCiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoew0KICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGxhdExuZywNCiAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogbWFwDQogICAgICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50U3RyaW5nID0gJzxkaXY+PHNwYW4+JyArIHByb3BlcnR5QWRkcmVzcyArICc8L3NwYW4+PC9kaXY+JzsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGluZm93aW5kb3cgPSBuZXcgZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdyh7ICAgLy9DcmVhdGUgaW5mbyB3aW5kb3cNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRTdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFya2VyLCAnY2xpY2snLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGluZm93aW5kb3cub3BlbihtYXAsIG1hcmtlcik7DQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAvL2lmIG5vIGxvY2F0aW9uIGZvdW5kIGJ5IGdvb2dsZSBmb3IgYSBwcm9wZXJ0eQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN0YXR1cyA9PSAiWkVST19SRVNVTFRTIikgew0KICAgICAgICAgICAgICAgICAgICBub09mRmFpbGVkTG9jYXRpb25TZWFyY2grKzsNCg0KICAgICAgICAgICAgICAgICAgICBpZihub09mRmFpbGVkTG9jYXRpb25TZWFyY2ggPT0gJChwcm9wZXJ0aWVzKS5sZW5ndGgpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VHb29nbGVNYXBzQ29udGVudCgpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PVkVSX1FVRVJZX0xJTUlUKSB7DQogICAgICAgICAgICAgICAgICAgIC8vc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IGdldEdlb0NvZGVGb3JBZGRyZXNzKGlkLCBhZGRyZXNzKTsgfSwgKHRpbWVvdXQpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgLy9SZXBsYWNlcyBnb29nbGUgbWFwcyBjb250ZW50IHdpdGggYSBuZXcgZGl2IGJsb2NrIHRoYXQgaGFzIGluZm8gbWVzc2FnZQ0KICAgIGZ1bmN0aW9uIHJlcGxhY2VHb29nbGVNYXBzQ29udGVudCgpIHsNCiAgICAgICAgdmFyIG5ld0NvbnRlbnQgPSAnPGRpdiBjbGFzcz0idWktYWNjb3JkaW9uLWNvbnRlbnQgdWktaGVscGVyLXJlc2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1ib3R0b20iPicgKw0KICAgICAgICAgICAgJzxwPkNvdWxkblwndCBmaW5kIHRoZSBwcm9wZXJ0eSBhZGRyZXNzKGVzKSBvbiBHb29nbGUgTWFwcy4gPHA+JyArDQogICAgICAgICAgICAnPC9kaXY+JzsNCg0KICAgICAgICAkKCcjbWFwX2NvbnRhaW5lcicpLnJlcGxhY2VXaXRoKG5ld0NvbnRlbnQpOw0KICAgIH0NCg0KPC9zY3JpcHQ+DQoNCiAgICA8L2Rpdj4NCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoNCiAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgJC5mbi50b2dnbGVwYW5lbHMgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoInVpLWFjY29yZGlvbiB1aS1hY2NvcmRpb24taWNvbnMgdWktaGVscGVyLXJlc2V0IikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCJoMyIpDQogICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoInVpLWFjY29yZGlvbi1oZWFkZXIgdWktaGVscGVyLXJlc2V0IHVpLXN0YXRlLWRlZmF1bHQgdWktY29ybmVyLXRvcCB1aS1jb3JuZXItYm90dG9tIikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5ob3ZlcihmdW5jdGlvbiAoKSB7ICQodGhpcykudG9nZ2xlQ2xhc3MoInVpLXN0YXRlLWhvdmVyIik7IH0pDQogICAgICAgICAgICAgICAgICAgICAgICAucHJlcGVuZCgnPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cCI+PC9zcGFuPicpDQogICAgICAgICAgICAgICAgICAgICAgICAuY2xpY2soZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykudG9nZ2xlQ2xhc3MoInVpLWFjY29yZGlvbi1oZWFkZXItYWN0aXZlIHVpLXN0YXRlLWFjdGl2ZSB1aS1zdGF0ZS1kZWZhdWx0IHVpLWNvcm5lci1ib3R0b20iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgiPiAuZ2x5cGhpY29uIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRvZ2dsZUNsYXNzKCJnbHlwaGljb24tY2hldnJvbi11cCBnbHlwaGljb24tY2hldnJvbi1kb3duIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVuZCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5uZXh0KCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWRlVG9nZ2xlKCk7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgICAgICAgICAgICAgLm5leHQoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCJ1aS1hY2NvcmRpb24tY29udGVudCB1aS1oZWxwZXItcmVzZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbSIpDQogICAgICAgICAgICAgICAgICAgICAgICAuaGlkZSgpOw0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykudG9nZ2xlcGFuZWxzKCk7DQoNCiAgICAgICAgICAgICQoJyNwcm9wZXJ0aWVzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNkZXRhaWxzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyN0cmFja2luZycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZG9jdW1lbnRzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNyZWxhdGVkQXBwbGljYXRpb25zJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNmZWVzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNnb29nbGVtYXBzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNjb250YWN0VXMnKS5jbGljaygpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAvKiBTaG93cyBhbGwgdGhlIHBhbmVscyAqLw0KICAgICAgICBmdW5jdGlvbiBzaG93QWxsKCkgew0KICAgICAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykuY2hpbGRyZW4oImgzIikuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWRlZmF1bHQiKSkgew0KICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0NCg0KICAgICAgICAvKiBIaWRlIGFsbCB0aGUgcGFuZWxzICovDQogICAgICAgIGZ1bmN0aW9uIGhpZGVBbGwoKSB7DQogICAgICAgICAgICAkKCcjYXBwbGljYXRpb24nKS5jaGlsZHJlbigiaDMiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygidWktc3RhdGUtYWN0aXZlIikpIHsNCiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljaygpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9DQoNCiAgICA8L3NjcmlwdD4NCg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwhLS0gLy5jb250YWluZXItZmx1aWQgLS0+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0icHJlLWZvb3RlciBjb250YWluZXJfMTIgY2YiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ3JpZF80Ij4NCiAgICAgICAgICAgICAgICA8aDMgY2xhc3M9ImFjY2QtdG9nZyI+Q29udGFjdCBVcyA8aSBjbGFzcz0iZmEgZmEtY2FyZXQtZG93biI+PC9pPjwvaDM+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWNjZC1jb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICA8cD5MaXNtb3JlIENpdHkgQ291bmNpbDxicj5BQk46IDYwIDA4MCA5MzIgODM3PC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD40MyBPbGl2ZXIgQXZlbnVlPGJyPkdvb25lbGxhYmFoIE5TVyAyNDgwPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD5Qb3N0OiBQTyBCb3ggMjNBLCBMaXNtb3JlIE5TVyAyNDgwPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD5QaG9uZTogMTMwMCA4NyA4MyA4Nzxicj5GYXg6IDAyIDY2IDI1MCA0MDA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPkVtYWlsOiA8YSBocmVmPSJtYWlsdG86Y291bmNpbEBsaXNtb3JlLm5zdy5nb3YuYXUiPjxzdHJvbmc+Y291bmNpbEBsaXNtb3JlLm5zdy5nb3YuYXU8L3N0cm9uZz48L2E+PC9wPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJmb290ZXIiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyXzEyIGNmIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJncmlkXzEyIGNmIG93Ij4NCiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImNwIj5Db3B5cmlnaHQgJmNvcHk7IDIwMjEgTGlzbW9yZSBDaXR5IENvdW5jaWw8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9wYWdlLmFzcD9wPURPQy1PQ1QtNjQtNTctMzAiIHRhcmdldD0iX3BhcmVudCI+SW50ZXJuZXQgUHJpdmFjeSBTdGF0ZW1lbnQ8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAmbmJzcDsmbmJzcDsgfCAmbmJzcDsmbmJzcDsNCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cubGlzbW9yZS5uc3cuZ292LmF1L3BhZ2UuYXNwP3A9RE9DLU9DVC02NC01Ny0zMCIgdGFyZ2V0PSJfcGFyZW50Ij5EaXNjbGFpbWVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7Jm5ic3A7IHwgJm5ic3A7Jm5ic3A7DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9jcF90aGVtZXMvZGVmYXVsdC9zaXRlbWFwLmFzcCIgdGFyZ2V0PSJfcGFyZW50Ij5TaXRlIE1hcDwvYT4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KPC9ib2R5Pg0KPC9odG1sPg0K
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/013.2014.00000327.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:45:01 GMT
      Content-Length:
      - '29561'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/013.2018.00000396.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:45:06 GMT
      Content-Length:
      - '28636'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000155.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:45:10 GMT
      Content-Length:
      - '33829'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000146.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:45:15 GMT
      Content-Length:
      - '32969'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000135.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:45:19 GMT
      Content-Length:
      - '30394'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000159.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:45:24 GMT
      Content-Length:
      - '33178'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000119.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:45:28 GMT
      Content-Length:
      - '29729'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iTGlzbW9yZSBDaXR5IENvdW5jaWwsREEgVHJhY2tlcixBcHBsaWNhdGlvbiBUcmFja2VyLERldmVsb3BtZW50IEFwcGxpY2F0aW9uLERldmVsb3BtZW50IEFwcGxpY2F0aW9uIFRyYWNraW5nLCBEQSBFbnF1aXJ5LCBEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBFbnF1aXJ5LCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iVGhlIG9mZmljaWFsIExpc21vcmUgQ2l0eSBDb3VuY2lsIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KDQogICAgPHRpdGxlPkxpc21vcmUgQ2l0eSBDb3VuY2lsIC0gQXBwbGljYXRpb24gVHJhY2tlcjwvdGl0bGU+DQoNCiAgICA8IS0tZmF2aWNvbi0tPg0KICAgIDxsaW5rIGhyZWY9Ii9mYXZpY29uLmljbyIgcmVsPSJzaG9ydGN1dCBpY29uIiB0eXBlPSJpbWFnZS94LWljb24iPg0KDQogICAgPCEtLSBqUXVlcnkgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0xLjExLjEuanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjExLjIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvY29yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvYWNjb3JkaW9uLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS90aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC10aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBEYXRhVGFibGVzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2pxdWVyeS5kYXRhVGFibGVzLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMuYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuc2NzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gQm9vdHN0cmFwIFNCLUFkbWluLTIgUGx1Z2luIGFuZCBvdGhlciBjc3MgYW5kIGpzIGZpbGVzLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtY29tYm9ib3guanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtZGF0ZXBpY2tlci5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2pxdWVyeS5mb3JtLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LnRhYmxlc29ydGVyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWFzdGVydmlldy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21ldGlzTWVudS5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3NiLWFkbWluLTIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL2Nzcy9ib290c3RyYXAtY29tYm9ib3guY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvZGF0ZXBpY2tlcjMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVydmlldy1jdXN0b21pc2F0aW9ucy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9zYi1hZG1pbi0yLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDxsaW5rIGhyZWY9Ii9Db3VuY2lsX1RoZW1lL0xpc21vcmUvbGlzbW9yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgDQoNCiAgICA8IS0tIEhUTUw1IFNoaW0gYW5kIFJlc3BvbmQuanMgSUU4IHN1cHBvcnQgb2YgSFRNTDUgZWxlbWVudHMgYW5kIG1lZGlhIHF1ZXJpZXMgLS0+DQogICAgPCEtLSBXQVJOSU5HOiBSZXNwb25kLmpzIGRvZXNuJ3Qgd29yayBpZiB5b3UgdmlldyB0aGUgcGFnZSB2aWEgZmlsZTovLyAtLT4NCiAgICA8IS0tW2lmIGx0IElFIDldPg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL2h0bWw1c2hpdi8zLjcuMC9odG1sNXNoaXYuanMiPjwvc2NyaXB0Pg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL3Jlc3BvbmQuanMvMS40LjIvcmVzcG9uZC5taW4uanMiPjwvc2NyaXB0Pg0KICAgIDwhW2VuZGlmXS0tPg0KDQogICAgPGxpbmsgaHJlZj0naHR0cDovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9UmFsZXdheTozMDAsNDAwLDYwMCw3MDAnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPg0KICAgIDxsaW5rIGhyZWY9J2h0dHA6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PU9zd2FsZDozMDAsNDAwLDcwMCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQo8L2hlYWQ+DQoNCg0KPGJvZHkgY2xhc3M9ImNicC1zcG1lbnUtcHVzaCI+DQogICAgPGRpdiBjbGFzcz0id3IiPg0KICAgICAgICA8ZGl2IGlkPSJoZWFkZXIiPg0KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl8xMiI+DQoNCiAgICAgICAgPGgxIGlkPSJsb2dvIj48YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9kZWZhdWx0LmFzcCI+PGltZyBzcmM9Ii8vY2FuZGlkYXRlLW9mZmljZS5zMy5hbWF6b25hd3MuY29tL3NoYXJlZC9saXNtb3JlL2ltYWdlcy9sb2dvLnBuZyIgYWx0PSJMaXNtb3JlIENpdHkgQ291bmNpbCIgc3R5bGU9InBhZGRpbmctdG9wOjVweCI+PHN0cm9uZyBjbGFzcz0idmgiPkxpc21vcmUgQ2l0eSBDb3VuY2lsPC9zdHJvbmc+PC9hPjwvaDE+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0idXRpbGl0eSByaWdodCI+DQogICAgICAgICAgICA8YSBjbGFzcz0iaG9tZS1saW5rIiBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9kZWZhdWx0LmFzcCI+DQogICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vY2FuZGlkYXRlLW9mZmljZS5zMy5hbWF6b25hd3MuY29tL3NoYXJlZC9saXNtb3JlL2ltYWdlcy9ob21lLnBuZyIgYWx0PSJMaXNtb3JlIENpdHkgQ291bmNpbCI+DQogICAgICAgICAgICA8L2E+DQogICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyIj4NCiAgICAgICAgPC9kaXY+DQoNCiAgICA8L2Rpdj4NCjwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJiYW5uZXIiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmFubmVyLXRleHQgY2YiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJhbm5lci10ZXh0LWNvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzcz0ib3ciPkRBIFRyYWNraW5nIDxzcGFuPlBvcnRhbDwvc3Bhbj48L2gxPg0KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibm0iPkluZm9ybWF0aW9uIG9uIGRldmVsb3BtZW50IGFwcGxpY2F0aW9ucyBpbiB0aGUgTGlzbW9yZSBMb2NhbCBHb3Zlcm5tZW50IEFyZWEuIDwvcD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyXzEyIGludHJvIGNmIj4gICAgICAgICAgICA8IS0tIE5hdmlnYXRpb24gLS0+DQogICAgICAgICAgICA8bmF2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWRlZmF1bHQgbmF2YmFyLXN0YXRpYy10b3AiIHJvbGU9Im5hdmlnYXRpb24iIHN0eWxlPSJtYXJnaW4tYm90dG9tOiAwIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJuYXZiYXItdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIubmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5Ub2dnbGUgbmF2aWdhdGlvbjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXZiYXItYnJhbmQiIGhyZWY9IiMiPjwvYT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLWhlYWRlciAtLT4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItdG9wLWxpbmtzIG5hdmJhci1yaWdodCBoaWRkZW4teHMgaGlkZGVuLXNtIGhpZGRlbi1tZCI+DQogICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGlkPSJwcmludEljb24iIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXByaW50IiBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1kZWZhdWx0IHNpZGViYXIiIHJvbGU9Im5hdmlnYXRpb24iPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaWRlYmFyLW5hdiBuYXZiYXItY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJzaWRlLW1lbnUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb24gVHJhY2tlcjxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0Fib3V0IHRhcmdldD1fc2VsZj5XaGF0IGlzIEFwcGxpY2F0aW9uIFRyYWNrZXI/PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0Rpc2NsYWltZXIgdGFyZ2V0PV9zZWxmPkRpc2NsYWltZXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvSW5kZXggdGFyZ2V0PT5BcHBsaWNhdGlvbiBUcmFja2VyIEhvbWU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvU2VhcmNoIGlkPXNlYXJjaCB0YXJnZXQ9X3NlbGY+U2VhcmNoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9SZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPVRydWUmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIGlkPW91dHN0YW5kaW5nLWFwcHMgdGFyZ2V0PV9zZWxmPlVuZGV0ZXJtaW5lZCBBcHBsaWNhdGlvbnM8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P1JlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1UcnVlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgaWQ9ZXhoaWJpdGVkLWFwcHMgdGFyZ2V0PV9zZWxmPkFwcGxpY2F0aW9ucyBPbiBFeGhpYml0aW9uPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9ucyBTdWJtaXR0ZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTUlMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+VGhpcyBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT03JTJmMDMlMmYyMDIxJkRhdGVUbz0xMyUyZjAzJTJmMjAyMSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjAzJTJmMjAyMSZEYXRlVG89MTUlMmYwMyUyZjIwMjEmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDIlMmYyMDIxJkRhdGVUbz0yOCUyZjAyJTJmMjAyMSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIERldGVybWluZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTUlMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTclMmYwMyUyZjIwMjEmRGF0ZVRvPTEzJTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5MYXN0IFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDIlMmYyMDIxJkRhdGVUbz0yOCUyZjAyJTJmMjAyMSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uc2lkZWJhci1jb2xsYXBzZSAtLT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogQ29uc3RydWN0aW9uIENlcnRpZmljYXRlICgxMC4yMDE5LjExOS4xKTwvaDI+DQogICAgPC9kaXY+DQogICAgPGg0PkRldGFpbGVkIGluZm9ybWF0aW9uIHJlbGF0ZWQgdG8gdGhlIGFwcGxpY2F0aW9uOjwvaDQ+DQogICAgPGJyIC8+DQogICAgPGRpdj4NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpzaG93QWxsKCk7Ij5TaG93IEFsbDwvYT4gLw0KICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OmhpZGVBbGwoKTsiPkhpZGUgQWxsPC9hPg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgaWQ9ImFwcGxpY2F0aW9uIj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJkZXRhaWxzIj48YSBocmVmPSIjIj5EZXRhaWxzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXNjcmlwdGlvbjogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+REExOS8xMTkgLSAzMSBFd2luZyBTdHJlZXQgLSBBbHRlcmF0aW9ucyBhbmQgYWRkaXRpb25zPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlN1Ym1pdHRlZCBEYXRlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE1LzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFR5cGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkNvbnN0cnVjdGlvbiBDZXJ0aWZpY2F0ZTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJwcm9wZXJ0aWVzIj48YSBocmVmPSIjIj5Qcm9wZXJ0aWVzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4zMSBFd2luZyBTdCwgTGlzbW9yZSAyNDgwIE5TVyAgKERQIDE2NTA2IGxvdCA3KTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJwZW9wbGUiPjxhIGhyZWY9IiMiPlBlb3BsZTwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwcGxpY2FudDogUGF1bCBTY290Y2htZXINCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCdWlsZGVyOiAgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJpbmNpcGFsIENlcnRpZnlpbmcgQXV0aG9yaXR5OiAgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJvZmZpY2VyIj48YSBocmVmPSIjIj5PZmZpY2VyPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5QZXRlciBDcmFpZzwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJkZWNpc2lvbiI+PGEgaHJlZj0iIyI+RGVjaXNpb248L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFN0YXR1czogRGV0ZXJtaW5lZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGV0ZXJtaW5hdGlvbiBEYXRlOg0KMDEvMTEvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGV0ZXJtaW5hdGlvbiBUeXBlOiBBcHByb3ZlZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJlc3RpbWF0ZWRDb3N0Ij48YSBocmVmPSIjIj5Fc3RpbWF0ZWQgQ29zdDwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+JDQ5LDgwMC4wMDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJ0cmFja2luZyI+PGEgaHJlZj0iIyI+VHJhY2tpbmc8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21tZW5jZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RHVlIERhdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Q29tcGxldGVkIERhdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gUmVjZWl2ZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTUvMDQvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNS8wNC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNi8wNC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlNpdGUvQWR2aWNlIEluc3BlY3Rpb248L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTYvMDQvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNi8wNC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQozMS8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlBDQSBDb250cmFjdCBHZW5lcmF0ZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMzEvMTAvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQozMS8xMC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQozMS8xMC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkNlcnRpZmljYXRlIElzc3VlZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowMS8xMS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjAxLzExLzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjAxLzExLzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0icmVsYXRlZEFwcGxpY2F0aW9ucyI+PGEgaHJlZj0iIyI+UmVsYXRlZCBBcHBsaWNhdGlvbnM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5BcHBsaWNhdGlvbiBUeXBlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFwcGxpY2F0aW9uIE51bWJlcjwvdGg+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERldmVsb3BtZW50IEFwcGxpY2F0aW9uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vdHJhY2tlci5saXNtb3JlLm5zdy5nb3YuYXUvQXBwbGljYXRpb24vQXBwbGljYXRpb25EZXRhaWxzLzAwNS4yMDE5LjAwMDAwMTE5LjAwMS8iPjUuMjAxOS4xMTkuMTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQoNCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCg0KDQoNCg0KDQo8aDMgaWQ9ImRvY3VtZW50cyI+PGEgaHJlZj0iIyI+RG9jdW1lbnRzPC9hPjwvaDM+DQo8ZGl2Pg0KDQogICAgICAgIDxiPk5vIGRhdGEuPC9iPg0KPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGgzIGlkPSJjb250YWN0VXMiPjxhIGhyZWY9IiMiPkNvbnRhY3QgVXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxwPg0KU2hvdWxkIHlvdSB3aXNoIHRvIGNvbnRhY3QgY291bmNpbCB0byBtYWtlIGVucXVpcmllcyByZWdhcmRpbmcgYXBwbGljYXRpb25zIGRpc3BsYXllZCBvbiB0aGUgd2Vic2l0ZSwgcGxlYXNlIGNvbnRhY3QgZWl0aGVyIGJ5IGVtYWlsIDxhIHN0eWxlPSJjb2xvcjogYmx1ZSIgaHJlZj0ibWFpbHRvOmNvdW5jaWxAbGlzbW9yZS5uc3cuZ292LmF1P3N1YmplY3Q9U3VibWlzc2lvbiBmb3IgYXBwbGljYXRpb24gICgxMC4yMDE5LjExOS4xKSI+Y291bmNpbEBsaXNtb3JlLm5zdy5nb3YuYXU8L2E+LCBwaG9uZSAxMzAwIDg3IDgzIDg3IGR1cmluZyBub3JtYWwgb2ZmaWNlIGhvdXJzIG9yIGluIHdyaXRpbmcgdG8gUE8gQm94IDIzQSwgTGlzbW9yZSBOU1cgMjQ4MC4gQWxsIGNvcnJlc3BvbmRlbmNlIHNob3VsZCBiZSBhZGRyZXNzZWQgdG8gdGhlIEdlbmVyYWwgTWFuYWdlciBhbmQgcXVvdGUgdGhlIHJlbGV2YW50IGFwcGxpY2F0aW9uIHJlZmVyZW5jZSBudW1iZXIuDQo8L3A+DQo8cD4NCklmIHRoZSBhcHBsaWNhdGlvbiBkaXNwbGF5ZWQgb24gdGhpcyB3ZWJzaXRlIGlzIHVuZGVyIGN1cnJlbnQgbmVpZ2hib3VyIG5vdGlmaWNhdGlvbiwgcHJvcGVydGllcyBjb25zaWRlcmVkIGJ5IENvdW5jaWwgdG8gcG9zc2libHkgYmUgZGV0cmltZW50YWxseSBhZmZlY3RlZCB3aWxsIGJlIGNvbnRhY3RlZCBpbmRpdmlkdWFsbHkgYW5kIGFkdmlzZWQgb2YgdGhlaXIgc3VibWlzc2lvbiBvcHBvcnR1bml0aWVzIHVuZGVyIENoYXB0ZXIgMTAgTGlzbW9yZSBEZXZlbG9wbWVudCBDb250cm9sIFBsYW4gMjAxMi4NCjwvcD4NCjxwPg0KPGEgaHJlZj0iaHR0cDovL3d3dy5saXNtb3JlLm5zdy5nb3YuYXUvY3BfdGhlbWVzL2RlZmF1bHQvcGFnZS5hc3A/cD1ET0MtTEhSLTgzLTc2LTU4IiAgdGFyZ2V0PSJfYmxhbmsiPkNMSUNLIEhFUkU8L2E+IHRvIHZpc2l0IENvdW5jaWzigJlzIHdlYnNpdGUgYW5kIHNlZSBmdXJ0aGVyIGRldGFpbHMgb24gdGhlIG1ha2luZyBvZiBzdWJtaXNzaW9ucyBvciByaW5nIDEzMDAgODcgODMgODcgZHVyaW5nIG5vcm1hbCBvZmZpY2UgaG91cnMuDQo8L3A+DQo8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJub3RpZmllZEFkZHJlc3NlcyI+PGEgaHJlZj0iIyI+Tm90aWZpZWQgQWRkcmVzc2VzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8Yj5ObyBkYXRhLjwvYj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQo8aDMgaWQ9Imdvb2dsZW1hcHMiPjxhIGhyZWY9IiMiPkdvb2dsZSBNYXBzPC9hPjwvaDM+DQo8ZGl2IGlkPSJtYXBfY29udGFpbmVyIj4NCiAgICA8ZGl2IGlkPSJtYXBfY2FudmFzIiBjbGFzcz0iaWZyYW1lLXJ3ZCI+DQogICAgPC9kaXY+DQo8L2Rpdj4NCg0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgd2luZG93Lm9ubG9hZCA9IGxvYWRHb29nbGVNYXBzU2NyaXB0Ow0KDQogICAgdmFyIGdlb2NvZGVyOw0KICAgIHZhciBtYXA7DQogICAgdmFyIHRpbWVvdXQgPSAzMDA7DQogICAgdmFyIHByb3BlcnRpZXMgPSBbIjMxIEV3aW5nIFN0LCBMaXNtb3JlIDI0ODAgTlNXICJdOw0KICAgIHZhciBsYXRMbmdBcnIgPSBbXTsNCg0KICAgIGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBzU2NyaXB0KCkgew0KICAgICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7DQogICAgICAgIHNjcmlwdC50eXBlID0gInRleHQvamF2YXNjcmlwdCI7DQogICAgICAgIHNjcmlwdC5zcmMgPSAiLy9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2pzP2tleT1BSXphU3lBOHliMEx6Vlh4TXZoLTNVYzZibzNULUJtbEY2WXR2bjQmY2FsbGJhY2s9bG9hZEdvb2dsZU1hcHMiOw0KICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gcmVuZGVyR29vZ2xlTWFwcygpDQogICAgew0KICAgICAgICB2YXIgbWFwT3B0aW9ucyA9IHsNCiAgICAgICAgICAgIGNlbnRlcjogbGF0TG5nQXJyWzBdLA0KICAgICAgICAgICAgem9vbTogMTYsDQogICAgICAgICAgICBtYXBUeXBlSWQ6IGdvb2dsZS5tYXBzLk1hcFR5cGVJZC5ST0FETUFQLA0KICAgICAgICAgICAgbWFwVHlwZUNvbnRyb2w6IGZhbHNlDQogICAgICAgIH0NCg0KICAgICAgICBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtYXBfY2FudmFzIiksIG1hcE9wdGlvbnMpOw0KDQogICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZERvbUxpc3RlbmVyKHdpbmRvdywgJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgdmFyIGNlbnRlciA9IG1hcC5nZXRDZW50ZXIoKTsNCiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIobWFwLCAncmVzaXplJyk7DQogICAgICAgICAgICBtYXAuc2V0Q2VudGVyKGNlbnRlcik7DQogICAgICAgIH0pOw0KDQogICAgfQ0KDQogICAgZnVuY3Rpb24gbG9hZEdvb2dsZU1hcHMoKSB7DQogICAgICAgIGdlb2NvZGVyID0gbmV3IGdvb2dsZS5tYXBzLkdlb2NvZGVyKCk7DQogICAgICAgIHZhciBub09mRmFpbGVkTG9jYXRpb25TZWFyY2ggPSAwOw0KDQogICAgICAgICQocHJvcGVydGllcykuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHsNCiAgICAgICAgICAgIHZhciBwcm9wZXJ0eUFkZHJlc3MgPSBlbGVtZW50Ow0KDQogICAgICAgICAgICAvL0dldCBnZW9jb2RlDQogICAgICAgICAgICBnZW9jb2Rlci5nZW9jb2RlKHsgJ2FkZHJlc3MnOiBwcm9wZXJ0eUFkZHJlc3MgfSwgZnVuY3Rpb24gKHJlc3VsdHMsIHN0YXR1cykgew0KICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT0spIHsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSByZXN1bHRzWzBdLmdlb21ldHJ5LmxvY2F0aW9uOw0KICAgICAgICAgICAgICAgICAgICB2YXIgbGF0TG5nID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhsb2NhdGlvbi5sYXQoKSwgbG9jYXRpb24ubG5nKCkpOw0KDQogICAgICAgICAgICAgICAgICAgIGxhdExuZ0Fyci5wdXNoKGxhdExuZyk7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYobGF0TG5nQXJyLmxlbmd0aCA9PSAxKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJHb29nbGVNYXBzKCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAvL0NyZWF0ZSBtYXJrZXIgZm9yIG1hcCBhbmQgcGxhY2UgaXQgb24gdGhlIG1hcA0KICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7DQogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogbGF0TG5nLA0KICAgICAgICAgICAgICAgICAgICAgICAgbWFwOiBtYXANCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRTdHJpbmcgPSAnPGRpdj48c3Bhbj4nICsgcHJvcGVydHlBZGRyZXNzICsgJzwvc3Bhbj48L2Rpdj4nOw0KICAgICAgICAgICAgICAgICAgICB2YXIgaW5mb3dpbmRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KHsgICAvL0NyZWF0ZSBpbmZvIHdpbmRvdw0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29udGVudFN0cmluZw0KICAgICAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXJrZXIsICdjbGljaycsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaW5mb3dpbmRvdy5vcGVuKG1hcCwgbWFya2VyKTsNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIC8vaWYgbm8gbG9jYXRpb24gZm91bmQgYnkgZ29vZ2xlIGZvciBhIHByb3BlcnR5DQogICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RhdHVzID09ICJaRVJPX1JFU1VMVFMiKSB7DQogICAgICAgICAgICAgICAgICAgIG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCsrOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCA9PSAkKHByb3BlcnRpZXMpLmxlbmd0aCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9WRVJfUVVFUllfTElNSVQpIHsNCiAgICAgICAgICAgICAgICAgICAgLy9zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgZ2V0R2VvQ29kZUZvckFkZHJlc3MoaWQsIGFkZHJlc3MpOyB9LCAodGltZW91dCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvL1JlcGxhY2VzIGdvb2dsZSBtYXBzIGNvbnRlbnQgd2l0aCBhIG5ldyBkaXYgYmxvY2sgdGhhdCBoYXMgaW5mbyBtZXNzYWdlDQogICAgZnVuY3Rpb24gcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCkgew0KICAgICAgICB2YXIgbmV3Q29udGVudCA9ICc8ZGl2IGNsYXNzPSJ1aS1hY2NvcmRpb24tY29udGVudCB1aS1oZWxwZXItcmVzZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbSI+JyArDQogICAgICAgICAgICAnPHA+Q291bGRuXCd0IGZpbmQgdGhlIHByb3BlcnR5IGFkZHJlc3MoZXMpIG9uIEdvb2dsZSBNYXBzLiA8cD4nICsNCiAgICAgICAgICAgICc8L2Rpdj4nOw0KDQogICAgICAgICQoJyNtYXBfY29udGFpbmVyJykucmVwbGFjZVdpdGgobmV3Q29udGVudCk7DQogICAgfQ0KDQo8L3NjcmlwdD4NCg0KICAgIDwvZGl2Pg0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAkLmZuLnRvZ2dsZXBhbmVscyA9IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygidWktYWNjb3JkaW9uIHVpLWFjY29yZGlvbi1pY29ucyB1aS1oZWxwZXItcmVzZXQiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoImgzIikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygidWktYWNjb3JkaW9uLWhlYWRlciB1aS1oZWxwZXItcmVzZXQgdWktc3RhdGUtZGVmYXVsdCB1aS1jb3JuZXItdG9wIHVpLWNvcm5lci1ib3R0b20iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmhvdmVyKGZ1bmN0aW9uICgpIHsgJCh0aGlzKS50b2dnbGVDbGFzcygidWktc3RhdGUtaG92ZXIiKTsgfSkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5wcmVwZW5kKCc8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXVwIj48L3NwYW4+JykNCiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGljayhmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS50b2dnbGVDbGFzcygidWktYWNjb3JkaW9uLWhlYWRlci1hY3RpdmUgdWktc3RhdGUtYWN0aXZlIHVpLXN0YXRlLWRlZmF1bHQgdWktY29ybmVyLWJvdHRvbSIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCI+IC5nbHlwaGljb24iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudG9nZ2xlQ2xhc3MoImdseXBoaWNvbi1jaGV2cm9uLXVwIGdseXBoaWNvbi1jaGV2cm9uLWRvd24iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW5kKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm5leHQoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2xpZGVUb2dnbGUoKTsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgICAgICAgICAubmV4dCgpDQogICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoInVpLWFjY29yZGlvbi1jb250ZW50IHVpLWhlbHBlci1yZXNldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYm90dG9tIikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7DQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICAkKCcjYXBwbGljYXRpb24nKS50b2dnbGVwYW5lbHMoKTsNCg0KICAgICAgICAgICAgJCgnI3Byb3BlcnRpZXMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2RldGFpbHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI3RyYWNraW5nJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNkb2N1bWVudHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI3JlbGF0ZWRBcHBsaWNhdGlvbnMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2ZlZXMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2dvb2dsZW1hcHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2NvbnRhY3RVcycpLmNsaWNrKCk7DQogICAgICAgIH0pOw0KDQogICAgICAgIC8qIFNob3dzIGFsbCB0aGUgcGFuZWxzICovDQogICAgICAgIGZ1bmN0aW9uIHNob3dBbGwoKSB7DQogICAgICAgICAgICAkKCcjYXBwbGljYXRpb24nKS5jaGlsZHJlbigiaDMiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygidWktc3RhdGUtZGVmYXVsdCIpKSB7DQogICAgICAgICAgICAgICAgICAgICQodGhpcykuY2xpY2soKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8qIEhpZGUgYWxsIHRoZSBwYW5lbHMgKi8NCiAgICAgICAgZnVuY3Rpb24gaGlkZUFsbCgpIHsNCiAgICAgICAgICAgICQoJyNhcHBsaWNhdGlvbicpLmNoaWxkcmVuKCJoMyIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCJ1aS1zdGF0ZS1hY3RpdmUiKSkgew0KICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0NCg0KICAgIDwvc2NyaXB0Pg0KDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPCEtLSAvLmNvbnRhaW5lci1mbHVpZCAtLT4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJwcmUtZm9vdGVyIGNvbnRhaW5lcl8xMiBjZiI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJncmlkXzQiPg0KICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0iYWNjZC10b2dnIj5Db250YWN0IFVzIDxpIGNsYXNzPSJmYSBmYS1jYXJldC1kb3duIj48L2k+PC9oMz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhY2NkLWNvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgICAgIDxwPkxpc21vcmUgQ2l0eSBDb3VuY2lsPGJyPkFCTjogNjAgMDgwIDkzMiA4Mzc8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPjQzIE9saXZlciBBdmVudWU8YnI+R29vbmVsbGFiYWggTlNXIDI0ODA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPlBvc3Q6IFBPIEJveCAyM0EsIExpc21vcmUgTlNXIDI0ODA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPlBob25lOiAxMzAwIDg3IDgzIDg3PGJyPkZheDogMDIgNjYgMjUwIDQwMDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHA+RW1haWw6IDxhIGhyZWY9Im1haWx0bzpjb3VuY2lsQGxpc21vcmUubnN3Lmdvdi5hdSI+PHN0cm9uZz5jb3VuY2lsQGxpc21vcmUubnN3Lmdvdi5hdTwvc3Ryb25nPjwvYT48L3A+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgaWQ9ImZvb3RlciI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXJfMTIgY2YiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdyaWRfMTIgY2Ygb3ciPg0KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iY3AiPkNvcHlyaWdodCAmY29weTsgMjAyMSBMaXNtb3JlIENpdHkgQ291bmNpbDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cubGlzbW9yZS5uc3cuZ292LmF1L3BhZ2UuYXNwP3A9RE9DLU9DVC02NC01Ny0zMCIgdGFyZ2V0PSJfcGFyZW50Ij5JbnRlcm5ldCBQcml2YWN5IFN0YXRlbWVudDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICZuYnNwOyZuYnNwOyB8ICZuYnNwOyZuYnNwOw0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5saXNtb3JlLm5zdy5nb3YuYXUvcGFnZS5hc3A/cD1ET0MtT0NULTY0LTU3LTMwIiB0YXJnZXQ9Il9wYXJlbnQiPkRpc2NsYWltZXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAmbmJzcDsmbmJzcDsgfCAmbmJzcDsmbmJzcDsNCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cubGlzbW9yZS5uc3cuZ292LmF1L2NwX3RoZW1lcy9kZWZhdWx0L3NpdGVtYXAuYXNwIiB0YXJnZXQ9Il9wYXJlbnQiPlNpdGUgTWFwPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQo8L2JvZHk+DQo8L2h0bWw+DQo=
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000136.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:45:33 GMT
      Content-Length:
      - '30256'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000141.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:45:37 GMT
      Content-Length:
      - '31278'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iTGlzbW9yZSBDaXR5IENvdW5jaWwsREEgVHJhY2tlcixBcHBsaWNhdGlvbiBUcmFja2VyLERldmVsb3BtZW50IEFwcGxpY2F0aW9uLERldmVsb3BtZW50IEFwcGxpY2F0aW9uIFRyYWNraW5nLCBEQSBFbnF1aXJ5LCBEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBFbnF1aXJ5LCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iVGhlIG9mZmljaWFsIExpc21vcmUgQ2l0eSBDb3VuY2lsIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KDQogICAgPHRpdGxlPkxpc21vcmUgQ2l0eSBDb3VuY2lsIC0gQXBwbGljYXRpb24gVHJhY2tlcjwvdGl0bGU+DQoNCiAgICA8IS0tZmF2aWNvbi0tPg0KICAgIDxsaW5rIGhyZWY9Ii9mYXZpY29uLmljbyIgcmVsPSJzaG9ydGN1dCBpY29uIiB0eXBlPSJpbWFnZS94LWljb24iPg0KDQogICAgPCEtLSBqUXVlcnkgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0xLjExLjEuanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjExLjIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvY29yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvYWNjb3JkaW9uLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS90aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC10aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBEYXRhVGFibGVzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2pxdWVyeS5kYXRhVGFibGVzLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMuYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuc2NzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gQm9vdHN0cmFwIFNCLUFkbWluLTIgUGx1Z2luIGFuZCBvdGhlciBjc3MgYW5kIGpzIGZpbGVzLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtY29tYm9ib3guanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtZGF0ZXBpY2tlci5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2pxdWVyeS5mb3JtLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LnRhYmxlc29ydGVyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWFzdGVydmlldy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21ldGlzTWVudS5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3NiLWFkbWluLTIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL2Nzcy9ib290c3RyYXAtY29tYm9ib3guY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvZGF0ZXBpY2tlcjMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVydmlldy1jdXN0b21pc2F0aW9ucy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9zYi1hZG1pbi0yLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDxsaW5rIGhyZWY9Ii9Db3VuY2lsX1RoZW1lL0xpc21vcmUvbGlzbW9yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgDQoNCiAgICA8IS0tIEhUTUw1IFNoaW0gYW5kIFJlc3BvbmQuanMgSUU4IHN1cHBvcnQgb2YgSFRNTDUgZWxlbWVudHMgYW5kIG1lZGlhIHF1ZXJpZXMgLS0+DQogICAgPCEtLSBXQVJOSU5HOiBSZXNwb25kLmpzIGRvZXNuJ3Qgd29yayBpZiB5b3UgdmlldyB0aGUgcGFnZSB2aWEgZmlsZTovLyAtLT4NCiAgICA8IS0tW2lmIGx0IElFIDldPg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL2h0bWw1c2hpdi8zLjcuMC9odG1sNXNoaXYuanMiPjwvc2NyaXB0Pg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL3Jlc3BvbmQuanMvMS40LjIvcmVzcG9uZC5taW4uanMiPjwvc2NyaXB0Pg0KICAgIDwhW2VuZGlmXS0tPg0KDQogICAgPGxpbmsgaHJlZj0naHR0cDovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9UmFsZXdheTozMDAsNDAwLDYwMCw3MDAnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPg0KICAgIDxsaW5rIGhyZWY9J2h0dHA6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PU9zd2FsZDozMDAsNDAwLDcwMCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQo8L2hlYWQ+DQoNCg0KPGJvZHkgY2xhc3M9ImNicC1zcG1lbnUtcHVzaCI+DQogICAgPGRpdiBjbGFzcz0id3IiPg0KICAgICAgICA8ZGl2IGlkPSJoZWFkZXIiPg0KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl8xMiI+DQoNCiAgICAgICAgPGgxIGlkPSJsb2dvIj48YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9kZWZhdWx0LmFzcCI+PGltZyBzcmM9Ii8vY2FuZGlkYXRlLW9mZmljZS5zMy5hbWF6b25hd3MuY29tL3NoYXJlZC9saXNtb3JlL2ltYWdlcy9sb2dvLnBuZyIgYWx0PSJMaXNtb3JlIENpdHkgQ291bmNpbCIgc3R5bGU9InBhZGRpbmctdG9wOjVweCI+PHN0cm9uZyBjbGFzcz0idmgiPkxpc21vcmUgQ2l0eSBDb3VuY2lsPC9zdHJvbmc+PC9hPjwvaDE+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0idXRpbGl0eSByaWdodCI+DQogICAgICAgICAgICA8YSBjbGFzcz0iaG9tZS1saW5rIiBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9kZWZhdWx0LmFzcCI+DQogICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vY2FuZGlkYXRlLW9mZmljZS5zMy5hbWF6b25hd3MuY29tL3NoYXJlZC9saXNtb3JlL2ltYWdlcy9ob21lLnBuZyIgYWx0PSJMaXNtb3JlIENpdHkgQ291bmNpbCI+DQogICAgICAgICAgICA8L2E+DQogICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyIj4NCiAgICAgICAgPC9kaXY+DQoNCiAgICA8L2Rpdj4NCjwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJiYW5uZXIiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmFubmVyLXRleHQgY2YiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJhbm5lci10ZXh0LWNvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzcz0ib3ciPkRBIFRyYWNraW5nIDxzcGFuPlBvcnRhbDwvc3Bhbj48L2gxPg0KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibm0iPkluZm9ybWF0aW9uIG9uIGRldmVsb3BtZW50IGFwcGxpY2F0aW9ucyBpbiB0aGUgTGlzbW9yZSBMb2NhbCBHb3Zlcm5tZW50IEFyZWEuIDwvcD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyXzEyIGludHJvIGNmIj4gICAgICAgICAgICA8IS0tIE5hdmlnYXRpb24gLS0+DQogICAgICAgICAgICA8bmF2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWRlZmF1bHQgbmF2YmFyLXN0YXRpYy10b3AiIHJvbGU9Im5hdmlnYXRpb24iIHN0eWxlPSJtYXJnaW4tYm90dG9tOiAwIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJuYXZiYXItdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIubmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5Ub2dnbGUgbmF2aWdhdGlvbjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXZiYXItYnJhbmQiIGhyZWY9IiMiPjwvYT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLWhlYWRlciAtLT4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItdG9wLWxpbmtzIG5hdmJhci1yaWdodCBoaWRkZW4teHMgaGlkZGVuLXNtIGhpZGRlbi1tZCI+DQogICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGlkPSJwcmludEljb24iIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXByaW50IiBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1kZWZhdWx0IHNpZGViYXIiIHJvbGU9Im5hdmlnYXRpb24iPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaWRlYmFyLW5hdiBuYXZiYXItY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJzaWRlLW1lbnUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb24gVHJhY2tlcjxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0Fib3V0IHRhcmdldD1fc2VsZj5XaGF0IGlzIEFwcGxpY2F0aW9uIFRyYWNrZXI/PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0Rpc2NsYWltZXIgdGFyZ2V0PV9zZWxmPkRpc2NsYWltZXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvSW5kZXggdGFyZ2V0PT5BcHBsaWNhdGlvbiBUcmFja2VyIEhvbWU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvU2VhcmNoIGlkPXNlYXJjaCB0YXJnZXQ9X3NlbGY+U2VhcmNoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9SZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPVRydWUmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIGlkPW91dHN0YW5kaW5nLWFwcHMgdGFyZ2V0PV9zZWxmPlVuZGV0ZXJtaW5lZCBBcHBsaWNhdGlvbnM8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P1JlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1UcnVlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgaWQ9ZXhoaWJpdGVkLWFwcHMgdGFyZ2V0PV9zZWxmPkFwcGxpY2F0aW9ucyBPbiBFeGhpYml0aW9uPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9ucyBTdWJtaXR0ZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTUlMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+VGhpcyBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT03JTJmMDMlMmYyMDIxJkRhdGVUbz0xMyUyZjAzJTJmMjAyMSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjAzJTJmMjAyMSZEYXRlVG89MTUlMmYwMyUyZjIwMjEmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDIlMmYyMDIxJkRhdGVUbz0yOCUyZjAyJTJmMjAyMSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIERldGVybWluZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTUlMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTclMmYwMyUyZjIwMjEmRGF0ZVRvPTEzJTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5MYXN0IFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDIlMmYyMDIxJkRhdGVUbz0yOCUyZjAyJTJmMjAyMSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uc2lkZWJhci1jb2xsYXBzZSAtLT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogQ29uc3RydWN0aW9uIENlcnRpZmljYXRlICgxMC4yMDE5LjE0MS4xKTwvaDI+DQogICAgPC9kaXY+DQogICAgPGg0PkRldGFpbGVkIGluZm9ybWF0aW9uIHJlbGF0ZWQgdG8gdGhlIGFwcGxpY2F0aW9uOjwvaDQ+DQogICAgPGJyIC8+DQogICAgPGRpdj4NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpzaG93QWxsKCk7Ij5TaG93IEFsbDwvYT4gLw0KICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OmhpZGVBbGwoKTsiPkhpZGUgQWxsPC9hPg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgaWQ9ImFwcGxpY2F0aW9uIj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJkZXRhaWxzIj48YSBocmVmPSIjIj5EZXRhaWxzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXNjcmlwdGlvbjogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+REExOS8xNDEgLSAxLzcgUGluZXZpZXcgRHJpdmUgLSBDYXJwb3J0IHdpdGggYSBCTFYgdG8gNG08L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+U3VibWl0dGVkIERhdGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDEvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gVHlwZTogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Q29uc3RydWN0aW9uIENlcnRpZmljYXRlPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InByb3BlcnRpZXMiPjxhIGhyZWY9IiMiPlByb3BlcnRpZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjEvNyBQaW5ldmlldyBEciwgR29vbmVsbGFiYWggMjQ4MCBOU1cgIChTUCAzODYzMCBsb3QgMSk8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0icGVvcGxlIj48YSBocmVmPSIjIj5QZW9wbGU8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhbnQ6IEZyYW5jZXMgTGxveWQNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhbnQ6IE5ldmlsbGUgTGxveWQNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCdWlsZGVyOiAgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJpbmNpcGFsIENlcnRpZnlpbmcgQXV0aG9yaXR5OiAgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJvZmZpY2VyIj48YSBocmVmPSIjIj5PZmZpY2VyPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EYXZpZCBMZWFyZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJkZWNpc2lvbiI+PGEgaHJlZj0iIyI+RGVjaXNpb248L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFN0YXR1czogRGV0ZXJtaW5lZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGV0ZXJtaW5hdGlvbiBEYXRlOg0KMTcvMDcvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGV0ZXJtaW5hdGlvbiBUeXBlOiBBcHByb3ZlZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJlc3RpbWF0ZWRDb3N0Ij48YSBocmVmPSIjIj5Fc3RpbWF0ZWQgQ29zdDwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+JDUsNTM1LjAwPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InRyYWNraW5nIj48YSBocmVmPSIjIj5UcmFja2luZzwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi13cmFwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnN3aXBlIHRhYmxlIHRvIHRoZSBsZWZ0IHRvIHJldmVhbCBtb3JlIGRhdGE8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1ib3JkZXJlZCBuby1mb290ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkRlc2NyaXB0aW9uPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNvbW1lbmNlZCBEYXRlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EdWUgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21wbGV0ZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BcHBsaWNhdGlvbiBSZWNlaXZlZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowMS8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjAxLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA2LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+U2l0ZS9BZHZpY2UgSW5zcGVjdGlvbjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowNi8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE2LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE3LzA3LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+UENBIENvbnRyYWN0IEdlbmVyYXRlZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowNS8wNi8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA1LzA2LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA1LzA2LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Q2VydGlmaWNhdGUgSXNzdWVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE3LzA3LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTcvMDcvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTcvMDcvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5QQ0EgQ29udHJhY3QgUmVjZWl2ZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTcvMTAvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxOS8xMC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNy8xMC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlBDQSBDb250cmFjdCBTaWduZWQvUG9zdGVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIzLzEwLzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjMvMTAvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjMvMTAvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Gb290aW5ncyBJbnNwZWN0aW9uPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIzLzEwLzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjQvMTAvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjQvMTAvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGgzIGlkPSJyZWxhdGVkQXBwbGljYXRpb25zIj48YSBocmVmPSIjIj5SZWxhdGVkIEFwcGxpY2F0aW9uczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi13cmFwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnN3aXBlIHRhYmxlIHRvIHRoZSBsZWZ0IHRvIHJldmVhbCBtb3JlIGRhdGE8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1ib3JkZXJlZCBuby1mb290ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFwcGxpY2F0aW9uIFR5cGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+QXBwbGljYXRpb24gTnVtYmVyPC90aD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly90cmFja2VyLmxpc21vcmUubnN3Lmdvdi5hdS9BcHBsaWNhdGlvbi9BcHBsaWNhdGlvbkRldGFpbHMvMDA1LjIwMTkuMDAwMDAxNDEuMDAxLyI+NS4yMDE5LjE0MS4xPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCg0KICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KDQoNCg0KDQoNCjxoMyBpZD0iZG9jdW1lbnRzIj48YSBocmVmPSIjIj5Eb2N1bWVudHM8L2E+PC9oMz4NCjxkaXY+DQoNCiAgICAgICAgPGI+Tm8gZGF0YS48L2I+DQo8L2Rpdj4NCg0KDQogICAgICAgICAgICA8aDMgaWQ9ImNvbnRhY3RVcyI+PGEgaHJlZj0iIyI+Q29udGFjdCBVczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PHA+DQpTaG91bGQgeW91IHdpc2ggdG8gY29udGFjdCBjb3VuY2lsIHRvIG1ha2UgZW5xdWlyaWVzIHJlZ2FyZGluZyBhcHBsaWNhdGlvbnMgZGlzcGxheWVkIG9uIHRoZSB3ZWJzaXRlLCBwbGVhc2UgY29udGFjdCBlaXRoZXIgYnkgZW1haWwgPGEgc3R5bGU9ImNvbG9yOiBibHVlIiBocmVmPSJtYWlsdG86Y291bmNpbEBsaXNtb3JlLm5zdy5nb3YuYXU/c3ViamVjdD1TdWJtaXNzaW9uIGZvciBhcHBsaWNhdGlvbiAgKDEwLjIwMTkuMTQxLjEpIj5jb3VuY2lsQGxpc21vcmUubnN3Lmdvdi5hdTwvYT4sIHBob25lIDEzMDAgODcgODMgODcgZHVyaW5nIG5vcm1hbCBvZmZpY2UgaG91cnMgb3IgaW4gd3JpdGluZyB0byBQTyBCb3ggMjNBLCBMaXNtb3JlIE5TVyAyNDgwLiBBbGwgY29ycmVzcG9uZGVuY2Ugc2hvdWxkIGJlIGFkZHJlc3NlZCB0byB0aGUgR2VuZXJhbCBNYW5hZ2VyIGFuZCBxdW90ZSB0aGUgcmVsZXZhbnQgYXBwbGljYXRpb24gcmVmZXJlbmNlIG51bWJlci4NCjwvcD4NCjxwPg0KSWYgdGhlIGFwcGxpY2F0aW9uIGRpc3BsYXllZCBvbiB0aGlzIHdlYnNpdGUgaXMgdW5kZXIgY3VycmVudCBuZWlnaGJvdXIgbm90aWZpY2F0aW9uLCBwcm9wZXJ0aWVzIGNvbnNpZGVyZWQgYnkgQ291bmNpbCB0byBwb3NzaWJseSBiZSBkZXRyaW1lbnRhbGx5IGFmZmVjdGVkIHdpbGwgYmUgY29udGFjdGVkIGluZGl2aWR1YWxseSBhbmQgYWR2aXNlZCBvZiB0aGVpciBzdWJtaXNzaW9uIG9wcG9ydHVuaXRpZXMgdW5kZXIgQ2hhcHRlciAxMCBMaXNtb3JlIERldmVsb3BtZW50IENvbnRyb2wgUGxhbiAyMDEyLg0KPC9wPg0KPHA+DQo8YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9jcF90aGVtZXMvZGVmYXVsdC9wYWdlLmFzcD9wPURPQy1MSFItODMtNzYtNTgiICB0YXJnZXQ9Il9ibGFuayI+Q0xJQ0sgSEVSRTwvYT4gdG8gdmlzaXQgQ291bmNpbOKAmXMgd2Vic2l0ZSBhbmQgc2VlIGZ1cnRoZXIgZGV0YWlscyBvbiB0aGUgbWFraW5nIG9mIHN1Ym1pc3Npb25zIG9yIHJpbmcgMTMwMCA4NyA4MyA4NyBkdXJpbmcgbm9ybWFsIG9mZmljZSBob3Vycy4NCjwvcD4NCjwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9Im5vdGlmaWVkQWRkcmVzc2VzIj48YSBocmVmPSIjIj5Ob3RpZmllZCBBZGRyZXNzZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxiPk5vIGRhdGEuPC9iPg0KICAgICAgICAgICAgPC9kaXY+DQoNCjxoMyBpZD0iZ29vZ2xlbWFwcyI+PGEgaHJlZj0iIyI+R29vZ2xlIE1hcHM8L2E+PC9oMz4NCjxkaXYgaWQ9Im1hcF9jb250YWluZXIiPg0KICAgIDxkaXYgaWQ9Im1hcF9jYW52YXMiIGNsYXNzPSJpZnJhbWUtcndkIj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KDQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoNCiAgICB3aW5kb3cub25sb2FkID0gbG9hZEdvb2dsZU1hcHNTY3JpcHQ7DQoNCiAgICB2YXIgZ2VvY29kZXI7DQogICAgdmFyIG1hcDsNCiAgICB2YXIgdGltZW91dCA9IDMwMDsNCiAgICB2YXIgcHJvcGVydGllcyA9IFsiMS83IFBpbmV2aWV3IERyLCBHb29uZWxsYWJhaCAyNDgwIE5TVyAiXTsNCiAgICB2YXIgbGF0TG5nQXJyID0gW107DQoNCiAgICBmdW5jdGlvbiBsb2FkR29vZ2xlTWFwc1NjcmlwdCgpIHsNCiAgICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOw0KICAgICAgICBzY3JpcHQudHlwZSA9ICJ0ZXh0L2phdmFzY3JpcHQiOw0KICAgICAgICBzY3JpcHQuc3JjID0gIi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9qcz9rZXk9QUl6YVN5QTh5YjBMelZYeE12aC0zVWM2Ym8zVC1CbWxGNll0dm40JmNhbGxiYWNrPWxvYWRHb29nbGVNYXBzIjsNCiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHJlbmRlckdvb2dsZU1hcHMoKQ0KICAgIHsNCiAgICAgICAgdmFyIG1hcE9wdGlvbnMgPSB7DQogICAgICAgICAgICBjZW50ZXI6IGxhdExuZ0FyclswXSwNCiAgICAgICAgICAgIHpvb206IDE2LA0KICAgICAgICAgICAgbWFwVHlwZUlkOiBnb29nbGUubWFwcy5NYXBUeXBlSWQuUk9BRE1BUCwNCiAgICAgICAgICAgIG1hcFR5cGVDb250cm9sOiBmYWxzZQ0KICAgICAgICB9DQoNCiAgICAgICAgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWFwX2NhbnZhcyIpLCBtYXBPcHRpb25zKTsNCg0KICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGREb21MaXN0ZW5lcih3aW5kb3csICdyZXNpemUnLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHZhciBjZW50ZXIgPSBtYXAuZ2V0Q2VudGVyKCk7DQogICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKG1hcCwgJ3Jlc2l6ZScpOw0KICAgICAgICAgICAgbWFwLnNldENlbnRlcihjZW50ZXIpOw0KICAgICAgICB9KTsNCg0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBzKCkgew0KICAgICAgICBnZW9jb2RlciA9IG5ldyBnb29nbGUubWFwcy5HZW9jb2RlcigpOw0KICAgICAgICB2YXIgbm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoID0gMDsNCg0KICAgICAgICAkKHByb3BlcnRpZXMpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7DQogICAgICAgICAgICB2YXIgcHJvcGVydHlBZGRyZXNzID0gZWxlbWVudDsNCg0KICAgICAgICAgICAgLy9HZXQgZ2VvY29kZQ0KICAgICAgICAgICAgZ2VvY29kZXIuZ2VvY29kZSh7ICdhZGRyZXNzJzogcHJvcGVydHlBZGRyZXNzIH0sIGZ1bmN0aW9uIChyZXN1bHRzLCBzdGF0dXMpIHsNCiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9LKSB7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gcmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbjsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxhdExuZyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobG9jYXRpb24ubGF0KCksIGxvY2F0aW9uLmxuZygpKTsNCg0KICAgICAgICAgICAgICAgICAgICBsYXRMbmdBcnIucHVzaChsYXRMbmcpOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKGxhdExuZ0Fyci5sZW5ndGggPT0gMSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyR29vZ2xlTWFwcygpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgLy9DcmVhdGUgbWFya2VyIGZvciBtYXAgYW5kIHBsYWNlIGl0IG9uIHRoZSBtYXANCiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoew0KICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGxhdExuZywNCiAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogbWFwDQogICAgICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50U3RyaW5nID0gJzxkaXY+PHNwYW4+JyArIHByb3BlcnR5QWRkcmVzcyArICc8L3NwYW4+PC9kaXY+JzsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGluZm93aW5kb3cgPSBuZXcgZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdyh7ICAgLy9DcmVhdGUgaW5mbyB3aW5kb3cNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRTdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFya2VyLCAnY2xpY2snLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGluZm93aW5kb3cub3BlbihtYXAsIG1hcmtlcik7DQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAvL2lmIG5vIGxvY2F0aW9uIGZvdW5kIGJ5IGdvb2dsZSBmb3IgYSBwcm9wZXJ0eQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN0YXR1cyA9PSAiWkVST19SRVNVTFRTIikgew0KICAgICAgICAgICAgICAgICAgICBub09mRmFpbGVkTG9jYXRpb25TZWFyY2grKzsNCg0KICAgICAgICAgICAgICAgICAgICBpZihub09mRmFpbGVkTG9jYXRpb25TZWFyY2ggPT0gJChwcm9wZXJ0aWVzKS5sZW5ndGgpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VHb29nbGVNYXBzQ29udGVudCgpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PVkVSX1FVRVJZX0xJTUlUKSB7DQogICAgICAgICAgICAgICAgICAgIC8vc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IGdldEdlb0NvZGVGb3JBZGRyZXNzKGlkLCBhZGRyZXNzKTsgfSwgKHRpbWVvdXQpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgLy9SZXBsYWNlcyBnb29nbGUgbWFwcyBjb250ZW50IHdpdGggYSBuZXcgZGl2IGJsb2NrIHRoYXQgaGFzIGluZm8gbWVzc2FnZQ0KICAgIGZ1bmN0aW9uIHJlcGxhY2VHb29nbGVNYXBzQ29udGVudCgpIHsNCiAgICAgICAgdmFyIG5ld0NvbnRlbnQgPSAnPGRpdiBjbGFzcz0idWktYWNjb3JkaW9uLWNvbnRlbnQgdWktaGVscGVyLXJlc2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1ib3R0b20iPicgKw0KICAgICAgICAgICAgJzxwPkNvdWxkblwndCBmaW5kIHRoZSBwcm9wZXJ0eSBhZGRyZXNzKGVzKSBvbiBHb29nbGUgTWFwcy4gPHA+JyArDQogICAgICAgICAgICAnPC9kaXY+JzsNCg0KICAgICAgICAkKCcjbWFwX2NvbnRhaW5lcicpLnJlcGxhY2VXaXRoKG5ld0NvbnRlbnQpOw0KICAgIH0NCg0KPC9zY3JpcHQ+DQoNCiAgICA8L2Rpdj4NCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoNCiAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgJC5mbi50b2dnbGVwYW5lbHMgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoInVpLWFjY29yZGlvbiB1aS1hY2NvcmRpb24taWNvbnMgdWktaGVscGVyLXJlc2V0IikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCJoMyIpDQogICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoInVpLWFjY29yZGlvbi1oZWFkZXIgdWktaGVscGVyLXJlc2V0IHVpLXN0YXRlLWRlZmF1bHQgdWktY29ybmVyLXRvcCB1aS1jb3JuZXItYm90dG9tIikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5ob3ZlcihmdW5jdGlvbiAoKSB7ICQodGhpcykudG9nZ2xlQ2xhc3MoInVpLXN0YXRlLWhvdmVyIik7IH0pDQogICAgICAgICAgICAgICAgICAgICAgICAucHJlcGVuZCgnPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cCI+PC9zcGFuPicpDQogICAgICAgICAgICAgICAgICAgICAgICAuY2xpY2soZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykudG9nZ2xlQ2xhc3MoInVpLWFjY29yZGlvbi1oZWFkZXItYWN0aXZlIHVpLXN0YXRlLWFjdGl2ZSB1aS1zdGF0ZS1kZWZhdWx0IHVpLWNvcm5lci1ib3R0b20iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgiPiAuZ2x5cGhpY29uIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRvZ2dsZUNsYXNzKCJnbHlwaGljb24tY2hldnJvbi11cCBnbHlwaGljb24tY2hldnJvbi1kb3duIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVuZCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5uZXh0KCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWRlVG9nZ2xlKCk7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgICAgICAgICAgICAgLm5leHQoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCJ1aS1hY2NvcmRpb24tY29udGVudCB1aS1oZWxwZXItcmVzZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbSIpDQogICAgICAgICAgICAgICAgICAgICAgICAuaGlkZSgpOw0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykudG9nZ2xlcGFuZWxzKCk7DQoNCiAgICAgICAgICAgICQoJyNwcm9wZXJ0aWVzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNkZXRhaWxzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyN0cmFja2luZycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZG9jdW1lbnRzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNyZWxhdGVkQXBwbGljYXRpb25zJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNmZWVzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNnb29nbGVtYXBzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNjb250YWN0VXMnKS5jbGljaygpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAvKiBTaG93cyBhbGwgdGhlIHBhbmVscyAqLw0KICAgICAgICBmdW5jdGlvbiBzaG93QWxsKCkgew0KICAgICAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykuY2hpbGRyZW4oImgzIikuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWRlZmF1bHQiKSkgew0KICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0NCg0KICAgICAgICAvKiBIaWRlIGFsbCB0aGUgcGFuZWxzICovDQogICAgICAgIGZ1bmN0aW9uIGhpZGVBbGwoKSB7DQogICAgICAgICAgICAkKCcjYXBwbGljYXRpb24nKS5jaGlsZHJlbigiaDMiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygidWktc3RhdGUtYWN0aXZlIikpIHsNCiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljaygpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9DQoNCiAgICA8L3NjcmlwdD4NCg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwhLS0gLy5jb250YWluZXItZmx1aWQgLS0+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0icHJlLWZvb3RlciBjb250YWluZXJfMTIgY2YiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ3JpZF80Ij4NCiAgICAgICAgICAgICAgICA8aDMgY2xhc3M9ImFjY2QtdG9nZyI+Q29udGFjdCBVcyA8aSBjbGFzcz0iZmEgZmEtY2FyZXQtZG93biI+PC9pPjwvaDM+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWNjZC1jb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICA8cD5MaXNtb3JlIENpdHkgQ291bmNpbDxicj5BQk46IDYwIDA4MCA5MzIgODM3PC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD40MyBPbGl2ZXIgQXZlbnVlPGJyPkdvb25lbGxhYmFoIE5TVyAyNDgwPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD5Qb3N0OiBQTyBCb3ggMjNBLCBMaXNtb3JlIE5TVyAyNDgwPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD5QaG9uZTogMTMwMCA4NyA4MyA4Nzxicj5GYXg6IDAyIDY2IDI1MCA0MDA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPkVtYWlsOiA8YSBocmVmPSJtYWlsdG86Y291bmNpbEBsaXNtb3JlLm5zdy5nb3YuYXUiPjxzdHJvbmc+Y291bmNpbEBsaXNtb3JlLm5zdy5nb3YuYXU8L3N0cm9uZz48L2E+PC9wPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJmb290ZXIiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyXzEyIGNmIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJncmlkXzEyIGNmIG93Ij4NCiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImNwIj5Db3B5cmlnaHQgJmNvcHk7IDIwMjEgTGlzbW9yZSBDaXR5IENvdW5jaWw8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9wYWdlLmFzcD9wPURPQy1PQ1QtNjQtNTctMzAiIHRhcmdldD0iX3BhcmVudCI+SW50ZXJuZXQgUHJpdmFjeSBTdGF0ZW1lbnQ8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAmbmJzcDsmbmJzcDsgfCAmbmJzcDsmbmJzcDsNCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cubGlzbW9yZS5uc3cuZ292LmF1L3BhZ2UuYXNwP3A9RE9DLU9DVC02NC01Ny0zMCIgdGFyZ2V0PSJfcGFyZW50Ij5EaXNjbGFpbWVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7Jm5ic3A7IHwgJm5ic3A7Jm5ic3A7DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9jcF90aGVtZXMvZGVmYXVsdC9zaXRlbWFwLmFzcCIgdGFyZ2V0PSJfcGFyZW50Ij5TaXRlIE1hcDwvYT4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KPC9ib2R5Pg0KPC9odG1sPg0K
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000141.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:45:44 GMT
      Content-Length:
      - '31143'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iTGlzbW9yZSBDaXR5IENvdW5jaWwsREEgVHJhY2tlcixBcHBsaWNhdGlvbiBUcmFja2VyLERldmVsb3BtZW50IEFwcGxpY2F0aW9uLERldmVsb3BtZW50IEFwcGxpY2F0aW9uIFRyYWNraW5nLCBEQSBFbnF1aXJ5LCBEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBFbnF1aXJ5LCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iVGhlIG9mZmljaWFsIExpc21vcmUgQ2l0eSBDb3VuY2lsIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KDQogICAgPHRpdGxlPkxpc21vcmUgQ2l0eSBDb3VuY2lsIC0gQXBwbGljYXRpb24gVHJhY2tlcjwvdGl0bGU+DQoNCiAgICA8IS0tZmF2aWNvbi0tPg0KICAgIDxsaW5rIGhyZWY9Ii9mYXZpY29uLmljbyIgcmVsPSJzaG9ydGN1dCBpY29uIiB0eXBlPSJpbWFnZS94LWljb24iPg0KDQogICAgPCEtLSBqUXVlcnkgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0xLjExLjEuanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjExLjIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvY29yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvYWNjb3JkaW9uLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS90aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC10aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBEYXRhVGFibGVzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2pxdWVyeS5kYXRhVGFibGVzLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMuYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuc2NzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gQm9vdHN0cmFwIFNCLUFkbWluLTIgUGx1Z2luIGFuZCBvdGhlciBjc3MgYW5kIGpzIGZpbGVzLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtY29tYm9ib3guanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtZGF0ZXBpY2tlci5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2pxdWVyeS5mb3JtLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LnRhYmxlc29ydGVyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWFzdGVydmlldy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21ldGlzTWVudS5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3NiLWFkbWluLTIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL2Nzcy9ib290c3RyYXAtY29tYm9ib3guY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvZGF0ZXBpY2tlcjMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVydmlldy1jdXN0b21pc2F0aW9ucy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9zYi1hZG1pbi0yLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDxsaW5rIGhyZWY9Ii9Db3VuY2lsX1RoZW1lL0xpc21vcmUvbGlzbW9yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgDQoNCiAgICA8IS0tIEhUTUw1IFNoaW0gYW5kIFJlc3BvbmQuanMgSUU4IHN1cHBvcnQgb2YgSFRNTDUgZWxlbWVudHMgYW5kIG1lZGlhIHF1ZXJpZXMgLS0+DQogICAgPCEtLSBXQVJOSU5HOiBSZXNwb25kLmpzIGRvZXNuJ3Qgd29yayBpZiB5b3UgdmlldyB0aGUgcGFnZSB2aWEgZmlsZTovLyAtLT4NCiAgICA8IS0tW2lmIGx0IElFIDldPg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL2h0bWw1c2hpdi8zLjcuMC9odG1sNXNoaXYuanMiPjwvc2NyaXB0Pg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL3Jlc3BvbmQuanMvMS40LjIvcmVzcG9uZC5taW4uanMiPjwvc2NyaXB0Pg0KICAgIDwhW2VuZGlmXS0tPg0KDQogICAgPGxpbmsgaHJlZj0naHR0cDovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9UmFsZXdheTozMDAsNDAwLDYwMCw3MDAnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPg0KICAgIDxsaW5rIGhyZWY9J2h0dHA6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PU9zd2FsZDozMDAsNDAwLDcwMCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQo8L2hlYWQ+DQoNCg0KPGJvZHkgY2xhc3M9ImNicC1zcG1lbnUtcHVzaCI+DQogICAgPGRpdiBjbGFzcz0id3IiPg0KICAgICAgICA8ZGl2IGlkPSJoZWFkZXIiPg0KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl8xMiI+DQoNCiAgICAgICAgPGgxIGlkPSJsb2dvIj48YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9kZWZhdWx0LmFzcCI+PGltZyBzcmM9Ii8vY2FuZGlkYXRlLW9mZmljZS5zMy5hbWF6b25hd3MuY29tL3NoYXJlZC9saXNtb3JlL2ltYWdlcy9sb2dvLnBuZyIgYWx0PSJMaXNtb3JlIENpdHkgQ291bmNpbCIgc3R5bGU9InBhZGRpbmctdG9wOjVweCI+PHN0cm9uZyBjbGFzcz0idmgiPkxpc21vcmUgQ2l0eSBDb3VuY2lsPC9zdHJvbmc+PC9hPjwvaDE+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0idXRpbGl0eSByaWdodCI+DQogICAgICAgICAgICA8YSBjbGFzcz0iaG9tZS1saW5rIiBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9kZWZhdWx0LmFzcCI+DQogICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vY2FuZGlkYXRlLW9mZmljZS5zMy5hbWF6b25hd3MuY29tL3NoYXJlZC9saXNtb3JlL2ltYWdlcy9ob21lLnBuZyIgYWx0PSJMaXNtb3JlIENpdHkgQ291bmNpbCI+DQogICAgICAgICAgICA8L2E+DQogICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyIj4NCiAgICAgICAgPC9kaXY+DQoNCiAgICA8L2Rpdj4NCjwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJiYW5uZXIiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmFubmVyLXRleHQgY2YiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJhbm5lci10ZXh0LWNvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzcz0ib3ciPkRBIFRyYWNraW5nIDxzcGFuPlBvcnRhbDwvc3Bhbj48L2gxPg0KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibm0iPkluZm9ybWF0aW9uIG9uIGRldmVsb3BtZW50IGFwcGxpY2F0aW9ucyBpbiB0aGUgTGlzbW9yZSBMb2NhbCBHb3Zlcm5tZW50IEFyZWEuIDwvcD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyXzEyIGludHJvIGNmIj4gICAgICAgICAgICA8IS0tIE5hdmlnYXRpb24gLS0+DQogICAgICAgICAgICA8bmF2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWRlZmF1bHQgbmF2YmFyLXN0YXRpYy10b3AiIHJvbGU9Im5hdmlnYXRpb24iIHN0eWxlPSJtYXJnaW4tYm90dG9tOiAwIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJuYXZiYXItdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIubmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5Ub2dnbGUgbmF2aWdhdGlvbjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXZiYXItYnJhbmQiIGhyZWY9IiMiPjwvYT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLWhlYWRlciAtLT4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItdG9wLWxpbmtzIG5hdmJhci1yaWdodCBoaWRkZW4teHMgaGlkZGVuLXNtIGhpZGRlbi1tZCI+DQogICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGlkPSJwcmludEljb24iIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXByaW50IiBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1kZWZhdWx0IHNpZGViYXIiIHJvbGU9Im5hdmlnYXRpb24iPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaWRlYmFyLW5hdiBuYXZiYXItY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJzaWRlLW1lbnUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb24gVHJhY2tlcjxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0Fib3V0IHRhcmdldD1fc2VsZj5XaGF0IGlzIEFwcGxpY2F0aW9uIFRyYWNrZXI/PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0Rpc2NsYWltZXIgdGFyZ2V0PV9zZWxmPkRpc2NsYWltZXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvSW5kZXggdGFyZ2V0PT5BcHBsaWNhdGlvbiBUcmFja2VyIEhvbWU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvU2VhcmNoIGlkPXNlYXJjaCB0YXJnZXQ9X3NlbGY+U2VhcmNoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9SZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPVRydWUmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIGlkPW91dHN0YW5kaW5nLWFwcHMgdGFyZ2V0PV9zZWxmPlVuZGV0ZXJtaW5lZCBBcHBsaWNhdGlvbnM8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P1JlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1UcnVlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgaWQ9ZXhoaWJpdGVkLWFwcHMgdGFyZ2V0PV9zZWxmPkFwcGxpY2F0aW9ucyBPbiBFeGhpYml0aW9uPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9ucyBTdWJtaXR0ZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTUlMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+VGhpcyBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT03JTJmMDMlMmYyMDIxJkRhdGVUbz0xMyUyZjAzJTJmMjAyMSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjAzJTJmMjAyMSZEYXRlVG89MTUlMmYwMyUyZjIwMjEmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDIlMmYyMDIxJkRhdGVUbz0yOCUyZjAyJTJmMjAyMSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIERldGVybWluZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTUlMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTclMmYwMyUyZjIwMjEmRGF0ZVRvPTEzJTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5MYXN0IFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDIlMmYyMDIxJkRhdGVUbz0yOCUyZjAyJTJmMjAyMSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uc2lkZWJhci1jb2xsYXBzZSAtLT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gKDUuMjAxOS4xNDEuMSk8L2gyPg0KICAgIDwvZGl2Pg0KICAgIDxoND5EZXRhaWxlZCBpbmZvcm1hdGlvbiByZWxhdGVkIHRvIHRoZSBhcHBsaWNhdGlvbjo8L2g0Pg0KICAgIDxiciAvPg0KICAgIDxkaXY+DQogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6c2hvd0FsbCgpOyI+U2hvdyBBbGw8L2E+IC8NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpoaWRlQWxsKCk7Ij5IaWRlIEFsbDwvYT4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGlkPSJhcHBsaWNhdGlvbiI+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZGV0YWlscyI+PGEgaHJlZj0iIyI+RGV0YWlsczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGVzY3JpcHRpb246IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRBMTkvMTQxIC0gMS83IFBpbmV2aWV3IERyaXZlIC0gQ2FycG9ydCB3aXRoIGEgQkxWIHRvIDRtPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlN1Ym1pdHRlZCBEYXRlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjAxLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFR5cGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldmVsb3BtZW50IEFwcGxpY2F0aW9uPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InByb3BlcnRpZXMiPjxhIGhyZWY9IiMiPlByb3BlcnRpZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjEvNyBQaW5ldmlldyBEciwgR29vbmVsbGFiYWggMjQ4MCBOU1cgIChTUCAzODYzMCBsb3QgMSk8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0icGVvcGxlIj48YSBocmVmPSIjIj5QZW9wbGU8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhbnQ6IEZyYW5jZXMgTGxveWQNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhbnQ6IE5ldmlsbGUgTGxveWQNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCdWlsZGVyOiAgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJpbmNpcGFsIENlcnRpZnlpbmcgQXV0aG9yaXR5OiAgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJvZmZpY2VyIj48YSBocmVmPSIjIj5PZmZpY2VyPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EYXZpZCBMZWFyZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJkZWNpc2lvbiI+PGEgaHJlZj0iIyI+RGVjaXNpb248L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFN0YXR1czogRGV0ZXJtaW5lZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGV0ZXJtaW5hdGlvbiBEYXRlOg0KMTcvMDcvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGV0ZXJtaW5hdGlvbiBUeXBlOiBDb25kaXRpb25hbCBDb25zZW50IC0gQ291bmNpbCBTdGFmZjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJlc3RpbWF0ZWRDb3N0Ij48YSBocmVmPSIjIj5Fc3RpbWF0ZWQgQ29zdDwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+JDUsNTM1LjAwPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InRyYWNraW5nIj48YSBocmVmPSIjIj5UcmFja2luZzwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi13cmFwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnN3aXBlIHRhYmxlIHRvIHRoZSBsZWZ0IHRvIHJldmVhbCBtb3JlIGRhdGE8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1ib3JkZXJlZCBuby1mb290ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkRlc2NyaXB0aW9uPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNvbW1lbmNlZCBEYXRlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EdWUgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21wbGV0ZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BcHBsaWNhdGlvbiBSZWNlaXZlZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowMS8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjAxLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA2LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+U2l0ZSBWaXNpdC9Jbml0aWFsIFJldmlldzwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowNi8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI3LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA1LzA2LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QWRqb2luaW5nIE93bmVyIE5vdGlmaWNhdGlvbjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowNi8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIwLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIwLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Q29uc2VudCBOb3RpY2UgSXNzdWVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE3LzA3LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTcvMDcvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTcvMDcvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGgzIGlkPSJyZWxhdGVkQXBwbGljYXRpb25zIj48YSBocmVmPSIjIj5SZWxhdGVkIEFwcGxpY2F0aW9uczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi13cmFwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnN3aXBlIHRhYmxlIHRvIHRoZSBsZWZ0IHRvIHJldmVhbCBtb3JlIGRhdGE8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1ib3JkZXJlZCBuby1mb290ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFwcGxpY2F0aW9uIFR5cGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+QXBwbGljYXRpb24gTnVtYmVyPC90aD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29uc3RydWN0aW9uIENlcnRpZmljYXRlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vdHJhY2tlci5saXNtb3JlLm5zdy5nb3YuYXUvQXBwbGljYXRpb24vQXBwbGljYXRpb25EZXRhaWxzLzAxMC4yMDE5LjAwMDAwMTQxLjAwMS8iPjEwLjIwMTkuMTQxLjE8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQoNCg0KDQoNCg0KPGgzIGlkPSJkb2N1bWVudHMiPjxhIGhyZWY9IiMiPkRvY3VtZW50czwvYT48L2gzPg0KPGRpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLXdyYXAiPg0KICAgICAgICAgICAgPHNwYW4+c3dpcGUgdGFibGUgdG8gdGhlIGxlZnQgdG8gcmV2ZWFsIG1vcmUgZGF0YTwvc3Bhbj4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWFycm93LXJpZ2h0IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9zcGFuPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBpZD0iZG9jLWNvdW50Ij5Ub3RhbCBudW1iZXIgb2YgZG9jdW1lbnRzOiAxPC9kaXY+DQogICAgPHRhYmxlIGlkPSJkb2MtdGFibGUiIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG5vLWZvb3RlciI+DQogICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICA8dGg+UmVjb3JkIE51bWJlcjwvdGg+DQogICAgICAgICAgICAgICAgPHRoPkRlc2NyaXB0aW9uPC90aD4NCiAgICAgICAgICAgICAgICA8dGg+RG9jdW1lbnQgVHlwZTwvdGg+DQogICAgICAgICAgICAgICAgPHRoPlNpemU8L3RoPg0KICAgICAgICAgICAgICAgIDx0aD5WaWV3IExpbms8L3RoPg0KICAgICAgICAgICAgPC90cj4NCiAgICAgICAgPC90aGVhZD4NCiAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QUQxOS8xNDE2ODwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gQ29uc2VudCBOb3RpY2UgLSAxLzcgUGluZXZpZXcgRHJpdmUgR09PTkVMTEFCQUggMjQ4MDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+UERGPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDAuMjAgTUINCg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vdHJhY2tlci5saXNtb3JlLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PUJsV3psR3R3UEV3PSIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgPC90Ym9keT4NCiAgICA8L3RhYmxlPg0KPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGgzIGlkPSJjb250YWN0VXMiPjxhIGhyZWY9IiMiPkNvbnRhY3QgVXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxwPg0KU2hvdWxkIHlvdSB3aXNoIHRvIGNvbnRhY3QgY291bmNpbCB0byBtYWtlIGVucXVpcmllcyByZWdhcmRpbmcgYXBwbGljYXRpb25zIGRpc3BsYXllZCBvbiB0aGUgd2Vic2l0ZSwgcGxlYXNlIGNvbnRhY3QgZWl0aGVyIGJ5IGVtYWlsIDxhIHN0eWxlPSJjb2xvcjogYmx1ZSIgaHJlZj0ibWFpbHRvOmNvdW5jaWxAbGlzbW9yZS5uc3cuZ292LmF1P3N1YmplY3Q9U3VibWlzc2lvbiBmb3IgYXBwbGljYXRpb24gICg1LjIwMTkuMTQxLjEpIj5jb3VuY2lsQGxpc21vcmUubnN3Lmdvdi5hdTwvYT4sIHBob25lIDEzMDAgODcgODMgODcgZHVyaW5nIG5vcm1hbCBvZmZpY2UgaG91cnMgb3IgaW4gd3JpdGluZyB0byBQTyBCb3ggMjNBLCBMaXNtb3JlIE5TVyAyNDgwLiBBbGwgY29ycmVzcG9uZGVuY2Ugc2hvdWxkIGJlIGFkZHJlc3NlZCB0byB0aGUgR2VuZXJhbCBNYW5hZ2VyIGFuZCBxdW90ZSB0aGUgcmVsZXZhbnQgYXBwbGljYXRpb24gcmVmZXJlbmNlIG51bWJlci4NCjwvcD4NCjxwPg0KSWYgdGhlIGFwcGxpY2F0aW9uIGRpc3BsYXllZCBvbiB0aGlzIHdlYnNpdGUgaXMgdW5kZXIgY3VycmVudCBuZWlnaGJvdXIgbm90aWZpY2F0aW9uLCBwcm9wZXJ0aWVzIGNvbnNpZGVyZWQgYnkgQ291bmNpbCB0byBwb3NzaWJseSBiZSBkZXRyaW1lbnRhbGx5IGFmZmVjdGVkIHdpbGwgYmUgY29udGFjdGVkIGluZGl2aWR1YWxseSBhbmQgYWR2aXNlZCBvZiB0aGVpciBzdWJtaXNzaW9uIG9wcG9ydHVuaXRpZXMgdW5kZXIgQ2hhcHRlciAxMCBMaXNtb3JlIERldmVsb3BtZW50IENvbnRyb2wgUGxhbiAyMDEyLg0KPC9wPg0KPHA+DQo8YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9jcF90aGVtZXMvZGVmYXVsdC9wYWdlLmFzcD9wPURPQy1MSFItODMtNzYtNTgiICB0YXJnZXQ9Il9ibGFuayI+Q0xJQ0sgSEVSRTwvYT4gdG8gdmlzaXQgQ291bmNpbOKAmXMgd2Vic2l0ZSBhbmQgc2VlIGZ1cnRoZXIgZGV0YWlscyBvbiB0aGUgbWFraW5nIG9mIHN1Ym1pc3Npb25zIG9yIHJpbmcgMTMwMCA4NyA4MyA4NyBkdXJpbmcgbm9ybWFsIG9mZmljZSBob3Vycy4NCjwvcD4NCjwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9Im5vdGlmaWVkQWRkcmVzc2VzIj48YSBocmVmPSIjIj5Ob3RpZmllZCBBZGRyZXNzZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxiPk5vIGRhdGEuPC9iPg0KICAgICAgICAgICAgPC9kaXY+DQoNCjxoMyBpZD0iZ29vZ2xlbWFwcyI+PGEgaHJlZj0iIyI+R29vZ2xlIE1hcHM8L2E+PC9oMz4NCjxkaXYgaWQ9Im1hcF9jb250YWluZXIiPg0KICAgIDxkaXYgaWQ9Im1hcF9jYW52YXMiIGNsYXNzPSJpZnJhbWUtcndkIj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KDQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoNCiAgICB3aW5kb3cub25sb2FkID0gbG9hZEdvb2dsZU1hcHNTY3JpcHQ7DQoNCiAgICB2YXIgZ2VvY29kZXI7DQogICAgdmFyIG1hcDsNCiAgICB2YXIgdGltZW91dCA9IDMwMDsNCiAgICB2YXIgcHJvcGVydGllcyA9IFsiMS83IFBpbmV2aWV3IERyLCBHb29uZWxsYWJhaCAyNDgwIE5TVyAiXTsNCiAgICB2YXIgbGF0TG5nQXJyID0gW107DQoNCiAgICBmdW5jdGlvbiBsb2FkR29vZ2xlTWFwc1NjcmlwdCgpIHsNCiAgICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOw0KICAgICAgICBzY3JpcHQudHlwZSA9ICJ0ZXh0L2phdmFzY3JpcHQiOw0KICAgICAgICBzY3JpcHQuc3JjID0gIi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9qcz9rZXk9QUl6YVN5QTh5YjBMelZYeE12aC0zVWM2Ym8zVC1CbWxGNll0dm40JmNhbGxiYWNrPWxvYWRHb29nbGVNYXBzIjsNCiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHJlbmRlckdvb2dsZU1hcHMoKQ0KICAgIHsNCiAgICAgICAgdmFyIG1hcE9wdGlvbnMgPSB7DQogICAgICAgICAgICBjZW50ZXI6IGxhdExuZ0FyclswXSwNCiAgICAgICAgICAgIHpvb206IDE2LA0KICAgICAgICAgICAgbWFwVHlwZUlkOiBnb29nbGUubWFwcy5NYXBUeXBlSWQuUk9BRE1BUCwNCiAgICAgICAgICAgIG1hcFR5cGVDb250cm9sOiBmYWxzZQ0KICAgICAgICB9DQoNCiAgICAgICAgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWFwX2NhbnZhcyIpLCBtYXBPcHRpb25zKTsNCg0KICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGREb21MaXN0ZW5lcih3aW5kb3csICdyZXNpemUnLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHZhciBjZW50ZXIgPSBtYXAuZ2V0Q2VudGVyKCk7DQogICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKG1hcCwgJ3Jlc2l6ZScpOw0KICAgICAgICAgICAgbWFwLnNldENlbnRlcihjZW50ZXIpOw0KICAgICAgICB9KTsNCg0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBzKCkgew0KICAgICAgICBnZW9jb2RlciA9IG5ldyBnb29nbGUubWFwcy5HZW9jb2RlcigpOw0KICAgICAgICB2YXIgbm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoID0gMDsNCg0KICAgICAgICAkKHByb3BlcnRpZXMpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7DQogICAgICAgICAgICB2YXIgcHJvcGVydHlBZGRyZXNzID0gZWxlbWVudDsNCg0KICAgICAgICAgICAgLy9HZXQgZ2VvY29kZQ0KICAgICAgICAgICAgZ2VvY29kZXIuZ2VvY29kZSh7ICdhZGRyZXNzJzogcHJvcGVydHlBZGRyZXNzIH0sIGZ1bmN0aW9uIChyZXN1bHRzLCBzdGF0dXMpIHsNCiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9LKSB7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gcmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbjsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxhdExuZyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobG9jYXRpb24ubGF0KCksIGxvY2F0aW9uLmxuZygpKTsNCg0KICAgICAgICAgICAgICAgICAgICBsYXRMbmdBcnIucHVzaChsYXRMbmcpOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKGxhdExuZ0Fyci5sZW5ndGggPT0gMSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyR29vZ2xlTWFwcygpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgLy9DcmVhdGUgbWFya2VyIGZvciBtYXAgYW5kIHBsYWNlIGl0IG9uIHRoZSBtYXANCiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoew0KICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGxhdExuZywNCiAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogbWFwDQogICAgICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50U3RyaW5nID0gJzxkaXY+PHNwYW4+JyArIHByb3BlcnR5QWRkcmVzcyArICc8L3NwYW4+PC9kaXY+JzsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGluZm93aW5kb3cgPSBuZXcgZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdyh7ICAgLy9DcmVhdGUgaW5mbyB3aW5kb3cNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRTdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFya2VyLCAnY2xpY2snLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGluZm93aW5kb3cub3BlbihtYXAsIG1hcmtlcik7DQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAvL2lmIG5vIGxvY2F0aW9uIGZvdW5kIGJ5IGdvb2dsZSBmb3IgYSBwcm9wZXJ0eQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN0YXR1cyA9PSAiWkVST19SRVNVTFRTIikgew0KICAgICAgICAgICAgICAgICAgICBub09mRmFpbGVkTG9jYXRpb25TZWFyY2grKzsNCg0KICAgICAgICAgICAgICAgICAgICBpZihub09mRmFpbGVkTG9jYXRpb25TZWFyY2ggPT0gJChwcm9wZXJ0aWVzKS5sZW5ndGgpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VHb29nbGVNYXBzQ29udGVudCgpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PVkVSX1FVRVJZX0xJTUlUKSB7DQogICAgICAgICAgICAgICAgICAgIC8vc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IGdldEdlb0NvZGVGb3JBZGRyZXNzKGlkLCBhZGRyZXNzKTsgfSwgKHRpbWVvdXQpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgLy9SZXBsYWNlcyBnb29nbGUgbWFwcyBjb250ZW50IHdpdGggYSBuZXcgZGl2IGJsb2NrIHRoYXQgaGFzIGluZm8gbWVzc2FnZQ0KICAgIGZ1bmN0aW9uIHJlcGxhY2VHb29nbGVNYXBzQ29udGVudCgpIHsNCiAgICAgICAgdmFyIG5ld0NvbnRlbnQgPSAnPGRpdiBjbGFzcz0idWktYWNjb3JkaW9uLWNvbnRlbnQgdWktaGVscGVyLXJlc2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1ib3R0b20iPicgKw0KICAgICAgICAgICAgJzxwPkNvdWxkblwndCBmaW5kIHRoZSBwcm9wZXJ0eSBhZGRyZXNzKGVzKSBvbiBHb29nbGUgTWFwcy4gPHA+JyArDQogICAgICAgICAgICAnPC9kaXY+JzsNCg0KICAgICAgICAkKCcjbWFwX2NvbnRhaW5lcicpLnJlcGxhY2VXaXRoKG5ld0NvbnRlbnQpOw0KICAgIH0NCg0KPC9zY3JpcHQ+DQoNCiAgICA8L2Rpdj4NCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoNCiAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgJC5mbi50b2dnbGVwYW5lbHMgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoInVpLWFjY29yZGlvbiB1aS1hY2NvcmRpb24taWNvbnMgdWktaGVscGVyLXJlc2V0IikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCJoMyIpDQogICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoInVpLWFjY29yZGlvbi1oZWFkZXIgdWktaGVscGVyLXJlc2V0IHVpLXN0YXRlLWRlZmF1bHQgdWktY29ybmVyLXRvcCB1aS1jb3JuZXItYm90dG9tIikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5ob3ZlcihmdW5jdGlvbiAoKSB7ICQodGhpcykudG9nZ2xlQ2xhc3MoInVpLXN0YXRlLWhvdmVyIik7IH0pDQogICAgICAgICAgICAgICAgICAgICAgICAucHJlcGVuZCgnPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cCI+PC9zcGFuPicpDQogICAgICAgICAgICAgICAgICAgICAgICAuY2xpY2soZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykudG9nZ2xlQ2xhc3MoInVpLWFjY29yZGlvbi1oZWFkZXItYWN0aXZlIHVpLXN0YXRlLWFjdGl2ZSB1aS1zdGF0ZS1kZWZhdWx0IHVpLWNvcm5lci1ib3R0b20iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgiPiAuZ2x5cGhpY29uIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRvZ2dsZUNsYXNzKCJnbHlwaGljb24tY2hldnJvbi11cCBnbHlwaGljb24tY2hldnJvbi1kb3duIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVuZCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5uZXh0KCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWRlVG9nZ2xlKCk7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgICAgICAgICAgICAgLm5leHQoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCJ1aS1hY2NvcmRpb24tY29udGVudCB1aS1oZWxwZXItcmVzZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbSIpDQogICAgICAgICAgICAgICAgICAgICAgICAuaGlkZSgpOw0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykudG9nZ2xlcGFuZWxzKCk7DQoNCiAgICAgICAgICAgICQoJyNwcm9wZXJ0aWVzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNkZXRhaWxzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyN0cmFja2luZycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZG9jdW1lbnRzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNyZWxhdGVkQXBwbGljYXRpb25zJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNmZWVzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNnb29nbGVtYXBzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNjb250YWN0VXMnKS5jbGljaygpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAvKiBTaG93cyBhbGwgdGhlIHBhbmVscyAqLw0KICAgICAgICBmdW5jdGlvbiBzaG93QWxsKCkgew0KICAgICAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykuY2hpbGRyZW4oImgzIikuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWRlZmF1bHQiKSkgew0KICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0NCg0KICAgICAgICAvKiBIaWRlIGFsbCB0aGUgcGFuZWxzICovDQogICAgICAgIGZ1bmN0aW9uIGhpZGVBbGwoKSB7DQogICAgICAgICAgICAkKCcjYXBwbGljYXRpb24nKS5jaGlsZHJlbigiaDMiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygidWktc3RhdGUtYWN0aXZlIikpIHsNCiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljaygpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9DQoNCiAgICA8L3NjcmlwdD4NCg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwhLS0gLy5jb250YWluZXItZmx1aWQgLS0+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0icHJlLWZvb3RlciBjb250YWluZXJfMTIgY2YiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ3JpZF80Ij4NCiAgICAgICAgICAgICAgICA8aDMgY2xhc3M9ImFjY2QtdG9nZyI+Q29udGFjdCBVcyA8aSBjbGFzcz0iZmEgZmEtY2FyZXQtZG93biI+PC9pPjwvaDM+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWNjZC1jb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICA8cD5MaXNtb3JlIENpdHkgQ291bmNpbDxicj5BQk46IDYwIDA4MCA5MzIgODM3PC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD40MyBPbGl2ZXIgQXZlbnVlPGJyPkdvb25lbGxhYmFoIE5TVyAyNDgwPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD5Qb3N0OiBQTyBCb3ggMjNBLCBMaXNtb3JlIE5TVyAyNDgwPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD5QaG9uZTogMTMwMCA4NyA4MyA4Nzxicj5GYXg6IDAyIDY2IDI1MCA0MDA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPkVtYWlsOiA8YSBocmVmPSJtYWlsdG86Y291bmNpbEBsaXNtb3JlLm5zdy5nb3YuYXUiPjxzdHJvbmc+Y291bmNpbEBsaXNtb3JlLm5zdy5nb3YuYXU8L3N0cm9uZz48L2E+PC9wPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJmb290ZXIiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyXzEyIGNmIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJncmlkXzEyIGNmIG93Ij4NCiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImNwIj5Db3B5cmlnaHQgJmNvcHk7IDIwMjEgTGlzbW9yZSBDaXR5IENvdW5jaWw8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9wYWdlLmFzcD9wPURPQy1PQ1QtNjQtNTctMzAiIHRhcmdldD0iX3BhcmVudCI+SW50ZXJuZXQgUHJpdmFjeSBTdGF0ZW1lbnQ8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAmbmJzcDsmbmJzcDsgfCAmbmJzcDsmbmJzcDsNCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cubGlzbW9yZS5uc3cuZ292LmF1L3BhZ2UuYXNwP3A9RE9DLU9DVC02NC01Ny0zMCIgdGFyZ2V0PSJfcGFyZW50Ij5EaXNjbGFpbWVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7Jm5ic3A7IHwgJm5ic3A7Jm5ic3A7DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9jcF90aGVtZXMvZGVmYXVsdC9zaXRlbWFwLmFzcCIgdGFyZ2V0PSJfcGFyZW50Ij5TaXRlIE1hcDwvYT4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KPC9ib2R5Pg0KPC9odG1sPg0K
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000144.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:45:48 GMT
      Content-Length:
      - '30459'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iTGlzbW9yZSBDaXR5IENvdW5jaWwsREEgVHJhY2tlcixBcHBsaWNhdGlvbiBUcmFja2VyLERldmVsb3BtZW50IEFwcGxpY2F0aW9uLERldmVsb3BtZW50IEFwcGxpY2F0aW9uIFRyYWNraW5nLCBEQSBFbnF1aXJ5LCBEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBFbnF1aXJ5LCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iVGhlIG9mZmljaWFsIExpc21vcmUgQ2l0eSBDb3VuY2lsIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KDQogICAgPHRpdGxlPkxpc21vcmUgQ2l0eSBDb3VuY2lsIC0gQXBwbGljYXRpb24gVHJhY2tlcjwvdGl0bGU+DQoNCiAgICA8IS0tZmF2aWNvbi0tPg0KICAgIDxsaW5rIGhyZWY9Ii9mYXZpY29uLmljbyIgcmVsPSJzaG9ydGN1dCBpY29uIiB0eXBlPSJpbWFnZS94LWljb24iPg0KDQogICAgPCEtLSBqUXVlcnkgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0xLjExLjEuanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjExLjIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvY29yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvYWNjb3JkaW9uLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS90aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC10aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBEYXRhVGFibGVzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2pxdWVyeS5kYXRhVGFibGVzLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMuYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuc2NzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gQm9vdHN0cmFwIFNCLUFkbWluLTIgUGx1Z2luIGFuZCBvdGhlciBjc3MgYW5kIGpzIGZpbGVzLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtY29tYm9ib3guanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtZGF0ZXBpY2tlci5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2pxdWVyeS5mb3JtLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LnRhYmxlc29ydGVyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWFzdGVydmlldy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21ldGlzTWVudS5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3NiLWFkbWluLTIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL2Nzcy9ib290c3RyYXAtY29tYm9ib3guY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvZGF0ZXBpY2tlcjMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVydmlldy1jdXN0b21pc2F0aW9ucy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9zYi1hZG1pbi0yLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDxsaW5rIGhyZWY9Ii9Db3VuY2lsX1RoZW1lL0xpc21vcmUvbGlzbW9yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgDQoNCiAgICA8IS0tIEhUTUw1IFNoaW0gYW5kIFJlc3BvbmQuanMgSUU4IHN1cHBvcnQgb2YgSFRNTDUgZWxlbWVudHMgYW5kIG1lZGlhIHF1ZXJpZXMgLS0+DQogICAgPCEtLSBXQVJOSU5HOiBSZXNwb25kLmpzIGRvZXNuJ3Qgd29yayBpZiB5b3UgdmlldyB0aGUgcGFnZSB2aWEgZmlsZTovLyAtLT4NCiAgICA8IS0tW2lmIGx0IElFIDldPg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL2h0bWw1c2hpdi8zLjcuMC9odG1sNXNoaXYuanMiPjwvc2NyaXB0Pg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL3Jlc3BvbmQuanMvMS40LjIvcmVzcG9uZC5taW4uanMiPjwvc2NyaXB0Pg0KICAgIDwhW2VuZGlmXS0tPg0KDQogICAgPGxpbmsgaHJlZj0naHR0cDovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9UmFsZXdheTozMDAsNDAwLDYwMCw3MDAnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPg0KICAgIDxsaW5rIGhyZWY9J2h0dHA6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PU9zd2FsZDozMDAsNDAwLDcwMCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQo8L2hlYWQ+DQoNCg0KPGJvZHkgY2xhc3M9ImNicC1zcG1lbnUtcHVzaCI+DQogICAgPGRpdiBjbGFzcz0id3IiPg0KICAgICAgICA8ZGl2IGlkPSJoZWFkZXIiPg0KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl8xMiI+DQoNCiAgICAgICAgPGgxIGlkPSJsb2dvIj48YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9kZWZhdWx0LmFzcCI+PGltZyBzcmM9Ii8vY2FuZGlkYXRlLW9mZmljZS5zMy5hbWF6b25hd3MuY29tL3NoYXJlZC9saXNtb3JlL2ltYWdlcy9sb2dvLnBuZyIgYWx0PSJMaXNtb3JlIENpdHkgQ291bmNpbCIgc3R5bGU9InBhZGRpbmctdG9wOjVweCI+PHN0cm9uZyBjbGFzcz0idmgiPkxpc21vcmUgQ2l0eSBDb3VuY2lsPC9zdHJvbmc+PC9hPjwvaDE+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0idXRpbGl0eSByaWdodCI+DQogICAgICAgICAgICA8YSBjbGFzcz0iaG9tZS1saW5rIiBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9kZWZhdWx0LmFzcCI+DQogICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vY2FuZGlkYXRlLW9mZmljZS5zMy5hbWF6b25hd3MuY29tL3NoYXJlZC9saXNtb3JlL2ltYWdlcy9ob21lLnBuZyIgYWx0PSJMaXNtb3JlIENpdHkgQ291bmNpbCI+DQogICAgICAgICAgICA8L2E+DQogICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyIj4NCiAgICAgICAgPC9kaXY+DQoNCiAgICA8L2Rpdj4NCjwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJiYW5uZXIiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmFubmVyLXRleHQgY2YiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJhbm5lci10ZXh0LWNvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzcz0ib3ciPkRBIFRyYWNraW5nIDxzcGFuPlBvcnRhbDwvc3Bhbj48L2gxPg0KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibm0iPkluZm9ybWF0aW9uIG9uIGRldmVsb3BtZW50IGFwcGxpY2F0aW9ucyBpbiB0aGUgTGlzbW9yZSBMb2NhbCBHb3Zlcm5tZW50IEFyZWEuIDwvcD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyXzEyIGludHJvIGNmIj4gICAgICAgICAgICA8IS0tIE5hdmlnYXRpb24gLS0+DQogICAgICAgICAgICA8bmF2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWRlZmF1bHQgbmF2YmFyLXN0YXRpYy10b3AiIHJvbGU9Im5hdmlnYXRpb24iIHN0eWxlPSJtYXJnaW4tYm90dG9tOiAwIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJuYXZiYXItdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIubmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5Ub2dnbGUgbmF2aWdhdGlvbjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXZiYXItYnJhbmQiIGhyZWY9IiMiPjwvYT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLWhlYWRlciAtLT4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItdG9wLWxpbmtzIG5hdmJhci1yaWdodCBoaWRkZW4teHMgaGlkZGVuLXNtIGhpZGRlbi1tZCI+DQogICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGlkPSJwcmludEljb24iIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXByaW50IiBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1kZWZhdWx0IHNpZGViYXIiIHJvbGU9Im5hdmlnYXRpb24iPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaWRlYmFyLW5hdiBuYXZiYXItY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJzaWRlLW1lbnUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb24gVHJhY2tlcjxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0Fib3V0IHRhcmdldD1fc2VsZj5XaGF0IGlzIEFwcGxpY2F0aW9uIFRyYWNrZXI/PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0Rpc2NsYWltZXIgdGFyZ2V0PV9zZWxmPkRpc2NsYWltZXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvSW5kZXggdGFyZ2V0PT5BcHBsaWNhdGlvbiBUcmFja2VyIEhvbWU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvU2VhcmNoIGlkPXNlYXJjaCB0YXJnZXQ9X3NlbGY+U2VhcmNoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9SZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPVRydWUmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIGlkPW91dHN0YW5kaW5nLWFwcHMgdGFyZ2V0PV9zZWxmPlVuZGV0ZXJtaW5lZCBBcHBsaWNhdGlvbnM8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P1JlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1UcnVlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgaWQ9ZXhoaWJpdGVkLWFwcHMgdGFyZ2V0PV9zZWxmPkFwcGxpY2F0aW9ucyBPbiBFeGhpYml0aW9uPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9ucyBTdWJtaXR0ZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTUlMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+VGhpcyBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT03JTJmMDMlMmYyMDIxJkRhdGVUbz0xMyUyZjAzJTJmMjAyMSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjAzJTJmMjAyMSZEYXRlVG89MTUlMmYwMyUyZjIwMjEmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDIlMmYyMDIxJkRhdGVUbz0yOCUyZjAyJTJmMjAyMSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIERldGVybWluZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTUlMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTclMmYwMyUyZjIwMjEmRGF0ZVRvPTEzJTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5MYXN0IFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDIlMmYyMDIxJkRhdGVUbz0yOCUyZjAyJTJmMjAyMSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uc2lkZWJhci1jb2xsYXBzZSAtLT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gKDUuMjAxOS4xNDQuMSk8L2gyPg0KICAgIDwvZGl2Pg0KICAgIDxoND5EZXRhaWxlZCBpbmZvcm1hdGlvbiByZWxhdGVkIHRvIHRoZSBhcHBsaWNhdGlvbjo8L2g0Pg0KICAgIDxiciAvPg0KICAgIDxkaXY+DQogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6c2hvd0FsbCgpOyI+U2hvdyBBbGw8L2E+IC8NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpoaWRlQWxsKCk7Ij5IaWRlIEFsbDwvYT4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGlkPSJhcHBsaWNhdGlvbiI+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZGV0YWlscyI+PGEgaHJlZj0iIyI+RGV0YWlsczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGVzY3JpcHRpb246IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRBMTkvMTQ0IC0gNTAgRHVucm9taW4gRHJpdmUgLSBTaGVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlN1Ym1pdHRlZCBEYXRlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjAzLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFR5cGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldmVsb3BtZW50IEFwcGxpY2F0aW9uPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InByb3BlcnRpZXMiPjxhIGhyZWY9IiMiPlByb3BlcnRpZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjUwIER1bnJvbWluIERyLCBNb2RhbnZpbGxlIDI0ODAgTlNXICAoRFAgODQ2MTIyIGxvdCAzNik8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0icGVvcGxlIj48YSBocmVmPSIjIj5QZW9wbGU8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhbnQ6IENoZXJ5bCBOaWxvbg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1aWxkZXI6ICANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcmluY2lwYWwgQ2VydGlmeWluZyBBdXRob3JpdHk6ICANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9Im9mZmljZXIiPjxhIGhyZWY9IiMiPk9mZmljZXI8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkdhcnJ5IExlZTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJkZWNpc2lvbiI+PGEgaHJlZj0iIyI+RGVjaXNpb248L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFN0YXR1czogRGV0ZXJtaW5lZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGV0ZXJtaW5hdGlvbiBEYXRlOg0KMzEvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGV0ZXJtaW5hdGlvbiBUeXBlOiBDb25kaXRpb25hbCBDb25zZW50IC0gQ291bmNpbCBTdGFmZjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJlc3RpbWF0ZWRDb3N0Ij48YSBocmVmPSIjIj5Fc3RpbWF0ZWQgQ29zdDwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+JDEwLDQwMC4wMDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJ0cmFja2luZyI+PGEgaHJlZj0iIyI+VHJhY2tpbmc8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21tZW5jZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RHVlIERhdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Q29tcGxldGVkIERhdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gUmVjZWl2ZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDMvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowMy8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowOC8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlNpdGUgVmlzaXQvSW5pdGlhbCBSZXZpZXc8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDgvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyOS8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyOS8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkNvbnNlbnQgTm90aWNlIElzc3VlZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowMy8wNi8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjAzLzA2LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjAzLzA2LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0icmVsYXRlZEFwcGxpY2F0aW9ucyI+PGEgaHJlZj0iIyI+UmVsYXRlZCBBcHBsaWNhdGlvbnM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5BcHBsaWNhdGlvbiBUeXBlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFwcGxpY2F0aW9uIE51bWJlcjwvdGg+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbnN0cnVjdGlvbiBDZXJ0aWZpY2F0ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3RyYWNrZXIubGlzbW9yZS5uc3cuZ292LmF1L0FwcGxpY2F0aW9uL0FwcGxpY2F0aW9uRGV0YWlscy8wMTAuMjAxOS4wMDAwMDE0NC4wMDEvIj4xMC4yMDE5LjE0NC4xPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCg0KICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KDQoNCg0KDQoNCjxoMyBpZD0iZG9jdW1lbnRzIj48YSBocmVmPSIjIj5Eb2N1bWVudHM8L2E+PC9oMz4NCjxkaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi13cmFwIj4NCiAgICAgICAgICAgIDxzcGFuPnN3aXBlIHRhYmxlIHRvIHRoZSBsZWZ0IHRvIHJldmVhbCBtb3JlIGRhdGE8L3NwYW4+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgaWQ9ImRvYy1jb3VudCI+VG90YWwgbnVtYmVyIG9mIGRvY3VtZW50czogMTwvZGl2Pg0KICAgIDx0YWJsZSBpZD0iZG9jLXRhYmxlIiBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1ib3JkZXJlZCBuby1mb290ZXIiPg0KICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgPHRoPlJlY29yZCBOdW1iZXI8L3RoPg0KICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgPHRoPkRvY3VtZW50IFR5cGU8L3RoPg0KICAgICAgICAgICAgICAgIDx0aD5TaXplPC90aD4NCiAgICAgICAgICAgICAgICA8dGg+VmlldyBMaW5rPC90aD4NCiAgICAgICAgICAgIDwvdHI+DQogICAgICAgIDwvdGhlYWQ+DQogICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFEMTkvMTA1NzA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldmVsb3BtZW50IEFwcGxpY2F0aW9uIENvbnNlbnQgTm90aWNlIC0gNTAgRHVucm9taW4gRHJpdmUgTU9EQU5WSUxMRSAyNDgwPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5QREY8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgMC4yMCBNQg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly90cmFja2VyLmxpc21vcmUubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9NnNLL0NvVnNVSlU9IiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICA8L3Rib2R5Pg0KICAgIDwvdGFibGU+DQo8L2Rpdj4NCg0KDQogICAgICAgICAgICA8aDMgaWQ9ImNvbnRhY3RVcyI+PGEgaHJlZj0iIyI+Q29udGFjdCBVczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PHA+DQpTaG91bGQgeW91IHdpc2ggdG8gY29udGFjdCBjb3VuY2lsIHRvIG1ha2UgZW5xdWlyaWVzIHJlZ2FyZGluZyBhcHBsaWNhdGlvbnMgZGlzcGxheWVkIG9uIHRoZSB3ZWJzaXRlLCBwbGVhc2UgY29udGFjdCBlaXRoZXIgYnkgZW1haWwgPGEgc3R5bGU9ImNvbG9yOiBibHVlIiBocmVmPSJtYWlsdG86Y291bmNpbEBsaXNtb3JlLm5zdy5nb3YuYXU/c3ViamVjdD1TdWJtaXNzaW9uIGZvciBhcHBsaWNhdGlvbiAgKDUuMjAxOS4xNDQuMSkiPmNvdW5jaWxAbGlzbW9yZS5uc3cuZ292LmF1PC9hPiwgcGhvbmUgMTMwMCA4NyA4MyA4NyBkdXJpbmcgbm9ybWFsIG9mZmljZSBob3VycyBvciBpbiB3cml0aW5nIHRvIFBPIEJveCAyM0EsIExpc21vcmUgTlNXIDI0ODAuIEFsbCBjb3JyZXNwb25kZW5jZSBzaG91bGQgYmUgYWRkcmVzc2VkIHRvIHRoZSBHZW5lcmFsIE1hbmFnZXIgYW5kIHF1b3RlIHRoZSByZWxldmFudCBhcHBsaWNhdGlvbiByZWZlcmVuY2UgbnVtYmVyLg0KPC9wPg0KPHA+DQpJZiB0aGUgYXBwbGljYXRpb24gZGlzcGxheWVkIG9uIHRoaXMgd2Vic2l0ZSBpcyB1bmRlciBjdXJyZW50IG5laWdoYm91ciBub3RpZmljYXRpb24sIHByb3BlcnRpZXMgY29uc2lkZXJlZCBieSBDb3VuY2lsIHRvIHBvc3NpYmx5IGJlIGRldHJpbWVudGFsbHkgYWZmZWN0ZWQgd2lsbCBiZSBjb250YWN0ZWQgaW5kaXZpZHVhbGx5IGFuZCBhZHZpc2VkIG9mIHRoZWlyIHN1Ym1pc3Npb24gb3Bwb3J0dW5pdGllcyB1bmRlciBDaGFwdGVyIDEwIExpc21vcmUgRGV2ZWxvcG1lbnQgQ29udHJvbCBQbGFuIDIwMTIuDQo8L3A+DQo8cD4NCjxhIGhyZWY9Imh0dHA6Ly93d3cubGlzbW9yZS5uc3cuZ292LmF1L2NwX3RoZW1lcy9kZWZhdWx0L3BhZ2UuYXNwP3A9RE9DLUxIUi04My03Ni01OCIgIHRhcmdldD0iX2JsYW5rIj5DTElDSyBIRVJFPC9hPiB0byB2aXNpdCBDb3VuY2ls4oCZcyB3ZWJzaXRlIGFuZCBzZWUgZnVydGhlciBkZXRhaWxzIG9uIHRoZSBtYWtpbmcgb2Ygc3VibWlzc2lvbnMgb3IgcmluZyAxMzAwIDg3IDgzIDg3IGR1cmluZyBub3JtYWwgb2ZmaWNlIGhvdXJzLg0KPC9wPg0KPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0ibm90aWZpZWRBZGRyZXNzZXMiPjxhIGhyZWY9IiMiPk5vdGlmaWVkIEFkZHJlc3NlczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGI+Tm8gZGF0YS48L2I+DQogICAgICAgICAgICA8L2Rpdj4NCg0KPGgzIGlkPSJnb29nbGVtYXBzIj48YSBocmVmPSIjIj5Hb29nbGUgTWFwczwvYT48L2gzPg0KPGRpdiBpZD0ibWFwX2NvbnRhaW5lciI+DQogICAgPGRpdiBpZD0ibWFwX2NhbnZhcyIgY2xhc3M9ImlmcmFtZS1yd2QiPg0KICAgIDwvZGl2Pg0KPC9kaXY+DQoNCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgIHdpbmRvdy5vbmxvYWQgPSBsb2FkR29vZ2xlTWFwc1NjcmlwdDsNCg0KICAgIHZhciBnZW9jb2RlcjsNCiAgICB2YXIgbWFwOw0KICAgIHZhciB0aW1lb3V0ID0gMzAwOw0KICAgIHZhciBwcm9wZXJ0aWVzID0gWyI1MCBEdW5yb21pbiBEciwgTW9kYW52aWxsZSAyNDgwIE5TVyAiXTsNCiAgICB2YXIgbGF0TG5nQXJyID0gW107DQoNCiAgICBmdW5jdGlvbiBsb2FkR29vZ2xlTWFwc1NjcmlwdCgpIHsNCiAgICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOw0KICAgICAgICBzY3JpcHQudHlwZSA9ICJ0ZXh0L2phdmFzY3JpcHQiOw0KICAgICAgICBzY3JpcHQuc3JjID0gIi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9qcz9rZXk9QUl6YVN5QTh5YjBMelZYeE12aC0zVWM2Ym8zVC1CbWxGNll0dm40JmNhbGxiYWNrPWxvYWRHb29nbGVNYXBzIjsNCiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHJlbmRlckdvb2dsZU1hcHMoKQ0KICAgIHsNCiAgICAgICAgdmFyIG1hcE9wdGlvbnMgPSB7DQogICAgICAgICAgICBjZW50ZXI6IGxhdExuZ0FyclswXSwNCiAgICAgICAgICAgIHpvb206IDE2LA0KICAgICAgICAgICAgbWFwVHlwZUlkOiBnb29nbGUubWFwcy5NYXBUeXBlSWQuUk9BRE1BUCwNCiAgICAgICAgICAgIG1hcFR5cGVDb250cm9sOiBmYWxzZQ0KICAgICAgICB9DQoNCiAgICAgICAgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWFwX2NhbnZhcyIpLCBtYXBPcHRpb25zKTsNCg0KICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGREb21MaXN0ZW5lcih3aW5kb3csICdyZXNpemUnLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHZhciBjZW50ZXIgPSBtYXAuZ2V0Q2VudGVyKCk7DQogICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKG1hcCwgJ3Jlc2l6ZScpOw0KICAgICAgICAgICAgbWFwLnNldENlbnRlcihjZW50ZXIpOw0KICAgICAgICB9KTsNCg0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBzKCkgew0KICAgICAgICBnZW9jb2RlciA9IG5ldyBnb29nbGUubWFwcy5HZW9jb2RlcigpOw0KICAgICAgICB2YXIgbm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoID0gMDsNCg0KICAgICAgICAkKHByb3BlcnRpZXMpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7DQogICAgICAgICAgICB2YXIgcHJvcGVydHlBZGRyZXNzID0gZWxlbWVudDsNCg0KICAgICAgICAgICAgLy9HZXQgZ2VvY29kZQ0KICAgICAgICAgICAgZ2VvY29kZXIuZ2VvY29kZSh7ICdhZGRyZXNzJzogcHJvcGVydHlBZGRyZXNzIH0sIGZ1bmN0aW9uIChyZXN1bHRzLCBzdGF0dXMpIHsNCiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9LKSB7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gcmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbjsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxhdExuZyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobG9jYXRpb24ubGF0KCksIGxvY2F0aW9uLmxuZygpKTsNCg0KICAgICAgICAgICAgICAgICAgICBsYXRMbmdBcnIucHVzaChsYXRMbmcpOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKGxhdExuZ0Fyci5sZW5ndGggPT0gMSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyR29vZ2xlTWFwcygpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgLy9DcmVhdGUgbWFya2VyIGZvciBtYXAgYW5kIHBsYWNlIGl0IG9uIHRoZSBtYXANCiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoew0KICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGxhdExuZywNCiAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogbWFwDQogICAgICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50U3RyaW5nID0gJzxkaXY+PHNwYW4+JyArIHByb3BlcnR5QWRkcmVzcyArICc8L3NwYW4+PC9kaXY+JzsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGluZm93aW5kb3cgPSBuZXcgZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdyh7ICAgLy9DcmVhdGUgaW5mbyB3aW5kb3cNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRTdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFya2VyLCAnY2xpY2snLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGluZm93aW5kb3cub3BlbihtYXAsIG1hcmtlcik7DQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAvL2lmIG5vIGxvY2F0aW9uIGZvdW5kIGJ5IGdvb2dsZSBmb3IgYSBwcm9wZXJ0eQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN0YXR1cyA9PSAiWkVST19SRVNVTFRTIikgew0KICAgICAgICAgICAgICAgICAgICBub09mRmFpbGVkTG9jYXRpb25TZWFyY2grKzsNCg0KICAgICAgICAgICAgICAgICAgICBpZihub09mRmFpbGVkTG9jYXRpb25TZWFyY2ggPT0gJChwcm9wZXJ0aWVzKS5sZW5ndGgpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VHb29nbGVNYXBzQ29udGVudCgpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PVkVSX1FVRVJZX0xJTUlUKSB7DQogICAgICAgICAgICAgICAgICAgIC8vc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IGdldEdlb0NvZGVGb3JBZGRyZXNzKGlkLCBhZGRyZXNzKTsgfSwgKHRpbWVvdXQpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgLy9SZXBsYWNlcyBnb29nbGUgbWFwcyBjb250ZW50IHdpdGggYSBuZXcgZGl2IGJsb2NrIHRoYXQgaGFzIGluZm8gbWVzc2FnZQ0KICAgIGZ1bmN0aW9uIHJlcGxhY2VHb29nbGVNYXBzQ29udGVudCgpIHsNCiAgICAgICAgdmFyIG5ld0NvbnRlbnQgPSAnPGRpdiBjbGFzcz0idWktYWNjb3JkaW9uLWNvbnRlbnQgdWktaGVscGVyLXJlc2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1ib3R0b20iPicgKw0KICAgICAgICAgICAgJzxwPkNvdWxkblwndCBmaW5kIHRoZSBwcm9wZXJ0eSBhZGRyZXNzKGVzKSBvbiBHb29nbGUgTWFwcy4gPHA+JyArDQogICAgICAgICAgICAnPC9kaXY+JzsNCg0KICAgICAgICAkKCcjbWFwX2NvbnRhaW5lcicpLnJlcGxhY2VXaXRoKG5ld0NvbnRlbnQpOw0KICAgIH0NCg0KPC9zY3JpcHQ+DQoNCiAgICA8L2Rpdj4NCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoNCiAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgJC5mbi50b2dnbGVwYW5lbHMgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoInVpLWFjY29yZGlvbiB1aS1hY2NvcmRpb24taWNvbnMgdWktaGVscGVyLXJlc2V0IikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCJoMyIpDQogICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoInVpLWFjY29yZGlvbi1oZWFkZXIgdWktaGVscGVyLXJlc2V0IHVpLXN0YXRlLWRlZmF1bHQgdWktY29ybmVyLXRvcCB1aS1jb3JuZXItYm90dG9tIikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5ob3ZlcihmdW5jdGlvbiAoKSB7ICQodGhpcykudG9nZ2xlQ2xhc3MoInVpLXN0YXRlLWhvdmVyIik7IH0pDQogICAgICAgICAgICAgICAgICAgICAgICAucHJlcGVuZCgnPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cCI+PC9zcGFuPicpDQogICAgICAgICAgICAgICAgICAgICAgICAuY2xpY2soZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykudG9nZ2xlQ2xhc3MoInVpLWFjY29yZGlvbi1oZWFkZXItYWN0aXZlIHVpLXN0YXRlLWFjdGl2ZSB1aS1zdGF0ZS1kZWZhdWx0IHVpLWNvcm5lci1ib3R0b20iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgiPiAuZ2x5cGhpY29uIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRvZ2dsZUNsYXNzKCJnbHlwaGljb24tY2hldnJvbi11cCBnbHlwaGljb24tY2hldnJvbi1kb3duIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVuZCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5uZXh0KCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWRlVG9nZ2xlKCk7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgICAgICAgICAgICAgLm5leHQoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCJ1aS1hY2NvcmRpb24tY29udGVudCB1aS1oZWxwZXItcmVzZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbSIpDQogICAgICAgICAgICAgICAgICAgICAgICAuaGlkZSgpOw0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykudG9nZ2xlcGFuZWxzKCk7DQoNCiAgICAgICAgICAgICQoJyNwcm9wZXJ0aWVzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNkZXRhaWxzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyN0cmFja2luZycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZG9jdW1lbnRzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNyZWxhdGVkQXBwbGljYXRpb25zJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNmZWVzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNnb29nbGVtYXBzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNjb250YWN0VXMnKS5jbGljaygpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAvKiBTaG93cyBhbGwgdGhlIHBhbmVscyAqLw0KICAgICAgICBmdW5jdGlvbiBzaG93QWxsKCkgew0KICAgICAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykuY2hpbGRyZW4oImgzIikuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWRlZmF1bHQiKSkgew0KICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0NCg0KICAgICAgICAvKiBIaWRlIGFsbCB0aGUgcGFuZWxzICovDQogICAgICAgIGZ1bmN0aW9uIGhpZGVBbGwoKSB7DQogICAgICAgICAgICAkKCcjYXBwbGljYXRpb24nKS5jaGlsZHJlbigiaDMiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygidWktc3RhdGUtYWN0aXZlIikpIHsNCiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljaygpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9DQoNCiAgICA8L3NjcmlwdD4NCg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwhLS0gLy5jb250YWluZXItZmx1aWQgLS0+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0icHJlLWZvb3RlciBjb250YWluZXJfMTIgY2YiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ3JpZF80Ij4NCiAgICAgICAgICAgICAgICA8aDMgY2xhc3M9ImFjY2QtdG9nZyI+Q29udGFjdCBVcyA8aSBjbGFzcz0iZmEgZmEtY2FyZXQtZG93biI+PC9pPjwvaDM+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWNjZC1jb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICA8cD5MaXNtb3JlIENpdHkgQ291bmNpbDxicj5BQk46IDYwIDA4MCA5MzIgODM3PC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD40MyBPbGl2ZXIgQXZlbnVlPGJyPkdvb25lbGxhYmFoIE5TVyAyNDgwPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD5Qb3N0OiBQTyBCb3ggMjNBLCBMaXNtb3JlIE5TVyAyNDgwPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD5QaG9uZTogMTMwMCA4NyA4MyA4Nzxicj5GYXg6IDAyIDY2IDI1MCA0MDA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPkVtYWlsOiA8YSBocmVmPSJtYWlsdG86Y291bmNpbEBsaXNtb3JlLm5zdy5nb3YuYXUiPjxzdHJvbmc+Y291bmNpbEBsaXNtb3JlLm5zdy5nb3YuYXU8L3N0cm9uZz48L2E+PC9wPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJmb290ZXIiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyXzEyIGNmIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJncmlkXzEyIGNmIG93Ij4NCiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImNwIj5Db3B5cmlnaHQgJmNvcHk7IDIwMjEgTGlzbW9yZSBDaXR5IENvdW5jaWw8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9wYWdlLmFzcD9wPURPQy1PQ1QtNjQtNTctMzAiIHRhcmdldD0iX3BhcmVudCI+SW50ZXJuZXQgUHJpdmFjeSBTdGF0ZW1lbnQ8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAmbmJzcDsmbmJzcDsgfCAmbmJzcDsmbmJzcDsNCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cubGlzbW9yZS5uc3cuZ292LmF1L3BhZ2UuYXNwP3A9RE9DLU9DVC02NC01Ny0zMCIgdGFyZ2V0PSJfcGFyZW50Ij5EaXNjbGFpbWVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7Jm5ic3A7IHwgJm5ic3A7Jm5ic3A7DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9jcF90aGVtZXMvZGVmYXVsdC9zaXRlbWFwLmFzcCIgdGFyZ2V0PSJfcGFyZW50Ij5TaXRlIE1hcDwvYT4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KPC9ib2R5Pg0KPC9odG1sPg0K
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000122.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:45:53 GMT
      Content-Length:
      - '31137'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000156.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:45:57 GMT
      Content-Length:
      - '31280'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000156.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:46:01 GMT
      Content-Length:
      - '31144'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000150.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:46:06 GMT
      Content-Length:
      - '35183'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000150.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:46:11 GMT
      Content-Length:
      - '30685'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000151.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:46:16 GMT
      Content-Length:
      - '32310'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000161.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:46:21 GMT
      Content-Length:
      - '31136'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000161.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:46:25 GMT
      Content-Length:
      - '30838'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000154.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:46:30 GMT
      Content-Length:
      - '30666'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2018.00000301.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:46:34 GMT
      Content-Length:
      - '34840'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000153.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:46:39 GMT
      Content-Length:
      - '31471'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000153.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:46:44 GMT
      Content-Length:
      - '30452'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000158.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:46:48 GMT
      Content-Length:
      - '30698'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000143.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:46:53 GMT
      Content-Length:
      - '31935'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000123.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:46:58 GMT
      Content-Length:
      - '32390'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000123.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:47:03 GMT
      Content-Length:
      - '30954'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000140.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:47:07 GMT
      Content-Length:
      - '30719'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000148.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:47:12 GMT
      Content-Length:
      - '31041'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000148.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:47:16 GMT
      Content-Length:
      - '30907'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000162.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:47:21 GMT
      Content-Length:
      - '29128'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iTGlzbW9yZSBDaXR5IENvdW5jaWwsREEgVHJhY2tlcixBcHBsaWNhdGlvbiBUcmFja2VyLERldmVsb3BtZW50IEFwcGxpY2F0aW9uLERldmVsb3BtZW50IEFwcGxpY2F0aW9uIFRyYWNraW5nLCBEQSBFbnF1aXJ5LCBEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBFbnF1aXJ5LCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iVGhlIG9mZmljaWFsIExpc21vcmUgQ2l0eSBDb3VuY2lsIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KDQogICAgPHRpdGxlPkxpc21vcmUgQ2l0eSBDb3VuY2lsIC0gQXBwbGljYXRpb24gVHJhY2tlcjwvdGl0bGU+DQoNCiAgICA8IS0tZmF2aWNvbi0tPg0KICAgIDxsaW5rIGhyZWY9Ii9mYXZpY29uLmljbyIgcmVsPSJzaG9ydGN1dCBpY29uIiB0eXBlPSJpbWFnZS94LWljb24iPg0KDQogICAgPCEtLSBqUXVlcnkgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0xLjExLjEuanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjExLjIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvY29yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvYWNjb3JkaW9uLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS90aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC10aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBEYXRhVGFibGVzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2pxdWVyeS5kYXRhVGFibGVzLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMuYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuc2NzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gQm9vdHN0cmFwIFNCLUFkbWluLTIgUGx1Z2luIGFuZCBvdGhlciBjc3MgYW5kIGpzIGZpbGVzLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtY29tYm9ib3guanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtZGF0ZXBpY2tlci5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2pxdWVyeS5mb3JtLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LnRhYmxlc29ydGVyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWFzdGVydmlldy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21ldGlzTWVudS5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3NiLWFkbWluLTIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL2Nzcy9ib290c3RyYXAtY29tYm9ib3guY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvZGF0ZXBpY2tlcjMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVydmlldy1jdXN0b21pc2F0aW9ucy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9zYi1hZG1pbi0yLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDxsaW5rIGhyZWY9Ii9Db3VuY2lsX1RoZW1lL0xpc21vcmUvbGlzbW9yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgDQoNCiAgICA8IS0tIEhUTUw1IFNoaW0gYW5kIFJlc3BvbmQuanMgSUU4IHN1cHBvcnQgb2YgSFRNTDUgZWxlbWVudHMgYW5kIG1lZGlhIHF1ZXJpZXMgLS0+DQogICAgPCEtLSBXQVJOSU5HOiBSZXNwb25kLmpzIGRvZXNuJ3Qgd29yayBpZiB5b3UgdmlldyB0aGUgcGFnZSB2aWEgZmlsZTovLyAtLT4NCiAgICA8IS0tW2lmIGx0IElFIDldPg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL2h0bWw1c2hpdi8zLjcuMC9odG1sNXNoaXYuanMiPjwvc2NyaXB0Pg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL3Jlc3BvbmQuanMvMS40LjIvcmVzcG9uZC5taW4uanMiPjwvc2NyaXB0Pg0KICAgIDwhW2VuZGlmXS0tPg0KDQogICAgPGxpbmsgaHJlZj0naHR0cDovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9UmFsZXdheTozMDAsNDAwLDYwMCw3MDAnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPg0KICAgIDxsaW5rIGhyZWY9J2h0dHA6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PU9zd2FsZDozMDAsNDAwLDcwMCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQo8L2hlYWQ+DQoNCg0KPGJvZHkgY2xhc3M9ImNicC1zcG1lbnUtcHVzaCI+DQogICAgPGRpdiBjbGFzcz0id3IiPg0KICAgICAgICA8ZGl2IGlkPSJoZWFkZXIiPg0KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl8xMiI+DQoNCiAgICAgICAgPGgxIGlkPSJsb2dvIj48YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9kZWZhdWx0LmFzcCI+PGltZyBzcmM9Ii8vY2FuZGlkYXRlLW9mZmljZS5zMy5hbWF6b25hd3MuY29tL3NoYXJlZC9saXNtb3JlL2ltYWdlcy9sb2dvLnBuZyIgYWx0PSJMaXNtb3JlIENpdHkgQ291bmNpbCIgc3R5bGU9InBhZGRpbmctdG9wOjVweCI+PHN0cm9uZyBjbGFzcz0idmgiPkxpc21vcmUgQ2l0eSBDb3VuY2lsPC9zdHJvbmc+PC9hPjwvaDE+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0idXRpbGl0eSByaWdodCI+DQogICAgICAgICAgICA8YSBjbGFzcz0iaG9tZS1saW5rIiBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9kZWZhdWx0LmFzcCI+DQogICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vY2FuZGlkYXRlLW9mZmljZS5zMy5hbWF6b25hd3MuY29tL3NoYXJlZC9saXNtb3JlL2ltYWdlcy9ob21lLnBuZyIgYWx0PSJMaXNtb3JlIENpdHkgQ291bmNpbCI+DQogICAgICAgICAgICA8L2E+DQogICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyIj4NCiAgICAgICAgPC9kaXY+DQoNCiAgICA8L2Rpdj4NCjwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJiYW5uZXIiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmFubmVyLXRleHQgY2YiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJhbm5lci10ZXh0LWNvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzcz0ib3ciPkRBIFRyYWNraW5nIDxzcGFuPlBvcnRhbDwvc3Bhbj48L2gxPg0KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibm0iPkluZm9ybWF0aW9uIG9uIGRldmVsb3BtZW50IGFwcGxpY2F0aW9ucyBpbiB0aGUgTGlzbW9yZSBMb2NhbCBHb3Zlcm5tZW50IEFyZWEuIDwvcD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyXzEyIGludHJvIGNmIj4gICAgICAgICAgICA8IS0tIE5hdmlnYXRpb24gLS0+DQogICAgICAgICAgICA8bmF2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWRlZmF1bHQgbmF2YmFyLXN0YXRpYy10b3AiIHJvbGU9Im5hdmlnYXRpb24iIHN0eWxlPSJtYXJnaW4tYm90dG9tOiAwIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJuYXZiYXItdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIubmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5Ub2dnbGUgbmF2aWdhdGlvbjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXZiYXItYnJhbmQiIGhyZWY9IiMiPjwvYT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLWhlYWRlciAtLT4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItdG9wLWxpbmtzIG5hdmJhci1yaWdodCBoaWRkZW4teHMgaGlkZGVuLXNtIGhpZGRlbi1tZCI+DQogICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGlkPSJwcmludEljb24iIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXByaW50IiBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1kZWZhdWx0IHNpZGViYXIiIHJvbGU9Im5hdmlnYXRpb24iPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaWRlYmFyLW5hdiBuYXZiYXItY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJzaWRlLW1lbnUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb24gVHJhY2tlcjxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0Fib3V0IHRhcmdldD1fc2VsZj5XaGF0IGlzIEFwcGxpY2F0aW9uIFRyYWNrZXI/PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0Rpc2NsYWltZXIgdGFyZ2V0PV9zZWxmPkRpc2NsYWltZXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvSW5kZXggdGFyZ2V0PT5BcHBsaWNhdGlvbiBUcmFja2VyIEhvbWU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvU2VhcmNoIGlkPXNlYXJjaCB0YXJnZXQ9X3NlbGY+U2VhcmNoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9SZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPVRydWUmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIGlkPW91dHN0YW5kaW5nLWFwcHMgdGFyZ2V0PV9zZWxmPlVuZGV0ZXJtaW5lZCBBcHBsaWNhdGlvbnM8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P1JlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1UcnVlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgaWQ9ZXhoaWJpdGVkLWFwcHMgdGFyZ2V0PV9zZWxmPkFwcGxpY2F0aW9ucyBPbiBFeGhpYml0aW9uPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9ucyBTdWJtaXR0ZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTUlMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+VGhpcyBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT03JTJmMDMlMmYyMDIxJkRhdGVUbz0xMyUyZjAzJTJmMjAyMSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjAzJTJmMjAyMSZEYXRlVG89MTUlMmYwMyUyZjIwMjEmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDIlMmYyMDIxJkRhdGVUbz0yOCUyZjAyJTJmMjAyMSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIERldGVybWluZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTUlMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTclMmYwMyUyZjIwMjEmRGF0ZVRvPTEzJTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5MYXN0IFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDIlMmYyMDIxJkRhdGVUbz0yOCUyZjAyJTJmMjAyMSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uc2lkZWJhci1jb2xsYXBzZSAtLT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gKDUuMjAxOS4xNjIuMSk8L2gyPg0KICAgIDwvZGl2Pg0KICAgIDxoND5EZXRhaWxlZCBpbmZvcm1hdGlvbiByZWxhdGVkIHRvIHRoZSBhcHBsaWNhdGlvbjo8L2g0Pg0KICAgIDxiciAvPg0KICAgIDxkaXY+DQogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6c2hvd0FsbCgpOyI+U2hvdyBBbGw8L2E+IC8NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpoaWRlQWxsKCk7Ij5IaWRlIEFsbDwvYT4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGlkPSJhcHBsaWNhdGlvbiI+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZGV0YWlscyI+PGEgaHJlZj0iIyI+RGV0YWlsczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGVzY3JpcHRpb246IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRBMTkvMTYyIC0gMzkgWmFkb2MgU3RyZWV0IC0gR2FyYWdlIGFuZCBjYXJwb3J0PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlN1Ym1pdHRlZCBEYXRlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE0LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFR5cGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldmVsb3BtZW50IEFwcGxpY2F0aW9uPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InByb3BlcnRpZXMiPjxhIGhyZWY9IiMiPlByb3BlcnRpZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjM2IFphZG9jIFN0LCBMaXNtb3JlIDI0ODAgTlNXICAoRFAgNDQ1MzIzIGxvdCBBKTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJwZW9wbGUiPjxhIGhyZWY9IiMiPlBlb3BsZTwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwcGxpY2FudDogUm9ieW5uIEdvZGRhcmQNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcmluY2lwYWwgQ2VydGlmeWluZyBBdXRob3JpdHk6ICANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9Im9mZmljZXIiPjxhIGhyZWY9IiMiPk9mZmljZXI8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFuZHJldyBXZWlyPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9ImRlY2lzaW9uIj48YSBocmVmPSIjIj5EZWNpc2lvbjwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gU3RhdHVzOiBEZXRlcm1pbmVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXRlcm1pbmF0aW9uIERhdGU6DQoyNy8wNi8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXRlcm1pbmF0aW9uIFR5cGU6IENvbmRpdGlvbmFsIENvbnNlbnQgLSBDb3VuY2lsIFN0YWZmPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9ImVzdGltYXRlZENvc3QiPjxhIGhyZWY9IiMiPkVzdGltYXRlZCBDb3N0PC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4kMC4wMDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJ0cmFja2luZyI+PGEgaHJlZj0iIyI+VHJhY2tpbmc8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21tZW5jZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RHVlIERhdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Q29tcGxldGVkIERhdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gUmVjZWl2ZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTQvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNC8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNy8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlNpdGUgVmlzaXQvSW5pdGlhbCBSZXZpZXc8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTcvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowNy8wNi8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowNi8wNi8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkNvbnNlbnQgTm90aWNlIElzc3VlZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNy8wNi8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI3LzA2LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI3LzA2LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0icmVsYXRlZEFwcGxpY2F0aW9ucyI+PGEgaHJlZj0iIyI+UmVsYXRlZCBBcHBsaWNhdGlvbnM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxiPk5vIGRhdGEuPC9iPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KDQoNCg0KDQoNCjxoMyBpZD0iZG9jdW1lbnRzIj48YSBocmVmPSIjIj5Eb2N1bWVudHM8L2E+PC9oMz4NCjxkaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi13cmFwIj4NCiAgICAgICAgICAgIDxzcGFuPnN3aXBlIHRhYmxlIHRvIHRoZSBsZWZ0IHRvIHJldmVhbCBtb3JlIGRhdGE8L3NwYW4+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgaWQ9ImRvYy1jb3VudCI+VG90YWwgbnVtYmVyIG9mIGRvY3VtZW50czogMTwvZGl2Pg0KICAgIDx0YWJsZSBpZD0iZG9jLXRhYmxlIiBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1ib3JkZXJlZCBuby1mb290ZXIiPg0KICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgPHRoPlJlY29yZCBOdW1iZXI8L3RoPg0KICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgPHRoPkRvY3VtZW50IFR5cGU8L3RoPg0KICAgICAgICAgICAgICAgIDx0aD5TaXplPC90aD4NCiAgICAgICAgICAgICAgICA8dGg+VmlldyBMaW5rPC90aD4NCiAgICAgICAgICAgIDwvdHI+DQogICAgICAgIDwvdGhlYWQ+DQogICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFEMTkvMTI5NjI8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldmVsb3BtZW50IEFwcGxpY2F0aW9uIENvbnNlbnQgTm90aWNlIC0gMzYgWmFkb2MgU3RyZWV0IExJU01PUkUgMjQ4MDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+UERGPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDAuMTcgTUINCg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vdHJhY2tlci5saXNtb3JlLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PW15OVJ2LzlCOUlBPSIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgPC90Ym9keT4NCiAgICA8L3RhYmxlPg0KPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGgzIGlkPSJjb250YWN0VXMiPjxhIGhyZWY9IiMiPkNvbnRhY3QgVXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxwPg0KU2hvdWxkIHlvdSB3aXNoIHRvIGNvbnRhY3QgY291bmNpbCB0byBtYWtlIGVucXVpcmllcyByZWdhcmRpbmcgYXBwbGljYXRpb25zIGRpc3BsYXllZCBvbiB0aGUgd2Vic2l0ZSwgcGxlYXNlIGNvbnRhY3QgZWl0aGVyIGJ5IGVtYWlsIDxhIHN0eWxlPSJjb2xvcjogYmx1ZSIgaHJlZj0ibWFpbHRvOmNvdW5jaWxAbGlzbW9yZS5uc3cuZ292LmF1P3N1YmplY3Q9U3VibWlzc2lvbiBmb3IgYXBwbGljYXRpb24gICg1LjIwMTkuMTYyLjEpIj5jb3VuY2lsQGxpc21vcmUubnN3Lmdvdi5hdTwvYT4sIHBob25lIDEzMDAgODcgODMgODcgZHVyaW5nIG5vcm1hbCBvZmZpY2UgaG91cnMgb3IgaW4gd3JpdGluZyB0byBQTyBCb3ggMjNBLCBMaXNtb3JlIE5TVyAyNDgwLiBBbGwgY29ycmVzcG9uZGVuY2Ugc2hvdWxkIGJlIGFkZHJlc3NlZCB0byB0aGUgR2VuZXJhbCBNYW5hZ2VyIGFuZCBxdW90ZSB0aGUgcmVsZXZhbnQgYXBwbGljYXRpb24gcmVmZXJlbmNlIG51bWJlci4NCjwvcD4NCjxwPg0KSWYgdGhlIGFwcGxpY2F0aW9uIGRpc3BsYXllZCBvbiB0aGlzIHdlYnNpdGUgaXMgdW5kZXIgY3VycmVudCBuZWlnaGJvdXIgbm90aWZpY2F0aW9uLCBwcm9wZXJ0aWVzIGNvbnNpZGVyZWQgYnkgQ291bmNpbCB0byBwb3NzaWJseSBiZSBkZXRyaW1lbnRhbGx5IGFmZmVjdGVkIHdpbGwgYmUgY29udGFjdGVkIGluZGl2aWR1YWxseSBhbmQgYWR2aXNlZCBvZiB0aGVpciBzdWJtaXNzaW9uIG9wcG9ydHVuaXRpZXMgdW5kZXIgQ2hhcHRlciAxMCBMaXNtb3JlIERldmVsb3BtZW50IENvbnRyb2wgUGxhbiAyMDEyLg0KPC9wPg0KPHA+DQo8YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9jcF90aGVtZXMvZGVmYXVsdC9wYWdlLmFzcD9wPURPQy1MSFItODMtNzYtNTgiICB0YXJnZXQ9Il9ibGFuayI+Q0xJQ0sgSEVSRTwvYT4gdG8gdmlzaXQgQ291bmNpbOKAmXMgd2Vic2l0ZSBhbmQgc2VlIGZ1cnRoZXIgZGV0YWlscyBvbiB0aGUgbWFraW5nIG9mIHN1Ym1pc3Npb25zIG9yIHJpbmcgMTMwMCA4NyA4MyA4NyBkdXJpbmcgbm9ybWFsIG9mZmljZSBob3Vycy4NCjwvcD4NCjwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9Im5vdGlmaWVkQWRkcmVzc2VzIj48YSBocmVmPSIjIj5Ob3RpZmllZCBBZGRyZXNzZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxiPk5vIGRhdGEuPC9iPg0KICAgICAgICAgICAgPC9kaXY+DQoNCjxoMyBpZD0iZ29vZ2xlbWFwcyI+PGEgaHJlZj0iIyI+R29vZ2xlIE1hcHM8L2E+PC9oMz4NCjxkaXYgaWQ9Im1hcF9jb250YWluZXIiPg0KICAgIDxkaXYgaWQ9Im1hcF9jYW52YXMiIGNsYXNzPSJpZnJhbWUtcndkIj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KDQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoNCiAgICB3aW5kb3cub25sb2FkID0gbG9hZEdvb2dsZU1hcHNTY3JpcHQ7DQoNCiAgICB2YXIgZ2VvY29kZXI7DQogICAgdmFyIG1hcDsNCiAgICB2YXIgdGltZW91dCA9IDMwMDsNCiAgICB2YXIgcHJvcGVydGllcyA9IFsiMzYgWmFkb2MgU3QsIExpc21vcmUgMjQ4MCBOU1cgIl07DQogICAgdmFyIGxhdExuZ0FyciA9IFtdOw0KDQogICAgZnVuY3Rpb24gbG9hZEdvb2dsZU1hcHNTY3JpcHQoKSB7DQogICAgICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTsNCiAgICAgICAgc2NyaXB0LnR5cGUgPSAidGV4dC9qYXZhc2NyaXB0IjsNCiAgICAgICAgc2NyaXB0LnNyYyA9ICIvL21hcHMuZ29vZ2xlYXBpcy5jb20vbWFwcy9hcGkvanM/a2V5PUFJemFTeUE4eWIwTHpWWHhNdmgtM1VjNmJvM1QtQm1sRjZZdHZuNCZjYWxsYmFjaz1sb2FkR29vZ2xlTWFwcyI7DQogICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiByZW5kZXJHb29nbGVNYXBzKCkNCiAgICB7DQogICAgICAgIHZhciBtYXBPcHRpb25zID0gew0KICAgICAgICAgICAgY2VudGVyOiBsYXRMbmdBcnJbMF0sDQogICAgICAgICAgICB6b29tOiAxNiwNCiAgICAgICAgICAgIG1hcFR5cGVJZDogZ29vZ2xlLm1hcHMuTWFwVHlwZUlkLlJPQURNQVAsDQogICAgICAgICAgICBtYXBUeXBlQ29udHJvbDogZmFsc2UNCiAgICAgICAgfQ0KDQogICAgICAgIG1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1hcF9jYW52YXMiKSwgbWFwT3B0aW9ucyk7DQoNCiAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkRG9tTGlzdGVuZXIod2luZG93LCAncmVzaXplJywgZnVuY3Rpb24oKSB7DQogICAgICAgICAgICB2YXIgY2VudGVyID0gbWFwLmdldENlbnRlcigpOw0KICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcihtYXAsICdyZXNpemUnKTsNCiAgICAgICAgICAgIG1hcC5zZXRDZW50ZXIoY2VudGVyKTsNCiAgICAgICAgfSk7DQoNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBsb2FkR29vZ2xlTWFwcygpIHsNCiAgICAgICAgZ2VvY29kZXIgPSBuZXcgZ29vZ2xlLm1hcHMuR2VvY29kZXIoKTsNCiAgICAgICAgdmFyIG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCA9IDA7DQoNCiAgICAgICAgJChwcm9wZXJ0aWVzKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkgew0KICAgICAgICAgICAgdmFyIHByb3BlcnR5QWRkcmVzcyA9IGVsZW1lbnQ7DQoNCiAgICAgICAgICAgIC8vR2V0IGdlb2NvZGUNCiAgICAgICAgICAgIGdlb2NvZGVyLmdlb2NvZGUoeyAnYWRkcmVzcyc6IHByb3BlcnR5QWRkcmVzcyB9LCBmdW5jdGlvbiAocmVzdWx0cywgc3RhdHVzKSB7DQogICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PSykgew0KDQogICAgICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IHJlc3VsdHNbMF0uZ2VvbWV0cnkubG9jYXRpb247DQogICAgICAgICAgICAgICAgICAgIHZhciBsYXRMbmcgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGxvY2F0aW9uLmxhdCgpLCBsb2NhdGlvbi5sbmcoKSk7DQoNCiAgICAgICAgICAgICAgICAgICAgbGF0TG5nQXJyLnB1c2gobGF0TG5nKTsNCg0KICAgICAgICAgICAgICAgICAgICBpZihsYXRMbmdBcnIubGVuZ3RoID09IDEpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckdvb2dsZU1hcHMoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIC8vQ3JlYXRlIG1hcmtlciBmb3IgbWFwIGFuZCBwbGFjZSBpdCBvbiB0aGUgbWFwDQogICAgICAgICAgICAgICAgICAgIHZhciBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBsYXRMbmcsDQogICAgICAgICAgICAgICAgICAgICAgICBtYXA6IG1hcA0KICAgICAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudFN0cmluZyA9ICc8ZGl2PjxzcGFuPicgKyBwcm9wZXJ0eUFkZHJlc3MgKyAnPC9zcGFuPjwvZGl2Pic7DQogICAgICAgICAgICAgICAgICAgIHZhciBpbmZvd2luZG93ID0gbmV3IGdvb2dsZS5tYXBzLkluZm9XaW5kb3coeyAgIC8vQ3JlYXRlIGluZm8gd2luZG93DQogICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50U3RyaW5nDQogICAgICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcmtlciwgJ2NsaWNrJywgZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpbmZvd2luZG93Lm9wZW4obWFwLCBtYXJrZXIpOw0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgLy9pZiBubyBsb2NhdGlvbiBmb3VuZCBieSBnb29nbGUgZm9yIGEgcHJvcGVydHkNCiAgICAgICAgICAgICAgICBlbHNlIGlmIChzdGF0dXMgPT0gIlpFUk9fUkVTVUxUUyIpIHsNCiAgICAgICAgICAgICAgICAgICAgbm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoKys7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYobm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoID09ICQocHJvcGVydGllcykubGVuZ3RoKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlR29vZ2xlTWFwc0NvbnRlbnQoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT1ZFUl9RVUVSWV9MSU1JVCkgew0KICAgICAgICAgICAgICAgICAgICAvL3NldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyBnZXRHZW9Db2RlRm9yQWRkcmVzcyhpZCwgYWRkcmVzcyk7IH0sICh0aW1lb3V0KSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIC8vUmVwbGFjZXMgZ29vZ2xlIG1hcHMgY29udGVudCB3aXRoIGEgbmV3IGRpdiBibG9jayB0aGF0IGhhcyBpbmZvIG1lc3NhZ2UNCiAgICBmdW5jdGlvbiByZXBsYWNlR29vZ2xlTWFwc0NvbnRlbnQoKSB7DQogICAgICAgIHZhciBuZXdDb250ZW50ID0gJzxkaXYgY2xhc3M9InVpLWFjY29yZGlvbi1jb250ZW50IHVpLWhlbHBlci1yZXNldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYm90dG9tIj4nICsNCiAgICAgICAgICAgICc8cD5Db3VsZG5cJ3QgZmluZCB0aGUgcHJvcGVydHkgYWRkcmVzcyhlcykgb24gR29vZ2xlIE1hcHMuIDxwPicgKw0KICAgICAgICAgICAgJzwvZGl2Pic7DQoNCiAgICAgICAgJCgnI21hcF9jb250YWluZXInKS5yZXBsYWNlV2l0aChuZXdDb250ZW50KTsNCiAgICB9DQoNCjwvc2NyaXB0Pg0KDQogICAgPC9kaXY+DQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICQuZm4udG9nZ2xlcGFuZWxzID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCJ1aS1hY2NvcmRpb24gdWktYWNjb3JkaW9uLWljb25zIHVpLWhlbHBlci1yZXNldCIpDQogICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgiaDMiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCJ1aS1hY2NvcmRpb24taGVhZGVyIHVpLWhlbHBlci1yZXNldCB1aS1zdGF0ZS1kZWZhdWx0IHVpLWNvcm5lci10b3AgdWktY29ybmVyLWJvdHRvbSIpDQogICAgICAgICAgICAgICAgICAgICAgICAuaG92ZXIoZnVuY3Rpb24gKCkgeyAkKHRoaXMpLnRvZ2dsZUNsYXNzKCJ1aS1zdGF0ZS1ob3ZlciIpOyB9KQ0KICAgICAgICAgICAgICAgICAgICAgICAgLnByZXBlbmQoJzxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tdXAiPjwvc3Bhbj4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmNsaWNrKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKCJ1aS1hY2NvcmRpb24taGVhZGVyLWFjdGl2ZSB1aS1zdGF0ZS1hY3RpdmUgdWktc3RhdGUtZGVmYXVsdCB1aS1jb3JuZXItYm90dG9tIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoIj4gLmdseXBoaWNvbiIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b2dnbGVDbGFzcygiZ2x5cGhpY29uLWNoZXZyb24tdXAgZ2x5cGhpY29uLWNoZXZyb24tZG93biIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbmQoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubmV4dCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zbGlkZVRvZ2dsZSgpOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5uZXh0KCkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygidWktYWNjb3JkaW9uLWNvbnRlbnQgdWktaGVscGVyLXJlc2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1ib3R0b20iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmhpZGUoKTsNCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgICQoJyNhcHBsaWNhdGlvbicpLnRvZ2dsZXBhbmVscygpOw0KDQogICAgICAgICAgICAkKCcjcHJvcGVydGllcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZGV0YWlscycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjdHJhY2tpbmcnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2RvY3VtZW50cycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjcmVsYXRlZEFwcGxpY2F0aW9ucycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZmVlcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZ29vZ2xlbWFwcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjY29udGFjdFVzJykuY2xpY2soKTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgLyogU2hvd3MgYWxsIHRoZSBwYW5lbHMgKi8NCiAgICAgICAgZnVuY3Rpb24gc2hvd0FsbCgpIHsNCiAgICAgICAgICAgICQoJyNhcHBsaWNhdGlvbicpLmNoaWxkcmVuKCJoMyIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCJ1aS1zdGF0ZS1kZWZhdWx0IikpIHsNCiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljaygpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9DQoNCiAgICAgICAgLyogSGlkZSBhbGwgdGhlIHBhbmVscyAqLw0KICAgICAgICBmdW5jdGlvbiBoaWRlQWxsKCkgew0KICAgICAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykuY2hpbGRyZW4oImgzIikuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWFjdGl2ZSIpKSB7DQogICAgICAgICAgICAgICAgICAgICQodGhpcykuY2xpY2soKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KDQogICAgPC9zY3JpcHQ+DQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8uY29udGFpbmVyLWZsdWlkIC0tPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9InByZS1mb290ZXIgY29udGFpbmVyXzEyIGNmIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdyaWRfNCI+DQogICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJhY2NkLXRvZ2ciPkNvbnRhY3QgVXMgPGkgY2xhc3M9ImZhIGZhLWNhcmV0LWRvd24iPjwvaT48L2gzPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFjY2QtY29udGFpbmVyIj4NCiAgICAgICAgICAgICAgICAgICAgPHA+TGlzbW9yZSBDaXR5IENvdW5jaWw8YnI+QUJOOiA2MCAwODAgOTMyIDgzNzwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHA+NDMgT2xpdmVyIEF2ZW51ZTxicj5Hb29uZWxsYWJhaCBOU1cgMjQ4MDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHA+UG9zdDogUE8gQm94IDIzQSwgTGlzbW9yZSBOU1cgMjQ4MDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHA+UGhvbmU6IDEzMDAgODcgODMgODc8YnI+RmF4OiAwMiA2NiAyNTAgNDAwPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD5FbWFpbDogPGEgaHJlZj0ibWFpbHRvOmNvdW5jaWxAbGlzbW9yZS5uc3cuZ292LmF1Ij48c3Ryb25nPmNvdW5jaWxAbGlzbW9yZS5uc3cuZ292LmF1PC9zdHJvbmc+PC9hPjwvcD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBpZD0iZm9vdGVyIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl8xMiBjZiI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ3JpZF8xMiBjZiBvdyI+DQogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjcCI+Q29weXJpZ2h0ICZjb3B5OyAyMDIxIExpc21vcmUgQ2l0eSBDb3VuY2lsPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5saXNtb3JlLm5zdy5nb3YuYXUvcGFnZS5hc3A/cD1ET0MtT0NULTY0LTU3LTMwIiB0YXJnZXQ9Il9wYXJlbnQiPkludGVybmV0IFByaXZhY3kgU3RhdGVtZW50PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7Jm5ic3A7IHwgJm5ic3A7Jm5ic3A7DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9wYWdlLmFzcD9wPURPQy1PQ1QtNjQtNTctMzAiIHRhcmdldD0iX3BhcmVudCI+RGlzY2xhaW1lcjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICZuYnNwOyZuYnNwOyB8ICZuYnNwOyZuYnNwOw0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5saXNtb3JlLm5zdy5nb3YuYXUvY3BfdGhlbWVzL2RlZmF1bHQvc2l0ZW1hcC5hc3AiIHRhcmdldD0iX3BhcmVudCI+U2l0ZSBNYXA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCjwvYm9keT4NCjwvaHRtbD4NCg==
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000119.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:47:27 GMT
      Content-Length:
      - '31803'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2018.00000147.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:47:31 GMT
      Content-Length:
      - '31391'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000130.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:47:36 GMT
      Content-Length:
      - '31164'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000129.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:47:40 GMT
      Content-Length:
      - '30858'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000129.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:47:45 GMT
      Content-Length:
      - '30454'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iTGlzbW9yZSBDaXR5IENvdW5jaWwsREEgVHJhY2tlcixBcHBsaWNhdGlvbiBUcmFja2VyLERldmVsb3BtZW50IEFwcGxpY2F0aW9uLERldmVsb3BtZW50IEFwcGxpY2F0aW9uIFRyYWNraW5nLCBEQSBFbnF1aXJ5LCBEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBFbnF1aXJ5LCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iVGhlIG9mZmljaWFsIExpc21vcmUgQ2l0eSBDb3VuY2lsIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KDQogICAgPHRpdGxlPkxpc21vcmUgQ2l0eSBDb3VuY2lsIC0gQXBwbGljYXRpb24gVHJhY2tlcjwvdGl0bGU+DQoNCiAgICA8IS0tZmF2aWNvbi0tPg0KICAgIDxsaW5rIGhyZWY9Ii9mYXZpY29uLmljbyIgcmVsPSJzaG9ydGN1dCBpY29uIiB0eXBlPSJpbWFnZS94LWljb24iPg0KDQogICAgPCEtLSBqUXVlcnkgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0xLjExLjEuanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjExLjIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvY29yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvYWNjb3JkaW9uLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS90aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC10aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBEYXRhVGFibGVzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2pxdWVyeS5kYXRhVGFibGVzLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMuYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuc2NzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gQm9vdHN0cmFwIFNCLUFkbWluLTIgUGx1Z2luIGFuZCBvdGhlciBjc3MgYW5kIGpzIGZpbGVzLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtY29tYm9ib3guanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtZGF0ZXBpY2tlci5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2pxdWVyeS5mb3JtLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LnRhYmxlc29ydGVyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWFzdGVydmlldy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21ldGlzTWVudS5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3NiLWFkbWluLTIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL2Nzcy9ib290c3RyYXAtY29tYm9ib3guY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvZGF0ZXBpY2tlcjMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVydmlldy1jdXN0b21pc2F0aW9ucy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9zYi1hZG1pbi0yLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDxsaW5rIGhyZWY9Ii9Db3VuY2lsX1RoZW1lL0xpc21vcmUvbGlzbW9yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgDQoNCiAgICA8IS0tIEhUTUw1IFNoaW0gYW5kIFJlc3BvbmQuanMgSUU4IHN1cHBvcnQgb2YgSFRNTDUgZWxlbWVudHMgYW5kIG1lZGlhIHF1ZXJpZXMgLS0+DQogICAgPCEtLSBXQVJOSU5HOiBSZXNwb25kLmpzIGRvZXNuJ3Qgd29yayBpZiB5b3UgdmlldyB0aGUgcGFnZSB2aWEgZmlsZTovLyAtLT4NCiAgICA8IS0tW2lmIGx0IElFIDldPg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL2h0bWw1c2hpdi8zLjcuMC9odG1sNXNoaXYuanMiPjwvc2NyaXB0Pg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL3Jlc3BvbmQuanMvMS40LjIvcmVzcG9uZC5taW4uanMiPjwvc2NyaXB0Pg0KICAgIDwhW2VuZGlmXS0tPg0KDQogICAgPGxpbmsgaHJlZj0naHR0cDovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9UmFsZXdheTozMDAsNDAwLDYwMCw3MDAnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPg0KICAgIDxsaW5rIGhyZWY9J2h0dHA6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PU9zd2FsZDozMDAsNDAwLDcwMCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQo8L2hlYWQ+DQoNCg0KPGJvZHkgY2xhc3M9ImNicC1zcG1lbnUtcHVzaCI+DQogICAgPGRpdiBjbGFzcz0id3IiPg0KICAgICAgICA8ZGl2IGlkPSJoZWFkZXIiPg0KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl8xMiI+DQoNCiAgICAgICAgPGgxIGlkPSJsb2dvIj48YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9kZWZhdWx0LmFzcCI+PGltZyBzcmM9Ii8vY2FuZGlkYXRlLW9mZmljZS5zMy5hbWF6b25hd3MuY29tL3NoYXJlZC9saXNtb3JlL2ltYWdlcy9sb2dvLnBuZyIgYWx0PSJMaXNtb3JlIENpdHkgQ291bmNpbCIgc3R5bGU9InBhZGRpbmctdG9wOjVweCI+PHN0cm9uZyBjbGFzcz0idmgiPkxpc21vcmUgQ2l0eSBDb3VuY2lsPC9zdHJvbmc+PC9hPjwvaDE+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0idXRpbGl0eSByaWdodCI+DQogICAgICAgICAgICA8YSBjbGFzcz0iaG9tZS1saW5rIiBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9kZWZhdWx0LmFzcCI+DQogICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vY2FuZGlkYXRlLW9mZmljZS5zMy5hbWF6b25hd3MuY29tL3NoYXJlZC9saXNtb3JlL2ltYWdlcy9ob21lLnBuZyIgYWx0PSJMaXNtb3JlIENpdHkgQ291bmNpbCI+DQogICAgICAgICAgICA8L2E+DQogICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyIj4NCiAgICAgICAgPC9kaXY+DQoNCiAgICA8L2Rpdj4NCjwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJiYW5uZXIiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmFubmVyLXRleHQgY2YiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJhbm5lci10ZXh0LWNvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzcz0ib3ciPkRBIFRyYWNraW5nIDxzcGFuPlBvcnRhbDwvc3Bhbj48L2gxPg0KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibm0iPkluZm9ybWF0aW9uIG9uIGRldmVsb3BtZW50IGFwcGxpY2F0aW9ucyBpbiB0aGUgTGlzbW9yZSBMb2NhbCBHb3Zlcm5tZW50IEFyZWEuIDwvcD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyXzEyIGludHJvIGNmIj4gICAgICAgICAgICA8IS0tIE5hdmlnYXRpb24gLS0+DQogICAgICAgICAgICA8bmF2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWRlZmF1bHQgbmF2YmFyLXN0YXRpYy10b3AiIHJvbGU9Im5hdmlnYXRpb24iIHN0eWxlPSJtYXJnaW4tYm90dG9tOiAwIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJuYXZiYXItdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIubmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5Ub2dnbGUgbmF2aWdhdGlvbjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXZiYXItYnJhbmQiIGhyZWY9IiMiPjwvYT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLWhlYWRlciAtLT4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItdG9wLWxpbmtzIG5hdmJhci1yaWdodCBoaWRkZW4teHMgaGlkZGVuLXNtIGhpZGRlbi1tZCI+DQogICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGlkPSJwcmludEljb24iIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXByaW50IiBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1kZWZhdWx0IHNpZGViYXIiIHJvbGU9Im5hdmlnYXRpb24iPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaWRlYmFyLW5hdiBuYXZiYXItY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJzaWRlLW1lbnUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb24gVHJhY2tlcjxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0Fib3V0IHRhcmdldD1fc2VsZj5XaGF0IGlzIEFwcGxpY2F0aW9uIFRyYWNrZXI/PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0Rpc2NsYWltZXIgdGFyZ2V0PV9zZWxmPkRpc2NsYWltZXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvSW5kZXggdGFyZ2V0PT5BcHBsaWNhdGlvbiBUcmFja2VyIEhvbWU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvU2VhcmNoIGlkPXNlYXJjaCB0YXJnZXQ9X3NlbGY+U2VhcmNoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9SZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPVRydWUmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIGlkPW91dHN0YW5kaW5nLWFwcHMgdGFyZ2V0PV9zZWxmPlVuZGV0ZXJtaW5lZCBBcHBsaWNhdGlvbnM8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P1JlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1UcnVlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgaWQ9ZXhoaWJpdGVkLWFwcHMgdGFyZ2V0PV9zZWxmPkFwcGxpY2F0aW9ucyBPbiBFeGhpYml0aW9uPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9ucyBTdWJtaXR0ZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTUlMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+VGhpcyBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT03JTJmMDMlMmYyMDIxJkRhdGVUbz0xMyUyZjAzJTJmMjAyMSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjAzJTJmMjAyMSZEYXRlVG89MTUlMmYwMyUyZjIwMjEmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDIlMmYyMDIxJkRhdGVUbz0yOCUyZjAyJTJmMjAyMSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIERldGVybWluZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTUlMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTclMmYwMyUyZjIwMjEmRGF0ZVRvPTEzJTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5MYXN0IFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDIlMmYyMDIxJkRhdGVUbz0yOCUyZjAyJTJmMjAyMSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uc2lkZWJhci1jb2xsYXBzZSAtLT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gKDUuMjAxOS4xMjkuMSk8L2gyPg0KICAgIDwvZGl2Pg0KICAgIDxoND5EZXRhaWxlZCBpbmZvcm1hdGlvbiByZWxhdGVkIHRvIHRoZSBhcHBsaWNhdGlvbjo8L2g0Pg0KICAgIDxiciAvPg0KICAgIDxkaXY+DQogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6c2hvd0FsbCgpOyI+U2hvdyBBbGw8L2E+IC8NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpoaWRlQWxsKCk7Ij5IaWRlIEFsbDwvYT4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGlkPSJhcHBsaWNhdGlvbiI+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZGV0YWlscyI+PGEgaHJlZj0iIyI+RGV0YWlsczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGVzY3JpcHRpb246IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRBMTkvMTI5IC0gMTI3IFRlcmFuaWEgU3QgLSBGcm9udCBmZW5jZSAoMS44bSBzcGVhciB0b3AgcGFuZWwgZmVuY2UpPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlN1Ym1pdHRlZCBEYXRlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIzLzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFR5cGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldmVsb3BtZW50IEFwcGxpY2F0aW9uPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InByb3BlcnRpZXMiPjxhIGhyZWY9IiMiPlByb3BlcnRpZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjEyNyBUZXJhbmlhIFN0LCBOb3J0aCBMaXNtb3JlIDI0ODAgTlNXICAoRFAgMTc0MDUgbG90IDcpPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InBlb3BsZSI+PGEgaHJlZj0iIyI+UGVvcGxlPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwbGljYW50OiBHYWlsIENvcm9uYWtlcw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwcGxpY2FudDogUGF1bCBDb3JvbmFrZXMNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCdWlsZGVyOiAgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJpbmNpcGFsIENlcnRpZnlpbmcgQXV0aG9yaXR5OiAgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJvZmZpY2VyIj48YSBocmVmPSIjIj5PZmZpY2VyPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Sb2JpbiBSdWR3aWNrPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9ImRlY2lzaW9uIj48YSBocmVmPSIjIj5EZWNpc2lvbjwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gU3RhdHVzOiBEZXRlcm1pbmVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXRlcm1pbmF0aW9uIERhdGU6DQoyMC8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXRlcm1pbmF0aW9uIFR5cGU6IENvbmRpdGlvbmFsIENvbnNlbnQgLSBDb3VuY2lsIFN0YWZmPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9ImVzdGltYXRlZENvc3QiPjxhIGhyZWY9IiMiPkVzdGltYXRlZCBDb3N0PC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4kNCw1MzIuMDA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0idHJhY2tpbmciPjxhIGhyZWY9IiMiPlRyYWNraW5nPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLXdyYXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+c3dpcGUgdGFibGUgdG8gdGhlIGxlZnQgdG8gcmV2ZWFsIG1vcmUgZGF0YTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWFycm93LXJpZ2h0IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG5vLWZvb3RlciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGVzY3JpcHRpb248L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Q29tbWVuY2VkIERhdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkR1ZSBEYXRlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNvbXBsZXRlZCBEYXRlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFJlY2VpdmVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIzLzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjMvMDQvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjQvMDQvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5TaXRlIFZpc2l0L0luaXRpYWwgUmV2aWV3PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI0LzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTUvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDMvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5SZWZlcnJlZCBFbmdpbmVlciBPZmZpY2VyPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI0LzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDgvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTMvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BZGpvaW5pbmcgT3duZXIgTm90aWZpY2F0aW9uPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI0LzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDgvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDgvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Db25zZW50IE5vdGljZSBJc3N1ZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjIvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyMi8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyMi8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQogICAgICAgICAgICA8aDMgaWQ9InJlbGF0ZWRBcHBsaWNhdGlvbnMiPjxhIGhyZWY9IiMiPlJlbGF0ZWQgQXBwbGljYXRpb25zPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLXdyYXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+c3dpcGUgdGFibGUgdG8gdGhlIGxlZnQgdG8gcmV2ZWFsIG1vcmUgZGF0YTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWFycm93LXJpZ2h0IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG5vLWZvb3RlciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+QXBwbGljYXRpb24gVHlwZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5BcHBsaWNhdGlvbiBOdW1iZXI8L3RoPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb25zdHJ1Y3Rpb24gQ2VydGlmaWNhdGUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly90cmFja2VyLmxpc21vcmUubnN3Lmdvdi5hdS9BcHBsaWNhdGlvbi9BcHBsaWNhdGlvbkRldGFpbHMvMDEwLjIwMTkuMDAwMDAxMjkuMDAxLyI+MTAuMjAxOS4xMjkuMTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQoNCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCg0KDQoNCg0KDQo8aDMgaWQ9ImRvY3VtZW50cyI+PGEgaHJlZj0iIyI+RG9jdW1lbnRzPC9hPjwvaDM+DQo8ZGl2Pg0KDQogICAgICAgIDxiPk5vIGRhdGEuPC9iPg0KPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGgzIGlkPSJjb250YWN0VXMiPjxhIGhyZWY9IiMiPkNvbnRhY3QgVXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxwPg0KU2hvdWxkIHlvdSB3aXNoIHRvIGNvbnRhY3QgY291bmNpbCB0byBtYWtlIGVucXVpcmllcyByZWdhcmRpbmcgYXBwbGljYXRpb25zIGRpc3BsYXllZCBvbiB0aGUgd2Vic2l0ZSwgcGxlYXNlIGNvbnRhY3QgZWl0aGVyIGJ5IGVtYWlsIDxhIHN0eWxlPSJjb2xvcjogYmx1ZSIgaHJlZj0ibWFpbHRvOmNvdW5jaWxAbGlzbW9yZS5uc3cuZ292LmF1P3N1YmplY3Q9U3VibWlzc2lvbiBmb3IgYXBwbGljYXRpb24gICg1LjIwMTkuMTI5LjEpIj5jb3VuY2lsQGxpc21vcmUubnN3Lmdvdi5hdTwvYT4sIHBob25lIDEzMDAgODcgODMgODcgZHVyaW5nIG5vcm1hbCBvZmZpY2UgaG91cnMgb3IgaW4gd3JpdGluZyB0byBQTyBCb3ggMjNBLCBMaXNtb3JlIE5TVyAyNDgwLiBBbGwgY29ycmVzcG9uZGVuY2Ugc2hvdWxkIGJlIGFkZHJlc3NlZCB0byB0aGUgR2VuZXJhbCBNYW5hZ2VyIGFuZCBxdW90ZSB0aGUgcmVsZXZhbnQgYXBwbGljYXRpb24gcmVmZXJlbmNlIG51bWJlci4NCjwvcD4NCjxwPg0KSWYgdGhlIGFwcGxpY2F0aW9uIGRpc3BsYXllZCBvbiB0aGlzIHdlYnNpdGUgaXMgdW5kZXIgY3VycmVudCBuZWlnaGJvdXIgbm90aWZpY2F0aW9uLCBwcm9wZXJ0aWVzIGNvbnNpZGVyZWQgYnkgQ291bmNpbCB0byBwb3NzaWJseSBiZSBkZXRyaW1lbnRhbGx5IGFmZmVjdGVkIHdpbGwgYmUgY29udGFjdGVkIGluZGl2aWR1YWxseSBhbmQgYWR2aXNlZCBvZiB0aGVpciBzdWJtaXNzaW9uIG9wcG9ydHVuaXRpZXMgdW5kZXIgQ2hhcHRlciAxMCBMaXNtb3JlIERldmVsb3BtZW50IENvbnRyb2wgUGxhbiAyMDEyLg0KPC9wPg0KPHA+DQo8YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9jcF90aGVtZXMvZGVmYXVsdC9wYWdlLmFzcD9wPURPQy1MSFItODMtNzYtNTgiICB0YXJnZXQ9Il9ibGFuayI+Q0xJQ0sgSEVSRTwvYT4gdG8gdmlzaXQgQ291bmNpbOKAmXMgd2Vic2l0ZSBhbmQgc2VlIGZ1cnRoZXIgZGV0YWlscyBvbiB0aGUgbWFraW5nIG9mIHN1Ym1pc3Npb25zIG9yIHJpbmcgMTMwMCA4NyA4MyA4NyBkdXJpbmcgbm9ybWFsIG9mZmljZSBob3Vycy4NCjwvcD4NCjwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9Im5vdGlmaWVkQWRkcmVzc2VzIj48YSBocmVmPSIjIj5Ob3RpZmllZCBBZGRyZXNzZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxiPk5vIGRhdGEuPC9iPg0KICAgICAgICAgICAgPC9kaXY+DQoNCjxoMyBpZD0iZ29vZ2xlbWFwcyI+PGEgaHJlZj0iIyI+R29vZ2xlIE1hcHM8L2E+PC9oMz4NCjxkaXYgaWQ9Im1hcF9jb250YWluZXIiPg0KICAgIDxkaXYgaWQ9Im1hcF9jYW52YXMiIGNsYXNzPSJpZnJhbWUtcndkIj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KDQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoNCiAgICB3aW5kb3cub25sb2FkID0gbG9hZEdvb2dsZU1hcHNTY3JpcHQ7DQoNCiAgICB2YXIgZ2VvY29kZXI7DQogICAgdmFyIG1hcDsNCiAgICB2YXIgdGltZW91dCA9IDMwMDsNCiAgICB2YXIgcHJvcGVydGllcyA9IFsiMTI3IFRlcmFuaWEgU3QsIE5vcnRoIExpc21vcmUgMjQ4MCBOU1cgIl07DQogICAgdmFyIGxhdExuZ0FyciA9IFtdOw0KDQogICAgZnVuY3Rpb24gbG9hZEdvb2dsZU1hcHNTY3JpcHQoKSB7DQogICAgICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTsNCiAgICAgICAgc2NyaXB0LnR5cGUgPSAidGV4dC9qYXZhc2NyaXB0IjsNCiAgICAgICAgc2NyaXB0LnNyYyA9ICIvL21hcHMuZ29vZ2xlYXBpcy5jb20vbWFwcy9hcGkvanM/a2V5PUFJemFTeUE4eWIwTHpWWHhNdmgtM1VjNmJvM1QtQm1sRjZZdHZuNCZjYWxsYmFjaz1sb2FkR29vZ2xlTWFwcyI7DQogICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiByZW5kZXJHb29nbGVNYXBzKCkNCiAgICB7DQogICAgICAgIHZhciBtYXBPcHRpb25zID0gew0KICAgICAgICAgICAgY2VudGVyOiBsYXRMbmdBcnJbMF0sDQogICAgICAgICAgICB6b29tOiAxNiwNCiAgICAgICAgICAgIG1hcFR5cGVJZDogZ29vZ2xlLm1hcHMuTWFwVHlwZUlkLlJPQURNQVAsDQogICAgICAgICAgICBtYXBUeXBlQ29udHJvbDogZmFsc2UNCiAgICAgICAgfQ0KDQogICAgICAgIG1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1hcF9jYW52YXMiKSwgbWFwT3B0aW9ucyk7DQoNCiAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkRG9tTGlzdGVuZXIod2luZG93LCAncmVzaXplJywgZnVuY3Rpb24oKSB7DQogICAgICAgICAgICB2YXIgY2VudGVyID0gbWFwLmdldENlbnRlcigpOw0KICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcihtYXAsICdyZXNpemUnKTsNCiAgICAgICAgICAgIG1hcC5zZXRDZW50ZXIoY2VudGVyKTsNCiAgICAgICAgfSk7DQoNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBsb2FkR29vZ2xlTWFwcygpIHsNCiAgICAgICAgZ2VvY29kZXIgPSBuZXcgZ29vZ2xlLm1hcHMuR2VvY29kZXIoKTsNCiAgICAgICAgdmFyIG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCA9IDA7DQoNCiAgICAgICAgJChwcm9wZXJ0aWVzKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkgew0KICAgICAgICAgICAgdmFyIHByb3BlcnR5QWRkcmVzcyA9IGVsZW1lbnQ7DQoNCiAgICAgICAgICAgIC8vR2V0IGdlb2NvZGUNCiAgICAgICAgICAgIGdlb2NvZGVyLmdlb2NvZGUoeyAnYWRkcmVzcyc6IHByb3BlcnR5QWRkcmVzcyB9LCBmdW5jdGlvbiAocmVzdWx0cywgc3RhdHVzKSB7DQogICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PSykgew0KDQogICAgICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IHJlc3VsdHNbMF0uZ2VvbWV0cnkubG9jYXRpb247DQogICAgICAgICAgICAgICAgICAgIHZhciBsYXRMbmcgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGxvY2F0aW9uLmxhdCgpLCBsb2NhdGlvbi5sbmcoKSk7DQoNCiAgICAgICAgICAgICAgICAgICAgbGF0TG5nQXJyLnB1c2gobGF0TG5nKTsNCg0KICAgICAgICAgICAgICAgICAgICBpZihsYXRMbmdBcnIubGVuZ3RoID09IDEpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckdvb2dsZU1hcHMoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIC8vQ3JlYXRlIG1hcmtlciBmb3IgbWFwIGFuZCBwbGFjZSBpdCBvbiB0aGUgbWFwDQogICAgICAgICAgICAgICAgICAgIHZhciBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBsYXRMbmcsDQogICAgICAgICAgICAgICAgICAgICAgICBtYXA6IG1hcA0KICAgICAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudFN0cmluZyA9ICc8ZGl2PjxzcGFuPicgKyBwcm9wZXJ0eUFkZHJlc3MgKyAnPC9zcGFuPjwvZGl2Pic7DQogICAgICAgICAgICAgICAgICAgIHZhciBpbmZvd2luZG93ID0gbmV3IGdvb2dsZS5tYXBzLkluZm9XaW5kb3coeyAgIC8vQ3JlYXRlIGluZm8gd2luZG93DQogICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50U3RyaW5nDQogICAgICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcmtlciwgJ2NsaWNrJywgZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpbmZvd2luZG93Lm9wZW4obWFwLCBtYXJrZXIpOw0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgLy9pZiBubyBsb2NhdGlvbiBmb3VuZCBieSBnb29nbGUgZm9yIGEgcHJvcGVydHkNCiAgICAgICAgICAgICAgICBlbHNlIGlmIChzdGF0dXMgPT0gIlpFUk9fUkVTVUxUUyIpIHsNCiAgICAgICAgICAgICAgICAgICAgbm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoKys7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYobm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoID09ICQocHJvcGVydGllcykubGVuZ3RoKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlR29vZ2xlTWFwc0NvbnRlbnQoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT1ZFUl9RVUVSWV9MSU1JVCkgew0KICAgICAgICAgICAgICAgICAgICAvL3NldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyBnZXRHZW9Db2RlRm9yQWRkcmVzcyhpZCwgYWRkcmVzcyk7IH0sICh0aW1lb3V0KSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIC8vUmVwbGFjZXMgZ29vZ2xlIG1hcHMgY29udGVudCB3aXRoIGEgbmV3IGRpdiBibG9jayB0aGF0IGhhcyBpbmZvIG1lc3NhZ2UNCiAgICBmdW5jdGlvbiByZXBsYWNlR29vZ2xlTWFwc0NvbnRlbnQoKSB7DQogICAgICAgIHZhciBuZXdDb250ZW50ID0gJzxkaXYgY2xhc3M9InVpLWFjY29yZGlvbi1jb250ZW50IHVpLWhlbHBlci1yZXNldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYm90dG9tIj4nICsNCiAgICAgICAgICAgICc8cD5Db3VsZG5cJ3QgZmluZCB0aGUgcHJvcGVydHkgYWRkcmVzcyhlcykgb24gR29vZ2xlIE1hcHMuIDxwPicgKw0KICAgICAgICAgICAgJzwvZGl2Pic7DQoNCiAgICAgICAgJCgnI21hcF9jb250YWluZXInKS5yZXBsYWNlV2l0aChuZXdDb250ZW50KTsNCiAgICB9DQoNCjwvc2NyaXB0Pg0KDQogICAgPC9kaXY+DQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICQuZm4udG9nZ2xlcGFuZWxzID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCJ1aS1hY2NvcmRpb24gdWktYWNjb3JkaW9uLWljb25zIHVpLWhlbHBlci1yZXNldCIpDQogICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgiaDMiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCJ1aS1hY2NvcmRpb24taGVhZGVyIHVpLWhlbHBlci1yZXNldCB1aS1zdGF0ZS1kZWZhdWx0IHVpLWNvcm5lci10b3AgdWktY29ybmVyLWJvdHRvbSIpDQogICAgICAgICAgICAgICAgICAgICAgICAuaG92ZXIoZnVuY3Rpb24gKCkgeyAkKHRoaXMpLnRvZ2dsZUNsYXNzKCJ1aS1zdGF0ZS1ob3ZlciIpOyB9KQ0KICAgICAgICAgICAgICAgICAgICAgICAgLnByZXBlbmQoJzxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tdXAiPjwvc3Bhbj4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmNsaWNrKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKCJ1aS1hY2NvcmRpb24taGVhZGVyLWFjdGl2ZSB1aS1zdGF0ZS1hY3RpdmUgdWktc3RhdGUtZGVmYXVsdCB1aS1jb3JuZXItYm90dG9tIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoIj4gLmdseXBoaWNvbiIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b2dnbGVDbGFzcygiZ2x5cGhpY29uLWNoZXZyb24tdXAgZ2x5cGhpY29uLWNoZXZyb24tZG93biIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbmQoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubmV4dCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zbGlkZVRvZ2dsZSgpOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5uZXh0KCkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygidWktYWNjb3JkaW9uLWNvbnRlbnQgdWktaGVscGVyLXJlc2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1ib3R0b20iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmhpZGUoKTsNCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgICQoJyNhcHBsaWNhdGlvbicpLnRvZ2dsZXBhbmVscygpOw0KDQogICAgICAgICAgICAkKCcjcHJvcGVydGllcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZGV0YWlscycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjdHJhY2tpbmcnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2RvY3VtZW50cycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjcmVsYXRlZEFwcGxpY2F0aW9ucycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZmVlcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZ29vZ2xlbWFwcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjY29udGFjdFVzJykuY2xpY2soKTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgLyogU2hvd3MgYWxsIHRoZSBwYW5lbHMgKi8NCiAgICAgICAgZnVuY3Rpb24gc2hvd0FsbCgpIHsNCiAgICAgICAgICAgICQoJyNhcHBsaWNhdGlvbicpLmNoaWxkcmVuKCJoMyIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCJ1aS1zdGF0ZS1kZWZhdWx0IikpIHsNCiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljaygpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9DQoNCiAgICAgICAgLyogSGlkZSBhbGwgdGhlIHBhbmVscyAqLw0KICAgICAgICBmdW5jdGlvbiBoaWRlQWxsKCkgew0KICAgICAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykuY2hpbGRyZW4oImgzIikuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWFjdGl2ZSIpKSB7DQogICAgICAgICAgICAgICAgICAgICQodGhpcykuY2xpY2soKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KDQogICAgPC9zY3JpcHQ+DQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8uY29udGFpbmVyLWZsdWlkIC0tPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9InByZS1mb290ZXIgY29udGFpbmVyXzEyIGNmIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdyaWRfNCI+DQogICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJhY2NkLXRvZ2ciPkNvbnRhY3QgVXMgPGkgY2xhc3M9ImZhIGZhLWNhcmV0LWRvd24iPjwvaT48L2gzPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFjY2QtY29udGFpbmVyIj4NCiAgICAgICAgICAgICAgICAgICAgPHA+TGlzbW9yZSBDaXR5IENvdW5jaWw8YnI+QUJOOiA2MCAwODAgOTMyIDgzNzwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHA+NDMgT2xpdmVyIEF2ZW51ZTxicj5Hb29uZWxsYWJhaCBOU1cgMjQ4MDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHA+UG9zdDogUE8gQm94IDIzQSwgTGlzbW9yZSBOU1cgMjQ4MDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHA+UGhvbmU6IDEzMDAgODcgODMgODc8YnI+RmF4OiAwMiA2NiAyNTAgNDAwPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD5FbWFpbDogPGEgaHJlZj0ibWFpbHRvOmNvdW5jaWxAbGlzbW9yZS5uc3cuZ292LmF1Ij48c3Ryb25nPmNvdW5jaWxAbGlzbW9yZS5uc3cuZ292LmF1PC9zdHJvbmc+PC9hPjwvcD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBpZD0iZm9vdGVyIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl8xMiBjZiI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ3JpZF8xMiBjZiBvdyI+DQogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjcCI+Q29weXJpZ2h0ICZjb3B5OyAyMDIxIExpc21vcmUgQ2l0eSBDb3VuY2lsPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5saXNtb3JlLm5zdy5nb3YuYXUvcGFnZS5hc3A/cD1ET0MtT0NULTY0LTU3LTMwIiB0YXJnZXQ9Il9wYXJlbnQiPkludGVybmV0IFByaXZhY3kgU3RhdGVtZW50PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7Jm5ic3A7IHwgJm5ic3A7Jm5ic3A7DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9wYWdlLmFzcD9wPURPQy1PQ1QtNjQtNTctMzAiIHRhcmdldD0iX3BhcmVudCI+RGlzY2xhaW1lcjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICZuYnNwOyZuYnNwOyB8ICZuYnNwOyZuYnNwOw0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5saXNtb3JlLm5zdy5nb3YuYXUvY3BfdGhlbWVzL2RlZmF1bHQvc2l0ZW1hcC5hc3AiIHRhcmdldD0iX3BhcmVudCI+U2l0ZSBNYXA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCjwvYm9keT4NCjwvaHRtbD4NCg==
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000131.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:47:49 GMT
      Content-Length:
      - '30668'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000131.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:47:54 GMT
      Content-Length:
      - '30972'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000144.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:47:58 GMT
      Content-Length:
      - '31485'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000135.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:48:02 GMT
      Content-Length:
      - '31605'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000085.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:48:06 GMT
      Content-Length:
      - '34999'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000154.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:48:12 GMT
      Content-Length:
      - '31703'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000122.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:48:17 GMT
      Content-Length:
      - '32159'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000149.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:48:21 GMT
      Content-Length:
      - '29111'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iTGlzbW9yZSBDaXR5IENvdW5jaWwsREEgVHJhY2tlcixBcHBsaWNhdGlvbiBUcmFja2VyLERldmVsb3BtZW50IEFwcGxpY2F0aW9uLERldmVsb3BtZW50IEFwcGxpY2F0aW9uIFRyYWNraW5nLCBEQSBFbnF1aXJ5LCBEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBFbnF1aXJ5LCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iVGhlIG9mZmljaWFsIExpc21vcmUgQ2l0eSBDb3VuY2lsIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KDQogICAgPHRpdGxlPkxpc21vcmUgQ2l0eSBDb3VuY2lsIC0gQXBwbGljYXRpb24gVHJhY2tlcjwvdGl0bGU+DQoNCiAgICA8IS0tZmF2aWNvbi0tPg0KICAgIDxsaW5rIGhyZWY9Ii9mYXZpY29uLmljbyIgcmVsPSJzaG9ydGN1dCBpY29uIiB0eXBlPSJpbWFnZS94LWljb24iPg0KDQogICAgPCEtLSBqUXVlcnkgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0xLjExLjEuanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjExLjIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvY29yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvYWNjb3JkaW9uLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS90aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC10aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBEYXRhVGFibGVzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2pxdWVyeS5kYXRhVGFibGVzLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMuYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuc2NzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gQm9vdHN0cmFwIFNCLUFkbWluLTIgUGx1Z2luIGFuZCBvdGhlciBjc3MgYW5kIGpzIGZpbGVzLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtY29tYm9ib3guanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtZGF0ZXBpY2tlci5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2pxdWVyeS5mb3JtLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LnRhYmxlc29ydGVyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWFzdGVydmlldy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21ldGlzTWVudS5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3NiLWFkbWluLTIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL2Nzcy9ib290c3RyYXAtY29tYm9ib3guY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvZGF0ZXBpY2tlcjMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVydmlldy1jdXN0b21pc2F0aW9ucy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9zYi1hZG1pbi0yLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDxsaW5rIGhyZWY9Ii9Db3VuY2lsX1RoZW1lL0xpc21vcmUvbGlzbW9yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgDQoNCiAgICA8IS0tIEhUTUw1IFNoaW0gYW5kIFJlc3BvbmQuanMgSUU4IHN1cHBvcnQgb2YgSFRNTDUgZWxlbWVudHMgYW5kIG1lZGlhIHF1ZXJpZXMgLS0+DQogICAgPCEtLSBXQVJOSU5HOiBSZXNwb25kLmpzIGRvZXNuJ3Qgd29yayBpZiB5b3UgdmlldyB0aGUgcGFnZSB2aWEgZmlsZTovLyAtLT4NCiAgICA8IS0tW2lmIGx0IElFIDldPg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL2h0bWw1c2hpdi8zLjcuMC9odG1sNXNoaXYuanMiPjwvc2NyaXB0Pg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL3Jlc3BvbmQuanMvMS40LjIvcmVzcG9uZC5taW4uanMiPjwvc2NyaXB0Pg0KICAgIDwhW2VuZGlmXS0tPg0KDQogICAgPGxpbmsgaHJlZj0naHR0cDovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9UmFsZXdheTozMDAsNDAwLDYwMCw3MDAnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPg0KICAgIDxsaW5rIGhyZWY9J2h0dHA6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PU9zd2FsZDozMDAsNDAwLDcwMCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQo8L2hlYWQ+DQoNCg0KPGJvZHkgY2xhc3M9ImNicC1zcG1lbnUtcHVzaCI+DQogICAgPGRpdiBjbGFzcz0id3IiPg0KICAgICAgICA8ZGl2IGlkPSJoZWFkZXIiPg0KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl8xMiI+DQoNCiAgICAgICAgPGgxIGlkPSJsb2dvIj48YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9kZWZhdWx0LmFzcCI+PGltZyBzcmM9Ii8vY2FuZGlkYXRlLW9mZmljZS5zMy5hbWF6b25hd3MuY29tL3NoYXJlZC9saXNtb3JlL2ltYWdlcy9sb2dvLnBuZyIgYWx0PSJMaXNtb3JlIENpdHkgQ291bmNpbCIgc3R5bGU9InBhZGRpbmctdG9wOjVweCI+PHN0cm9uZyBjbGFzcz0idmgiPkxpc21vcmUgQ2l0eSBDb3VuY2lsPC9zdHJvbmc+PC9hPjwvaDE+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0idXRpbGl0eSByaWdodCI+DQogICAgICAgICAgICA8YSBjbGFzcz0iaG9tZS1saW5rIiBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9kZWZhdWx0LmFzcCI+DQogICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vY2FuZGlkYXRlLW9mZmljZS5zMy5hbWF6b25hd3MuY29tL3NoYXJlZC9saXNtb3JlL2ltYWdlcy9ob21lLnBuZyIgYWx0PSJMaXNtb3JlIENpdHkgQ291bmNpbCI+DQogICAgICAgICAgICA8L2E+DQogICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyIj4NCiAgICAgICAgPC9kaXY+DQoNCiAgICA8L2Rpdj4NCjwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJiYW5uZXIiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmFubmVyLXRleHQgY2YiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJhbm5lci10ZXh0LWNvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzcz0ib3ciPkRBIFRyYWNraW5nIDxzcGFuPlBvcnRhbDwvc3Bhbj48L2gxPg0KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibm0iPkluZm9ybWF0aW9uIG9uIGRldmVsb3BtZW50IGFwcGxpY2F0aW9ucyBpbiB0aGUgTGlzbW9yZSBMb2NhbCBHb3Zlcm5tZW50IEFyZWEuIDwvcD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyXzEyIGludHJvIGNmIj4gICAgICAgICAgICA8IS0tIE5hdmlnYXRpb24gLS0+DQogICAgICAgICAgICA8bmF2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWRlZmF1bHQgbmF2YmFyLXN0YXRpYy10b3AiIHJvbGU9Im5hdmlnYXRpb24iIHN0eWxlPSJtYXJnaW4tYm90dG9tOiAwIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJuYXZiYXItdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIubmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5Ub2dnbGUgbmF2aWdhdGlvbjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXZiYXItYnJhbmQiIGhyZWY9IiMiPjwvYT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLWhlYWRlciAtLT4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItdG9wLWxpbmtzIG5hdmJhci1yaWdodCBoaWRkZW4teHMgaGlkZGVuLXNtIGhpZGRlbi1tZCI+DQogICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGlkPSJwcmludEljb24iIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXByaW50IiBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1kZWZhdWx0IHNpZGViYXIiIHJvbGU9Im5hdmlnYXRpb24iPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaWRlYmFyLW5hdiBuYXZiYXItY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJzaWRlLW1lbnUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb24gVHJhY2tlcjxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0Fib3V0IHRhcmdldD1fc2VsZj5XaGF0IGlzIEFwcGxpY2F0aW9uIFRyYWNrZXI/PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0Rpc2NsYWltZXIgdGFyZ2V0PV9zZWxmPkRpc2NsYWltZXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvSW5kZXggdGFyZ2V0PT5BcHBsaWNhdGlvbiBUcmFja2VyIEhvbWU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvU2VhcmNoIGlkPXNlYXJjaCB0YXJnZXQ9X3NlbGY+U2VhcmNoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9SZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPVRydWUmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIGlkPW91dHN0YW5kaW5nLWFwcHMgdGFyZ2V0PV9zZWxmPlVuZGV0ZXJtaW5lZCBBcHBsaWNhdGlvbnM8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P1JlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1UcnVlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgaWQ9ZXhoaWJpdGVkLWFwcHMgdGFyZ2V0PV9zZWxmPkFwcGxpY2F0aW9ucyBPbiBFeGhpYml0aW9uPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9ucyBTdWJtaXR0ZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTUlMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+VGhpcyBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT03JTJmMDMlMmYyMDIxJkRhdGVUbz0xMyUyZjAzJTJmMjAyMSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjAzJTJmMjAyMSZEYXRlVG89MTUlMmYwMyUyZjIwMjEmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDIlMmYyMDIxJkRhdGVUbz0yOCUyZjAyJTJmMjAyMSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIERldGVybWluZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTUlMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTclMmYwMyUyZjIwMjEmRGF0ZVRvPTEzJTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5MYXN0IFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwMyUyZjIwMjEmRGF0ZVRvPTE1JTJmMDMlMmYyMDIxJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDIlMmYyMDIxJkRhdGVUbz0yOCUyZjAyJTJmMjAyMSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uc2lkZWJhci1jb2xsYXBzZSAtLT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gKDUuMjAxOS4xNDkuMSk8L2gyPg0KICAgIDwvZGl2Pg0KICAgIDxoND5EZXRhaWxlZCBpbmZvcm1hdGlvbiByZWxhdGVkIHRvIHRoZSBhcHBsaWNhdGlvbjo8L2g0Pg0KICAgIDxiciAvPg0KICAgIDxkaXY+DQogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6c2hvd0FsbCgpOyI+U2hvdyBBbGw8L2E+IC8NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpoaWRlQWxsKCk7Ij5IaWRlIEFsbDwvYT4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGlkPSJhcHBsaWNhdGlvbiI+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZGV0YWlscyI+PGEgaHJlZj0iIyI+RGV0YWlsczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGVzY3JpcHRpb246IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRBMTkvMTQ5IC0gNzYgQ3VsbGVuIFN0cmVldCAtIENoYW5nZSBvZiB1c2U8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+U3VibWl0dGVkIERhdGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDgvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gVHlwZTogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGV2ZWxvcG1lbnQgQXBwbGljYXRpb248L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0icHJvcGVydGllcyI+PGEgaHJlZj0iIyI+UHJvcGVydGllczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+NzYgQ3VsbGVuIFN0LCBOaW1iaW4gMjQ4MCBOU1cgIChMT1Q6IDggRFA6IDU0NDYpPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InBlb3BsZSI+PGEgaHJlZj0iIyI+UGVvcGxlPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwbGljYW50OiAgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJpbmNpcGFsIENlcnRpZnlpbmcgQXV0aG9yaXR5OiAgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJvZmZpY2VyIj48YSBocmVmPSIjIj5PZmZpY2VyPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BbmRyZXcgUGFya3M8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZGVjaXNpb24iPjxhIGhyZWY9IiMiPkRlY2lzaW9uPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BcHBsaWNhdGlvbiBTdGF0dXM6IERldGVybWluZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERldGVybWluYXRpb24gRGF0ZToNCjIxLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldGVybWluYXRpb24gVHlwZTogQ29uZGl0aW9uYWwgQ29uc2VudCAtIENvdW5jaWwgU3RhZmY8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZXN0aW1hdGVkQ29zdCI+PGEgaHJlZj0iIyI+RXN0aW1hdGVkIENvc3Q8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiQwLjAwPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InRyYWNraW5nIj48YSBocmVmPSIjIj5UcmFja2luZzwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi13cmFwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnN3aXBlIHRhYmxlIHRvIHRoZSBsZWZ0IHRvIHJldmVhbCBtb3JlIGRhdGE8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1ib3JkZXJlZCBuby1mb290ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkRlc2NyaXB0aW9uPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNvbW1lbmNlZCBEYXRlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EdWUgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21wbGV0ZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BcHBsaWNhdGlvbiBSZWNlaXZlZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowOC8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA4LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA5LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+U2l0ZSBWaXNpdC9Jbml0aWFsIFJldmlldzwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowOS8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjMwLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjEwLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Q29uc2VudCBOb3RpY2UgSXNzdWVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIyLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjIvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjIvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGgzIGlkPSJyZWxhdGVkQXBwbGljYXRpb25zIj48YSBocmVmPSIjIj5SZWxhdGVkIEFwcGxpY2F0aW9uczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGI+Tm8gZGF0YS48L2I+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQoNCg0KDQoNCg0KPGgzIGlkPSJkb2N1bWVudHMiPjxhIGhyZWY9IiMiPkRvY3VtZW50czwvYT48L2gzPg0KPGRpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLXdyYXAiPg0KICAgICAgICAgICAgPHNwYW4+c3dpcGUgdGFibGUgdG8gdGhlIGxlZnQgdG8gcmV2ZWFsIG1vcmUgZGF0YTwvc3Bhbj4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWFycm93LXJpZ2h0IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9zcGFuPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBpZD0iZG9jLWNvdW50Ij5Ub3RhbCBudW1iZXIgb2YgZG9jdW1lbnRzOiAxPC9kaXY+DQogICAgPHRhYmxlIGlkPSJkb2MtdGFibGUiIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG5vLWZvb3RlciI+DQogICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICA8dGg+UmVjb3JkIE51bWJlcjwvdGg+DQogICAgICAgICAgICAgICAgPHRoPkRlc2NyaXB0aW9uPC90aD4NCiAgICAgICAgICAgICAgICA8dGg+RG9jdW1lbnQgVHlwZTwvdGg+DQogICAgICAgICAgICAgICAgPHRoPlNpemU8L3RoPg0KICAgICAgICAgICAgICAgIDx0aD5WaWV3IExpbms8L3RoPg0KICAgICAgICAgICAgPC90cj4NCiAgICAgICAgPC90aGVhZD4NCiAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QUQxOS85Nzg5PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBDb25zZW50IE5vdGljZSAtIDc2IEN1bGxlbiBTdHJlZXQgTklNQklOIDI0ODA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlBERjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAwLjIwIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL3RyYWNrZXIubGlzbW9yZS5uc3cuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1XTDBCRGRqekVKVT0iIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgIDwvdGJvZHk+DQogICAgPC90YWJsZT4NCjwvZGl2Pg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0iY29udGFjdFVzIj48YSBocmVmPSIjIj5Db250YWN0IFVzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48cD4NClNob3VsZCB5b3Ugd2lzaCB0byBjb250YWN0IGNvdW5jaWwgdG8gbWFrZSBlbnF1aXJpZXMgcmVnYXJkaW5nIGFwcGxpY2F0aW9ucyBkaXNwbGF5ZWQgb24gdGhlIHdlYnNpdGUsIHBsZWFzZSBjb250YWN0IGVpdGhlciBieSBlbWFpbCA8YSBzdHlsZT0iY29sb3I6IGJsdWUiIGhyZWY9Im1haWx0bzpjb3VuY2lsQGxpc21vcmUubnN3Lmdvdi5hdT9zdWJqZWN0PVN1Ym1pc3Npb24gZm9yIGFwcGxpY2F0aW9uICAoNS4yMDE5LjE0OS4xKSI+Y291bmNpbEBsaXNtb3JlLm5zdy5nb3YuYXU8L2E+LCBwaG9uZSAxMzAwIDg3IDgzIDg3IGR1cmluZyBub3JtYWwgb2ZmaWNlIGhvdXJzIG9yIGluIHdyaXRpbmcgdG8gUE8gQm94IDIzQSwgTGlzbW9yZSBOU1cgMjQ4MC4gQWxsIGNvcnJlc3BvbmRlbmNlIHNob3VsZCBiZSBhZGRyZXNzZWQgdG8gdGhlIEdlbmVyYWwgTWFuYWdlciBhbmQgcXVvdGUgdGhlIHJlbGV2YW50IGFwcGxpY2F0aW9uIHJlZmVyZW5jZSBudW1iZXIuDQo8L3A+DQo8cD4NCklmIHRoZSBhcHBsaWNhdGlvbiBkaXNwbGF5ZWQgb24gdGhpcyB3ZWJzaXRlIGlzIHVuZGVyIGN1cnJlbnQgbmVpZ2hib3VyIG5vdGlmaWNhdGlvbiwgcHJvcGVydGllcyBjb25zaWRlcmVkIGJ5IENvdW5jaWwgdG8gcG9zc2libHkgYmUgZGV0cmltZW50YWxseSBhZmZlY3RlZCB3aWxsIGJlIGNvbnRhY3RlZCBpbmRpdmlkdWFsbHkgYW5kIGFkdmlzZWQgb2YgdGhlaXIgc3VibWlzc2lvbiBvcHBvcnR1bml0aWVzIHVuZGVyIENoYXB0ZXIgMTAgTGlzbW9yZSBEZXZlbG9wbWVudCBDb250cm9sIFBsYW4gMjAxMi4NCjwvcD4NCjxwPg0KPGEgaHJlZj0iaHR0cDovL3d3dy5saXNtb3JlLm5zdy5nb3YuYXUvY3BfdGhlbWVzL2RlZmF1bHQvcGFnZS5hc3A/cD1ET0MtTEhSLTgzLTc2LTU4IiAgdGFyZ2V0PSJfYmxhbmsiPkNMSUNLIEhFUkU8L2E+IHRvIHZpc2l0IENvdW5jaWzigJlzIHdlYnNpdGUgYW5kIHNlZSBmdXJ0aGVyIGRldGFpbHMgb24gdGhlIG1ha2luZyBvZiBzdWJtaXNzaW9ucyBvciByaW5nIDEzMDAgODcgODMgODcgZHVyaW5nIG5vcm1hbCBvZmZpY2UgaG91cnMuDQo8L3A+DQo8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJub3RpZmllZEFkZHJlc3NlcyI+PGEgaHJlZj0iIyI+Tm90aWZpZWQgQWRkcmVzc2VzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8Yj5ObyBkYXRhLjwvYj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQo8aDMgaWQ9Imdvb2dsZW1hcHMiPjxhIGhyZWY9IiMiPkdvb2dsZSBNYXBzPC9hPjwvaDM+DQo8ZGl2IGlkPSJtYXBfY29udGFpbmVyIj4NCiAgICA8ZGl2IGlkPSJtYXBfY2FudmFzIiBjbGFzcz0iaWZyYW1lLXJ3ZCI+DQogICAgPC9kaXY+DQo8L2Rpdj4NCg0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgd2luZG93Lm9ubG9hZCA9IGxvYWRHb29nbGVNYXBzU2NyaXB0Ow0KDQogICAgdmFyIGdlb2NvZGVyOw0KICAgIHZhciBtYXA7DQogICAgdmFyIHRpbWVvdXQgPSAzMDA7DQogICAgdmFyIHByb3BlcnRpZXMgPSBbIjc2IEN1bGxlbiBTdCwgTmltYmluIDI0ODAgTlNXICJdOw0KICAgIHZhciBsYXRMbmdBcnIgPSBbXTsNCg0KICAgIGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBzU2NyaXB0KCkgew0KICAgICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7DQogICAgICAgIHNjcmlwdC50eXBlID0gInRleHQvamF2YXNjcmlwdCI7DQogICAgICAgIHNjcmlwdC5zcmMgPSAiLy9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2pzP2tleT1BSXphU3lBOHliMEx6Vlh4TXZoLTNVYzZibzNULUJtbEY2WXR2bjQmY2FsbGJhY2s9bG9hZEdvb2dsZU1hcHMiOw0KICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gcmVuZGVyR29vZ2xlTWFwcygpDQogICAgew0KICAgICAgICB2YXIgbWFwT3B0aW9ucyA9IHsNCiAgICAgICAgICAgIGNlbnRlcjogbGF0TG5nQXJyWzBdLA0KICAgICAgICAgICAgem9vbTogMTYsDQogICAgICAgICAgICBtYXBUeXBlSWQ6IGdvb2dsZS5tYXBzLk1hcFR5cGVJZC5ST0FETUFQLA0KICAgICAgICAgICAgbWFwVHlwZUNvbnRyb2w6IGZhbHNlDQogICAgICAgIH0NCg0KICAgICAgICBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtYXBfY2FudmFzIiksIG1hcE9wdGlvbnMpOw0KDQogICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZERvbUxpc3RlbmVyKHdpbmRvdywgJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgdmFyIGNlbnRlciA9IG1hcC5nZXRDZW50ZXIoKTsNCiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIobWFwLCAncmVzaXplJyk7DQogICAgICAgICAgICBtYXAuc2V0Q2VudGVyKGNlbnRlcik7DQogICAgICAgIH0pOw0KDQogICAgfQ0KDQogICAgZnVuY3Rpb24gbG9hZEdvb2dsZU1hcHMoKSB7DQogICAgICAgIGdlb2NvZGVyID0gbmV3IGdvb2dsZS5tYXBzLkdlb2NvZGVyKCk7DQogICAgICAgIHZhciBub09mRmFpbGVkTG9jYXRpb25TZWFyY2ggPSAwOw0KDQogICAgICAgICQocHJvcGVydGllcykuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHsNCiAgICAgICAgICAgIHZhciBwcm9wZXJ0eUFkZHJlc3MgPSBlbGVtZW50Ow0KDQogICAgICAgICAgICAvL0dldCBnZW9jb2RlDQogICAgICAgICAgICBnZW9jb2Rlci5nZW9jb2RlKHsgJ2FkZHJlc3MnOiBwcm9wZXJ0eUFkZHJlc3MgfSwgZnVuY3Rpb24gKHJlc3VsdHMsIHN0YXR1cykgew0KICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT0spIHsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSByZXN1bHRzWzBdLmdlb21ldHJ5LmxvY2F0aW9uOw0KICAgICAgICAgICAgICAgICAgICB2YXIgbGF0TG5nID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhsb2NhdGlvbi5sYXQoKSwgbG9jYXRpb24ubG5nKCkpOw0KDQogICAgICAgICAgICAgICAgICAgIGxhdExuZ0Fyci5wdXNoKGxhdExuZyk7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYobGF0TG5nQXJyLmxlbmd0aCA9PSAxKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJHb29nbGVNYXBzKCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAvL0NyZWF0ZSBtYXJrZXIgZm9yIG1hcCBhbmQgcGxhY2UgaXQgb24gdGhlIG1hcA0KICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7DQogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogbGF0TG5nLA0KICAgICAgICAgICAgICAgICAgICAgICAgbWFwOiBtYXANCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRTdHJpbmcgPSAnPGRpdj48c3Bhbj4nICsgcHJvcGVydHlBZGRyZXNzICsgJzwvc3Bhbj48L2Rpdj4nOw0KICAgICAgICAgICAgICAgICAgICB2YXIgaW5mb3dpbmRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KHsgICAvL0NyZWF0ZSBpbmZvIHdpbmRvdw0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29udGVudFN0cmluZw0KICAgICAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXJrZXIsICdjbGljaycsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaW5mb3dpbmRvdy5vcGVuKG1hcCwgbWFya2VyKTsNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIC8vaWYgbm8gbG9jYXRpb24gZm91bmQgYnkgZ29vZ2xlIGZvciBhIHByb3BlcnR5DQogICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RhdHVzID09ICJaRVJPX1JFU1VMVFMiKSB7DQogICAgICAgICAgICAgICAgICAgIG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCsrOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCA9PSAkKHByb3BlcnRpZXMpLmxlbmd0aCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9WRVJfUVVFUllfTElNSVQpIHsNCiAgICAgICAgICAgICAgICAgICAgLy9zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgZ2V0R2VvQ29kZUZvckFkZHJlc3MoaWQsIGFkZHJlc3MpOyB9LCAodGltZW91dCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvL1JlcGxhY2VzIGdvb2dsZSBtYXBzIGNvbnRlbnQgd2l0aCBhIG5ldyBkaXYgYmxvY2sgdGhhdCBoYXMgaW5mbyBtZXNzYWdlDQogICAgZnVuY3Rpb24gcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCkgew0KICAgICAgICB2YXIgbmV3Q29udGVudCA9ICc8ZGl2IGNsYXNzPSJ1aS1hY2NvcmRpb24tY29udGVudCB1aS1oZWxwZXItcmVzZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbSI+JyArDQogICAgICAgICAgICAnPHA+Q291bGRuXCd0IGZpbmQgdGhlIHByb3BlcnR5IGFkZHJlc3MoZXMpIG9uIEdvb2dsZSBNYXBzLiA8cD4nICsNCiAgICAgICAgICAgICc8L2Rpdj4nOw0KDQogICAgICAgICQoJyNtYXBfY29udGFpbmVyJykucmVwbGFjZVdpdGgobmV3Q29udGVudCk7DQogICAgfQ0KDQo8L3NjcmlwdD4NCg0KICAgIDwvZGl2Pg0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAkLmZuLnRvZ2dsZXBhbmVscyA9IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygidWktYWNjb3JkaW9uIHVpLWFjY29yZGlvbi1pY29ucyB1aS1oZWxwZXItcmVzZXQiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoImgzIikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygidWktYWNjb3JkaW9uLWhlYWRlciB1aS1oZWxwZXItcmVzZXQgdWktc3RhdGUtZGVmYXVsdCB1aS1jb3JuZXItdG9wIHVpLWNvcm5lci1ib3R0b20iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmhvdmVyKGZ1bmN0aW9uICgpIHsgJCh0aGlzKS50b2dnbGVDbGFzcygidWktc3RhdGUtaG92ZXIiKTsgfSkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5wcmVwZW5kKCc8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXVwIj48L3NwYW4+JykNCiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGljayhmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS50b2dnbGVDbGFzcygidWktYWNjb3JkaW9uLWhlYWRlci1hY3RpdmUgdWktc3RhdGUtYWN0aXZlIHVpLXN0YXRlLWRlZmF1bHQgdWktY29ybmVyLWJvdHRvbSIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCI+IC5nbHlwaGljb24iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudG9nZ2xlQ2xhc3MoImdseXBoaWNvbi1jaGV2cm9uLXVwIGdseXBoaWNvbi1jaGV2cm9uLWRvd24iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW5kKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm5leHQoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2xpZGVUb2dnbGUoKTsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgICAgICAgICAubmV4dCgpDQogICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoInVpLWFjY29yZGlvbi1jb250ZW50IHVpLWhlbHBlci1yZXNldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYm90dG9tIikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7DQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICAkKCcjYXBwbGljYXRpb24nKS50b2dnbGVwYW5lbHMoKTsNCg0KICAgICAgICAgICAgJCgnI3Byb3BlcnRpZXMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2RldGFpbHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI3RyYWNraW5nJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNkb2N1bWVudHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI3JlbGF0ZWRBcHBsaWNhdGlvbnMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2ZlZXMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2dvb2dsZW1hcHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2NvbnRhY3RVcycpLmNsaWNrKCk7DQogICAgICAgIH0pOw0KDQogICAgICAgIC8qIFNob3dzIGFsbCB0aGUgcGFuZWxzICovDQogICAgICAgIGZ1bmN0aW9uIHNob3dBbGwoKSB7DQogICAgICAgICAgICAkKCcjYXBwbGljYXRpb24nKS5jaGlsZHJlbigiaDMiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygidWktc3RhdGUtZGVmYXVsdCIpKSB7DQogICAgICAgICAgICAgICAgICAgICQodGhpcykuY2xpY2soKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8qIEhpZGUgYWxsIHRoZSBwYW5lbHMgKi8NCiAgICAgICAgZnVuY3Rpb24gaGlkZUFsbCgpIHsNCiAgICAgICAgICAgICQoJyNhcHBsaWNhdGlvbicpLmNoaWxkcmVuKCJoMyIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCJ1aS1zdGF0ZS1hY3RpdmUiKSkgew0KICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0NCg0KICAgIDwvc2NyaXB0Pg0KDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPCEtLSAvLmNvbnRhaW5lci1mbHVpZCAtLT4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJwcmUtZm9vdGVyIGNvbnRhaW5lcl8xMiBjZiI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJncmlkXzQiPg0KICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0iYWNjZC10b2dnIj5Db250YWN0IFVzIDxpIGNsYXNzPSJmYSBmYS1jYXJldC1kb3duIj48L2k+PC9oMz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhY2NkLWNvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgICAgIDxwPkxpc21vcmUgQ2l0eSBDb3VuY2lsPGJyPkFCTjogNjAgMDgwIDkzMiA4Mzc8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPjQzIE9saXZlciBBdmVudWU8YnI+R29vbmVsbGFiYWggTlNXIDI0ODA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPlBvc3Q6IFBPIEJveCAyM0EsIExpc21vcmUgTlNXIDI0ODA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPlBob25lOiAxMzAwIDg3IDgzIDg3PGJyPkZheDogMDIgNjYgMjUwIDQwMDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHA+RW1haWw6IDxhIGhyZWY9Im1haWx0bzpjb3VuY2lsQGxpc21vcmUubnN3Lmdvdi5hdSI+PHN0cm9uZz5jb3VuY2lsQGxpc21vcmUubnN3Lmdvdi5hdTwvc3Ryb25nPjwvYT48L3A+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgaWQ9ImZvb3RlciI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXJfMTIgY2YiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdyaWRfMTIgY2Ygb3ciPg0KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iY3AiPkNvcHlyaWdodCAmY29weTsgMjAyMSBMaXNtb3JlIENpdHkgQ291bmNpbDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cubGlzbW9yZS5uc3cuZ292LmF1L3BhZ2UuYXNwP3A9RE9DLU9DVC02NC01Ny0zMCIgdGFyZ2V0PSJfcGFyZW50Ij5JbnRlcm5ldCBQcml2YWN5IFN0YXRlbWVudDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICZuYnNwOyZuYnNwOyB8ICZuYnNwOyZuYnNwOw0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5saXNtb3JlLm5zdy5nb3YuYXUvcGFnZS5hc3A/cD1ET0MtT0NULTY0LTU3LTMwIiB0YXJnZXQ9Il9wYXJlbnQiPkRpc2NsYWltZXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAmbmJzcDsmbmJzcDsgfCAmbmJzcDsmbmJzcDsNCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cubGlzbW9yZS5uc3cuZ292LmF1L2NwX3RoZW1lcy9kZWZhdWx0L3NpdGVtYXAuYXNwIiB0YXJnZXQ9Il9wYXJlbnQiPlNpdGUgTWFwPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQo8L2JvZHk+DQo8L2h0bWw+DQo=
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000126.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:48:26 GMT
      Content-Length:
      - '33244'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000157.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:48:30 GMT
      Content-Length:
      - '29520'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/013.2005.00000894.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:48:35 GMT
      Content-Length:
      - '29181'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000136.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:48:39 GMT
      Content-Length:
      - '28467'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2018.00000124.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:48:43 GMT
      Content-Length:
      - '28255'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2019.00000134.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:48:48 GMT
      Content-Length:
      - '29618'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000013.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:48:53 GMT
      Content-Length:
      - '28889'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2018.00000157.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:48:57 GMT
      Content-Length:
      - '28489'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2019.00000101.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=md5enghm2dqqnh0ue4qse5ez; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 15 Mar 2021 04:49:02 GMT
      Content-Length:
      - '28471'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
recorded_with: VCR 6.0.0
